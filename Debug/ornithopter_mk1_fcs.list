
ornithopter_mk1_fcs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000072c  0800bbf8  0800bbf8  0000cbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c324  0800c324  0000e22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c324  0800c324  0000d324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c32c  0800c32c  0000e22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c32c  0800c32c  0000d32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c330  0800c330  0000d330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800c334  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006164  2000022c  0800c560  0000e22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006390  0800c560  0000e390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002014e  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004414  00000000  00000000  0002e3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001978  00000000  00000000  000327c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013da  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005722  00000000  00000000  00035512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d37f  00000000  00000000  0003ac34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c74  00000000  00000000  00057fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00138c27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ed8  00000000  00000000  00138c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00140b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bbdc 	.word	0x0800bbdc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	0800bbdc 	.word	0x0800bbdc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <Logger_init>:

const char *ll_labels[] = {
	"TRACE", "DEBUG", "INFO", "WARN", "ERROR"
};

void Logger_init(Logger *logger, osMessageQueueId_t mq_id, FILE *out) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	logger->mq_id = mq_id;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	601a      	str	r2, [r3, #0]
	logger->msg_size = (size_t)osMessageQueueGetMsgSize(mq_id);
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f005 f860 	bl	800600c <osMessageQueueGetMsgSize>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	605a      	str	r2, [r3, #4]
	logger->out = out;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Logger_log_impl>:

void Logger_log_impl(Logger *logger, LogLevel level, const char *fmt, va_list args) {
 8000f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f64:	b08e      	sub	sp, #56	@ 0x38
 8000f66:	af04      	add	r7, sp, #16
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	72fb      	strb	r3, [r7, #11]
 8000f72:	466b      	mov	r3, sp
 8000f74:	461d      	mov	r5, r3
    if (level < LOG_LEVEL) return;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f240 8097 	bls.w	80010ac <Logger_log_impl+0x14c>

    float t_s = 0.0f;
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    if (osKernelGetState() == osKernelRunning) {
 8000f84:	f004 fe06 	bl	8005b94 <osKernelGetState>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d10b      	bne.n	8000fa6 <Logger_log_impl+0x46>
        t_s = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8000f8e:	f004 fe49 	bl	8005c24 <osKernelGetTickCount>
 8000f92:	ee07 0a90 	vmov	s15, r0
 8000f96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9a:	eddf 6a47 	vldr	s13, [pc, #284]	@ 80010b8 <Logger_log_impl+0x158>
 8000f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }

    char buf[logger->msg_size];
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	685c      	ldr	r4, [r3, #4]
 8000faa:	4623      	mov	r3, r4
 8000fac:	3b01      	subs	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	46a2      	mov	sl, r4
 8000fb4:	469b      	mov	fp, r3
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	46a0      	mov	r8, r4
 8000fce:	4699      	mov	r9, r3
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fe4:	1de3      	adds	r3, r4, #7
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	ebad 0d03 	sub.w	sp, sp, r3
 8000fee:	ab04      	add	r3, sp, #16
 8000ff0:	3300      	adds	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    size_t max_msg_len = sizeof(buf) - 3;
 8000ff4:	1ee3      	subs	r3, r4, #3
 8000ff6:	617b      	str	r3, [r7, #20]
    int n = snprintf(buf, max_msg_len, LOG_PREFIX_FMT, t_s, ll_labels[level]);
 8000ff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ffa:	f7ff fad5 	bl	80005a8 <__aeabi_f2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	7af9      	ldrb	r1, [r7, #11]
 8001004:	482d      	ldr	r0, [pc, #180]	@ (80010bc <Logger_log_impl+0x15c>)
 8001006:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800100a:	9102      	str	r1, [sp, #8]
 800100c:	e9cd 2300 	strd	r2, r3, [sp]
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <Logger_log_impl+0x160>)
 8001012:	6979      	ldr	r1, [r7, #20]
 8001014:	69b8      	ldr	r0, [r7, #24]
 8001016:	f008 fb07 	bl	8009628 <sniprintf>
 800101a:	6238      	str	r0, [r7, #32]
    if (n < 0) n = 0;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da01      	bge.n	8001026 <Logger_log_impl+0xc6>
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
    vsnprintf(buf + n, max_msg_len - n, fmt, args);
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	18d0      	adds	r0, r2, r3
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	1ad1      	subs	r1, r2, r3
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	f008 fb9f 	bl	8009778 <vsniprintf>

    size_t len = strlen(buf);
 800103a:	69b8      	ldr	r0, [r7, #24]
 800103c:	f7ff f948 	bl	80002d0 <strlen>
 8001040:	6138      	str	r0, [r7, #16]
    if (len + 2 < sizeof(buf)) {
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	3302      	adds	r3, #2
 8001046:	429c      	cmp	r4, r3
 8001048:	d90f      	bls.n	800106a <Logger_log_impl+0x10a>
        buf[len] = '\r';
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4413      	add	r3, r2
 8001050:	220d      	movs	r2, #13
 8001052:	701a      	strb	r2, [r3, #0]
        buf[len + 1] = '\n';
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	3301      	adds	r3, #1
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	210a      	movs	r1, #10
 800105c:	54d1      	strb	r1, [r2, r3]
        buf[len + 2] = '\0';
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	3302      	adds	r3, #2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	2100      	movs	r1, #0
 8001066:	54d1      	strb	r1, [r2, r3]
 8001068:	e00b      	b.n	8001082 <Logger_log_impl+0x122>
    } else {
        buf[sizeof(buf) - 3] = '\r';
 800106a:	1ee3      	subs	r3, r4, #3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	210d      	movs	r1, #13
 8001070:	54d1      	strb	r1, [r2, r3]
        buf[sizeof(buf) - 2] = '\n';
 8001072:	1ea3      	subs	r3, r4, #2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	210a      	movs	r1, #10
 8001078:	54d1      	strb	r1, [r2, r3]
        buf[sizeof(buf) - 1] = '\0';
 800107a:	1e63      	subs	r3, r4, #1
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	2100      	movs	r1, #0
 8001080:	54d1      	strb	r1, [r2, r3]
    }

    if (osKernelGetState() == osKernelRunning) {
 8001082:	f004 fd87 	bl	8005b94 <osKernelGetState>
 8001086:	4603      	mov	r3, r0
 8001088:	2b02      	cmp	r3, #2
 800108a:	d107      	bne.n	800109c <Logger_log_impl+0x13c>
        osMessageQueuePut(logger->mq_id, buf, (uint8_t)level, 10);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	7afa      	ldrb	r2, [r7, #11]
 8001092:	230a      	movs	r3, #10
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	f004 fefb 	bl	8005e90 <osMessageQueuePut>
 800109a:	e005      	b.n	80010a8 <Logger_log_impl+0x148>
    } else {
        fprintf(logger->out, "%s", buf);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	4619      	mov	r1, r3
 80010a2:	69b8      	ldr	r0, [r7, #24]
 80010a4:	f008 fa9a 	bl	80095dc <fputs>
 80010a8:	46ad      	mov	sp, r5
 80010aa:	e000      	b.n	80010ae <Logger_log_impl+0x14e>
    if (level < LOG_LEVEL) return;
 80010ac:	46ad      	mov	sp, r5
    }
}
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010b6:	bf00      	nop
 80010b8:	447a0000 	.word	0x447a0000
 80010bc:	20000000 	.word	0x20000000
 80010c0:	0800bc20 	.word	0x0800bc20

080010c4 <Logger_write_log>:

void Logger_write_log(Logger *logger) {
 80010c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	466b      	mov	r3, sp
 80010d0:	461e      	mov	r6, r3
	char buf[logger->msg_size];
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6859      	ldr	r1, [r3, #4]
 80010d6:	460b      	mov	r3, r1
 80010d8:	3b01      	subs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	2300      	movs	r3, #0
 80010de:	4688      	mov	r8, r1
 80010e0:	4699      	mov	r9, r3
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010f6:	2300      	movs	r3, #0
 80010f8:	460c      	mov	r4, r1
 80010fa:	461d      	mov	r5, r3
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	00eb      	lsls	r3, r5, #3
 8001106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800110a:	00e2      	lsls	r2, r4, #3
 800110c:	1dcb      	adds	r3, r1, #7
 800110e:	08db      	lsrs	r3, r3, #3
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	ebad 0d03 	sub.w	sp, sp, r3
 8001116:	466b      	mov	r3, sp
 8001118:	3300      	adds	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
	while (osMessageQueueGet(logger->mq_id, buf, NULL, 10) == osOK) {
 800111c:	e005      	b.n	800112a <Logger_write_log+0x66>
		fprintf(logger->out, "%s", buf);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4619      	mov	r1, r3
 8001124:	68b8      	ldr	r0, [r7, #8]
 8001126:	f008 fa59 	bl	80095dc <fputs>
	while (osMessageQueueGet(logger->mq_id, buf, NULL, 10) == osOK) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	230a      	movs	r3, #10
 8001130:	2200      	movs	r2, #0
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	f004 ff0c 	bl	8005f50 <osMessageQueueGet>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0ef      	beq.n	800111e <Logger_write_log+0x5a>
 800113e:	46b5      	mov	sp, r6
	}
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800114a <log_info>:
    va_start(args, fmt);
    Logger_log_impl(logger, LL_WARN, fmt, args);
    va_end(args);
}

void log_info(Logger *logger, const char *fmt, ...) {
 800114a:	b40e      	push	{r1, r2, r3}
 800114c:	b580      	push	{r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	60fb      	str	r3, [r7, #12]
    Logger_log_impl(logger, LL_INFO, fmt, args);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	2102      	movs	r1, #2
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fefd 	bl	8000f60 <Logger_log_impl>
    va_end(args);
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001170:	b003      	add	sp, #12
 8001172:	4770      	bx	lr

08001174 <log_debug>:

void log_debug(Logger *logger, const char *fmt, ...) {
 8001174:	b40e      	push	{r1, r2, r3}
 8001176:	b580      	push	{r7, lr}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	60fb      	str	r3, [r7, #12]
    Logger_log_impl(logger, LL_DEBUG, fmt, args);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	2101      	movs	r1, #1
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fee8 	bl	8000f60 <Logger_log_impl>
    va_end(args);
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119a:	b003      	add	sp, #12
 800119c:	4770      	bx	lr
	...

080011a0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart2
int _write(int fd, char* ptr, int len) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == 1 || fd == 2) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d002      	beq.n	80011b8 <_write+0x18>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d111      	bne.n	80011dc <_write+0x3c>
	  hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <_write+0x48>)
 80011c4:	f004 f8c2 	bl	800534c <HAL_UART_Transmit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]
	  if (hstatus == HAL_OK)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <_write+0x36>
		  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e004      	b.n	80011e0 <_write+0x40>
	  else
		  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	e001      	b.n	80011e0 <_write+0x40>
  }
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002e4 	.word	0x200002e4

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f0:	f001 f986 	bl	8002500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f4:	f000 f876 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f8:	f000 f996 	bl	8001528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011fc:	f000 f96a 	bl	80014d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001200:	f000 f8e2 	bl	80013c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001204:	f000 f90e 	bl	8001424 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001208:	f004 fca0 	bl	8005b4c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dfl_log_q */
  dfl_log_qHandle = osMessageQueueNew (16, 512, &dfl_log_q_attributes);
 800120c:	4a21      	ldr	r2, [pc, #132]	@ (8001294 <main+0xa8>)
 800120e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001212:	2010      	movs	r0, #16
 8001214:	f004 fdc8 	bl	8005da8 <osMessageQueueNew>
 8001218:	4603      	mov	r3, r0
 800121a:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <main+0xac>)
 800121c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  Logger_init(&dfl_logger, dfl_log_qHandle, stdout);
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <main+0xac>)
 8001220:	6819      	ldr	r1, [r3, #0]
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <main+0xb0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	461a      	mov	r2, r3
 800122a:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <main+0xb4>)
 800122c:	f7ff fe82 	bl	8000f34 <Logger_init>
  i2c_probe(&hi2c1);
 8001230:	481c      	ldr	r0, [pc, #112]	@ (80012a4 <main+0xb8>)
 8001232:	f001 f8f7 	bl	8002424 <i2c_probe>
  MotorModules_Init();
 8001236:	f000 f9e5 	bl	8001604 <MotorModules_Init>
  PID_init(&mm1_pid, 1, 0.005, 0.003);
 800123a:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 80012a8 <main+0xbc>
 800123e:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80012ac <main+0xc0>
 8001242:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001246:	481a      	ldr	r0, [pc, #104]	@ (80012b0 <main+0xc4>)
 8001248:	f000 fd58 	bl	8001cfc <PID_init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultLogger */
  defaultLoggerHandle = osThreadNew(StartDefaultLogger, NULL, &defaultLogger_attributes);
 800124c:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <main+0xc8>)
 800124e:	2100      	movs	r1, #0
 8001250:	4819      	ldr	r0, [pc, #100]	@ (80012b8 <main+0xcc>)
 8001252:	f004 fcfc 	bl	8005c4e <osThreadNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <main+0xd0>)
 800125a:	6013      	str	r3, [r2, #0]

  /* creation of logDriverStatus */
  logDriverStatusHandle = osThreadNew(StartLogDriverStatus, NULL, &logDriverStatus_attributes);
 800125c:	4a18      	ldr	r2, [pc, #96]	@ (80012c0 <main+0xd4>)
 800125e:	2100      	movs	r1, #0
 8001260:	4818      	ldr	r0, [pc, #96]	@ (80012c4 <main+0xd8>)
 8001262:	f004 fcf4 	bl	8005c4e <osThreadNew>
 8001266:	4603      	mov	r3, r0
 8001268:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <main+0xdc>)
 800126a:	6013      	str	r3, [r2, #0]

  /* creation of readEncoders */
  readEncodersHandle = osThreadNew(StartReadEncoders, NULL, &readEncoders_attributes);
 800126c:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <main+0xe0>)
 800126e:	2100      	movs	r1, #0
 8001270:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <main+0xe4>)
 8001272:	f004 fcec 	bl	8005c4e <osThreadNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a16      	ldr	r2, [pc, #88]	@ (80012d4 <main+0xe8>)
 800127a:	6013      	str	r3, [r2, #0]

  /* creation of driveMotors */
  driveMotorsHandle = osThreadNew(StartDriveMotors, NULL, &driveMotors_attributes);
 800127c:	4a16      	ldr	r2, [pc, #88]	@ (80012d8 <main+0xec>)
 800127e:	2100      	movs	r1, #0
 8001280:	4816      	ldr	r0, [pc, #88]	@ (80012dc <main+0xf0>)
 8001282:	f004 fce4 	bl	8005c4e <osThreadNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a15      	ldr	r2, [pc, #84]	@ (80012e0 <main+0xf4>)
 800128a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800128c:	f004 fca4 	bl	8005bd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <main+0xa4>
 8001294:	0800bf74 	.word	0x0800bf74
 8001298:	2000033c 	.word	0x2000033c
 800129c:	20000070 	.word	0x20000070
 80012a0:	20000340 	.word	0x20000340
 80012a4:	20000248 	.word	0x20000248
 80012a8:	3b449ba6 	.word	0x3b449ba6
 80012ac:	3ba3d70a 	.word	0x3ba3d70a
 80012b0:	2000036c 	.word	0x2000036c
 80012b4:	0800bee4 	.word	0x0800bee4
 80012b8:	08001639 	.word	0x08001639
 80012bc:	2000032c 	.word	0x2000032c
 80012c0:	0800bf08 	.word	0x0800bf08
 80012c4:	08001655 	.word	0x08001655
 80012c8:	20000330 	.word	0x20000330
 80012cc:	0800bf2c 	.word	0x0800bf2c
 80012d0:	08001675 	.word	0x08001675
 80012d4:	20000334 	.word	0x20000334
 80012d8:	0800bf50 	.word	0x0800bf50
 80012dc:	08001691 	.word	0x08001691
 80012e0:	20000338 	.word	0x20000338

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	@ 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2234      	movs	r2, #52	@ 0x34
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f008 fae2 	bl	80098bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <SystemClock_Config+0xdc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a2b      	ldr	r2, [pc, #172]	@ (80013c0 <SystemClock_Config+0xdc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <SystemClock_Config+0xdc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <SystemClock_Config+0xe0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	@ (80013c4 <SystemClock_Config+0xe0>)
 800132e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <SystemClock_Config+0xe0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001358:	23b4      	movs	r3, #180	@ 0xb4
 800135a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001364:	2302      	movs	r3, #2
 8001366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4618      	mov	r0, r3
 800136e:	f003 f88d 	bl	800448c <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001378:	f000 f9f6 	bl	8001768 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800137c:	f002 fcba 	bl	8003cf4 <HAL_PWREx_EnableOverDrive>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001386:	f000 f9ef 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	230f      	movs	r3, #15
 800138c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138e:	2302      	movs	r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001396:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800139c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2105      	movs	r1, #5
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fcf3 	bl	8003d94 <HAL_RCC_ClockConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80013b4:	f000 f9d8 	bl	8001768 <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3750      	adds	r7, #80	@ 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013ce:	4a13      	ldr	r2, [pc, #76]	@ (800141c <MX_I2C1_Init+0x54>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <MX_I2C1_Init+0x58>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013e0:	2220      	movs	r2, #32
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <MX_I2C1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_I2C1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <MX_I2C1_Init+0x50>)
 8001406:	f001 fb4d 	bl	8002aa4 <HAL_I2C_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001410:	f000 f9aa 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000248 	.word	0x20000248
 800141c:	40005400 	.word	0x40005400
 8001420:	000186a0 	.word	0x000186a0

08001424 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	@ 0x30
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	2224      	movs	r2, #36	@ 0x24
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f008 fa42 	bl	80098bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001442:	4a23      	ldr	r2, [pc, #140]	@ (80014d0 <MX_TIM1_Init+0xac>)
 8001444:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_TIM1_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_TIM1_Init+0xa8>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800146c:	2303      	movs	r3, #3
 800146e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800147c:	2305      	movs	r3, #5
 800147e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 800148c:	2305      	movs	r3, #5
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	@ (80014cc <MX_TIM1_Init+0xa8>)
 8001498:	f003 fb60 	bl	8004b5c <HAL_TIM_Encoder_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014a2:	f000 f961 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	@ (80014cc <MX_TIM1_Init+0xa8>)
 80014b4:	f003 fe6a 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014be:	f000 f953 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3730      	adds	r7, #48	@ 0x30
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000029c 	.word	0x2000029c
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_USART2_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_USART2_UART_Init+0x4c>)
 800150c:	f003 fece 	bl	80052ac <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f000 f927 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200002e4 	.word	0x200002e4
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a25      	ldr	r2, [pc, #148]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	4a1e      	ldr	r2, [pc, #120]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6313      	str	r3, [r2, #48]	@ 0x30
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <MX_GPIO_Init+0xd0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	4812      	ldr	r0, [pc, #72]	@ (80015fc <MX_GPIO_Init+0xd4>)
 80015b4:	f001 fa5c 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480c      	ldr	r0, [pc, #48]	@ (8001600 <MX_GPIO_Init+0xd8>)
 80015d0:	f001 f8ba 	bl	8002748 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80015d4:	2320      	movs	r3, #32
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4804      	ldr	r0, [pc, #16]	@ (80015fc <MX_GPIO_Init+0xd4>)
 80015ec:	f001 f8ac 	bl	8002748 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020800 	.word	0x40020800

08001604 <MotorModules_Init>:

/* USER CODE BEGIN 4 */

static void MotorModules_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	/* Motor 1 (front left) */
	mm1.cfg.htim = &htim1;
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MotorModules_Init+0x28>)
 800160a:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <MotorModules_Init+0x2c>)
 800160c:	601a      	str	r2, [r3, #0]
	mm1.cfg.hi2c = &hi2c1;
 800160e:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MotorModules_Init+0x28>)
 8001610:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <MotorModules_Init+0x30>)
 8001612:	605a      	str	r2, [r3, #4]
	mm1.cfg.i2c_addr = MM1_I2C_ADDR;
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <MotorModules_Init+0x28>)
 8001616:	221e      	movs	r2, #30
 8001618:	811a      	strh	r2, [r3, #8]
	mm1.cfg.motor_num = 1;
 800161a:	4b04      	ldr	r3, [pc, #16]	@ (800162c <MotorModules_Init+0x28>)
 800161c:	2201      	movs	r2, #1
 800161e:	729a      	strb	r2, [r3, #10]
	MM_Init(&mm1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <MotorModules_Init+0x28>)
 8001622:	f000 f922 	bl	800186a <MM_Init>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000034c 	.word	0x2000034c
 8001630:	2000029c 	.word	0x2000029c
 8001634:	20000248 	.word	0x20000248

08001638 <StartDefaultLogger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultLogger */
void StartDefaultLogger(void *argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for (;;) {
		Logger_write_log(&dfl_logger);
 8001640:	4803      	ldr	r0, [pc, #12]	@ (8001650 <StartDefaultLogger+0x18>)
 8001642:	f7ff fd3f 	bl	80010c4 <Logger_write_log>
		delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f000 ff14 	bl	8002474 <delay>
		Logger_write_log(&dfl_logger);
 800164c:	bf00      	nop
 800164e:	e7f7      	b.n	8001640 <StartDefaultLogger+0x8>
 8001650:	20000340 	.word	0x20000340

08001654 <StartLogDriverStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogDriverStatus */
void StartLogDriverStatus(void *argument)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogDriverStatus */
  /* Infinite loop */
	for (;;) {
		MMD_Log_Status_Flags(&mm1);
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <StartLogDriverStatus+0x1c>)
 800165e:	f000 fa07 	bl	8001a70 <MMD_Log_Status_Flags>
		delay(1000);
 8001662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001666:	f000 ff05 	bl	8002474 <delay>
		MMD_Log_Status_Flags(&mm1);
 800166a:	bf00      	nop
 800166c:	e7f6      	b.n	800165c <StartLogDriverStatus+0x8>
 800166e:	bf00      	nop
 8001670:	2000034c 	.word	0x2000034c

08001674 <StartReadEncoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadEncoders */
void StartReadEncoders(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadEncoders */
  /* Infinite loop */
	for (;;) {
		MME_Update(&mm1);
 800167c:	4803      	ldr	r0, [pc, #12]	@ (800168c <StartReadEncoders+0x18>)
 800167e:	f000 f92b 	bl	80018d8 <MME_Update>
		delay(10);
 8001682:	200a      	movs	r0, #10
 8001684:	f000 fef6 	bl	8002474 <delay>
		MME_Update(&mm1);
 8001688:	bf00      	nop
 800168a:	e7f7      	b.n	800167c <StartReadEncoders+0x8>
 800168c:	2000034c 	.word	0x2000034c

08001690 <StartDriveMotors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriveMotors */
void StartDriveMotors(void *argument)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af04      	add	r7, sp, #16
 8001696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriveMotors */
  /* Infinite loop */
	PID_reset(&mm1_pid, 90, mm1.angle);
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <StartDriveMotors+0x98>)
 800169a:	edd3 7a05 	vldr	s15, [r3, #20]
 800169e:	eef0 0a67 	vmov.f32	s1, s15
 80016a2:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800172c <StartDriveMotors+0x9c>
 80016a6:	4822      	ldr	r0, [pc, #136]	@ (8001730 <StartDriveMotors+0xa0>)
 80016a8:	f000 fb41 	bl	8001d2e <PID_reset>
	for (;;) {
		int16_t speed = (int16_t)clampf(PID_update(&mm1_pid, mm1.angle), -800, 800);
 80016ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001728 <StartDriveMotors+0x98>)
 80016ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80016b2:	eeb0 0a67 	vmov.f32	s0, s15
 80016b6:	481e      	ldr	r0, [pc, #120]	@ (8001730 <StartDriveMotors+0xa0>)
 80016b8:	f000 fb5e 	bl	8001d78 <PID_update>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8001734 <StartDriveMotors+0xa4>
 80016c4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001738 <StartDriveMotors+0xa8>
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f000 fe56 	bl	800237c <clampf>
 80016d0:	eef0 7a40 	vmov.f32	s15, s0
 80016d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d8:	ee17 3a90 	vmov	r3, s15
 80016dc:	81fb      	strh	r3, [r7, #14]
		log_info(&dfl_logger, "angle=%.3f -- rpm=%.3f -- speed=%d", mm1.angle, mm1.rpm, speed);
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <StartDriveMotors+0x98>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff60 	bl	80005a8 <__aeabi_f2d>
 80016e8:	4604      	mov	r4, r0
 80016ea:	460d      	mov	r5, r1
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <StartDriveMotors+0x98>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff59 	bl	80005a8 <__aeabi_f2d>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80016fe:	9102      	str	r1, [sp, #8]
 8001700:	e9cd 2300 	strd	r2, r3, [sp]
 8001704:	4622      	mov	r2, r4
 8001706:	462b      	mov	r3, r5
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <StartDriveMotors+0xac>)
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <StartDriveMotors+0xb0>)
 800170c:	f7ff fd1d 	bl	800114a <log_info>
		MMD_Set_Speed(&mm1, speed, MMD_CMD_SET_SPEED_NORMAL);
 8001710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001714:	22d1      	movs	r2, #209	@ 0xd1
 8001716:	4619      	mov	r1, r3
 8001718:	4803      	ldr	r0, [pc, #12]	@ (8001728 <StartDriveMotors+0x98>)
 800171a:	f000 fab5 	bl	8001c88 <MMD_Set_Speed>
		delay(20);
 800171e:	2014      	movs	r0, #20
 8001720:	f000 fea8 	bl	8002474 <delay>
	for (;;) {
 8001724:	bf00      	nop
 8001726:	e7c1      	b.n	80016ac <StartDriveMotors+0x1c>
 8001728:	2000034c 	.word	0x2000034c
 800172c:	42b40000 	.word	0x42b40000
 8001730:	2000036c 	.word	0x2000036c
 8001734:	44480000 	.word	0x44480000
 8001738:	c4480000 	.word	0xc4480000
 800173c:	0800bc78 	.word	0x0800bc78
 8001740:	20000340 	.word	0x20000340

08001744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001756:	f000 fef5 	bl	8002544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40001000 	.word	0x40001000

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <Error_Handler+0x8>

08001774 <i2c_master_tx>:
    "p_err", "crc_err", "cmd_time_l", "m_fault_l", "no_pow_l", "uart_err", "N/A", "N/A", "N/A", "rst", "cmd_time", "m_faulting", "no_pow", "err_active", "m_out_en", "m_driving"
};

/* I2C helpers */

HAL_StatusTypeDef i2c_master_tx(MotorModule *m, uint8_t *buf, uint16_t size) {
 8001774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001778:	b08b      	sub	sp, #44	@ 0x2c
 800177a:	af02      	add	r7, sp, #8
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	4613      	mov	r3, r2
 8001782:	80fb      	strh	r3, [r7, #6]
 8001784:	466b      	mov	r3, sp
 8001786:	461e      	mov	r6, r3
	uint8_t to_tx[size+1];
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	1c59      	adds	r1, r3, #1
 800178c:	1e4b      	subs	r3, r1, #1
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	460a      	mov	r2, r1
 8001792:	2300      	movs	r3, #0
 8001794:	4690      	mov	r8, r2
 8001796:	4699      	mov	r9, r3
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ac:	460a      	mov	r2, r1
 80017ae:	2300      	movs	r3, #0
 80017b0:	4614      	mov	r4, r2
 80017b2:	461d      	mov	r5, r3
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	00eb      	lsls	r3, r5, #3
 80017be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017c2:	00e2      	lsls	r2, r4, #3
 80017c4:	460b      	mov	r3, r1
 80017c6:	3307      	adds	r3, #7
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	ebad 0d03 	sub.w	sp, sp, r3
 80017d0:	ab02      	add	r3, sp, #8
 80017d2:	3300      	adds	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
	memcpy(to_tx, buf, size);
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	461a      	mov	r2, r3
 80017da:	68b9      	ldr	r1, [r7, #8]
 80017dc:	69b8      	ldr	r0, [r7, #24]
 80017de:	f008 f94a 	bl	8009a76 <memcpy>
	to_tx[size] = get_crc(buf, size);
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	88fc      	ldrh	r4, [r7, #6]
 80017e8:	4619      	mov	r1, r3
 80017ea:	68b8      	ldr	r0, [r7, #8]
 80017ec:	f000 fde4 	bl	80023b8 <get_crc>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	551a      	strb	r2, [r3, r4]
	HAL_StatusTypeDef hstat = HAL_I2C_Master_Transmit(m->cfg.hi2c, m->cfg.i2c_addr, to_tx, size+1, HAL_MAX_DELAY);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6858      	ldr	r0, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8919      	ldrh	r1, [r3, #8]
 8001800:	88fb      	ldrh	r3, [r7, #6]
 8001802:	3301      	adds	r3, #1
 8001804:	b29b      	uxth	r3, r3
 8001806:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800180a:	9200      	str	r2, [sp, #0]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	f001 fa8d 	bl	8002d2c <HAL_I2C_Master_Transmit>
 8001812:	4603      	mov	r3, r0
 8001814:	77fb      	strb	r3, [r7, #31]
		for (size_t i = 0; i < size+1; i++)
		    n += snprintf(lbuf + n, dfl_logger.msg_size - n, "0x%02X ", to_tx[i]);
		snprintf(lbuf + n, dfl_logger.msg_size - n, "]");
		log_trace(&dfl_logger, "%s", lbuf);
	}
	return hstat;
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	46b5      	mov	sp, r6
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001824 <i2c_master_rx>:

HAL_StatusTypeDef i2c_master_rx(MotorModule *m, uint8_t *buf, uint16_t size) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	4613      	mov	r3, r2
 8001830:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef hstat = HAL_I2C_Master_Receive(m->cfg.hi2c, m->cfg.i2c_addr, buf, size, HAL_MAX_DELAY);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6858      	ldr	r0, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8919      	ldrh	r1, [r3, #8]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f001 fb70 	bl	8002f28 <HAL_I2C_Master_Receive>
 8001848:	4603      	mov	r3, r0
 800184a:	75bb      	strb	r3, [r7, #22]
	uint8_t calcrc = get_crc(buf, size-1);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	3b01      	subs	r3, #1
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4619      	mov	r1, r3
 8001856:	68b8      	ldr	r0, [r7, #8]
 8001858:	f000 fdae 	bl	80023b8 <get_crc>
 800185c:	4603      	mov	r3, r0
 800185e:	75fb      	strb	r3, [r7, #23]
		for (size_t i = 0; i < size+1; i++)
		    n += snprintf(lbuf + n, dfl_logger.msg_size - n, "0x%02X ", buf[i]);
		snprintf(lbuf + n, dfl_logger.msg_size - n, "] -- calcrc=0x%02X", calcrc);
		log_trace(&dfl_logger, "%s", lbuf);
	}
	return hstat;
 8001860:	7dbb      	ldrb	r3, [r7, #22]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <MM_Init>:

/* General */

void MM_Init(MotorModule *m) {
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	// Encoder init
	m->last_encoder_counts = 0;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
	m->last_encoder_time = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
	m->angle = 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
	m->rpm = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
	m->counter_period = __HAL_TIM_GET_AUTORELOAD(m->cfg.htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	61da      	str	r2, [r3, #28]
	HAL_TIM_Encoder_Start(m->cfg.htim, TIM_CHANNEL_ALL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	213c      	movs	r1, #60	@ 0x3c
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fa01 	bl	8004ca8 <HAL_TIM_Encoder_Start>

	// Driver init
	MMD_Reset(m);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f000 f98c 	bl	8001bc4 <MMD_Reset>
	delay(100);
 80018ac:	2064      	movs	r0, #100	@ 0x64
 80018ae:	f000 fde1 	bl	8002474 <delay>
	MMD_Reinitialize(m);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f9a4 	bl	8001c00 <MMD_Reinitialize>
	delay(100);
 80018b8:	2064      	movs	r0, #100	@ 0x64
 80018ba:	f000 fddb 	bl	8002474 <delay>
	MMD_Clear_Reset(m);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f9bc 	bl	8001c3c <MMD_Clear_Reset>
	delay(20);
 80018c4:	2014      	movs	r0, #20
 80018c6:	f000 fdd5 	bl	8002474 <delay>
	MMD_Log_Firmware_Version(m);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f886 	bl	80019dc <MMD_Log_Firmware_Version>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <MME_Update>:

/* Encoder */

void MME_Update(MotorModule *m) {
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af04      	add	r7, sp, #16
 80018de:	6078      	str	r0, [r7, #4]
	uint32_t t_ms = osKernelGetTickCount();
 80018e0:	f004 f9a0 	bl	8005c24 <osKernelGetTickCount>
 80018e4:	6178      	str	r0, [r7, #20]
    uint32_t counts = (uint32_t)__HAL_TIM_GET_COUNTER(m->cfg.htim);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	613b      	str	r3, [r7, #16]

	m->angle = fmodf(MME_ANGLE_DEG * counts / MME_CPR, 360.0f);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018fa:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80019c4 <MME_Update+0xec>
 80018fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001902:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80019c8 <MME_Update+0xf0>
 8001906:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800190a:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80019c4 <MME_Update+0xec>
 800190e:	eeb0 0a47 	vmov.f32	s0, s14
 8001912:	f00a f86b 	bl	800b9ec <fmodf>
 8001916:	eef0 7a40 	vmov.f32	s15, s0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	edc3 7a05 	vstr	s15, [r3, #20]
	float dcount = counts - m->last_encoder_counts;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	461a      	mov	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001932:	edc7 7a03 	vstr	s15, [r7, #12]
	float dt_s = (t_ms - m->last_encoder_time) / 1000.0f;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001946:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80019cc <MME_Update+0xf4>
 800194a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800194e:	edc7 7a02 	vstr	s15, [r7, #8]
	if (dt_s != 0) m->rpm = (dcount / MME_CPR) / (dt_s / 60.0f);
 8001952:	edd7 7a02 	vldr	s15, [r7, #8]
 8001956:	eef5 7a40 	vcmp.f32	s15, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d010      	beq.n	8001982 <MME_Update+0xaa>
 8001960:	edd7 7a03 	vldr	s15, [r7, #12]
 8001964:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80019c8 <MME_Update+0xf0>
 8001968:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ed9f 6a17 	vldr	s12, [pc, #92]	@ 80019d0 <MME_Update+0xf8>
 8001974:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	edc3 7a06 	vstr	s15, [r3, #24]

	m->last_encoder_counts = counts;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]
	m->last_encoder_time = t_ms;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	611a      	str	r2, [r3, #16]
	log_debug(&dfl_logger, "ENCODER -- count=%u -- angle=%.3f -- rpm=%.3f", counts, m->angle, m->rpm);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fe08 	bl	80005a8 <__aeabi_f2d>
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fe01 	bl	80005a8 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019ae:	e9cd 4500 	strd	r4, r5, [sp]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <MME_Update+0xfc>)
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <MME_Update+0x100>)
 80019b8:	f7ff fbdc 	bl	8001174 <log_debug>
}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	43b40000 	.word	0x43b40000
 80019c8:	43fa0000 	.word	0x43fa0000
 80019cc:	447a0000 	.word	0x447a0000
 80019d0:	42700000 	.word	0x42700000
 80019d4:	0800bd28 	.word	0x0800bd28
 80019d8:	20000340 	.word	0x20000340

080019dc <MMD_Log_Firmware_Version>:

/* Driver */

void MMD_Log_Firmware_Version(MotorModule *m) {
 80019dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e0:	b08c      	sub	sp, #48	@ 0x30
 80019e2:	af06      	add	r7, sp, #24
 80019e4:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_GET_FIRMARE_VERSION };
 80019e6:	2387      	movs	r3, #135	@ 0x87
 80019e8:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef tx_hstat = i2c_master_tx(m, cmd, 1);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	2201      	movs	r2, #1
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff febe 	bl	8001774 <i2c_master_tx>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[5];
	HAL_StatusTypeDef rx_hstat = i2c_master_rx(m, buf, 5);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2205      	movs	r2, #5
 8001a02:	4619      	mov	r1, r3
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff0d 	bl	8001824 <i2c_master_rx>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	75bb      	strb	r3, [r7, #22]
	log_info(&dfl_logger, "MM 0x%02X #%u DRIVER FIRMWARE -- 0x%04X v%u.%u CRC=0x%02X -- tx_hstat=0x%02X -- rx_hstat=0x%02X", m->cfg.i2c_addr, m->cfg.motor_num, (buf[1] << 8) | buf[0], hex_to_bcd(buf[3]), hex_to_bcd(buf[2]), buf[4], tx_hstat, rx_hstat);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	891b      	ldrh	r3, [r3, #8]
 8001a12:	461e      	mov	r6, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a9b      	ldrb	r3, [r3, #10]
 8001a18:	4698      	mov	r8, r3
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	7b3a      	ldrb	r2, [r7, #12]
 8001a20:	ea43 0402 	orr.w	r4, r3, r2
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fc82 	bl	8002330 <hex_to_bcd>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461d      	mov	r5, r3
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fc7c 	bl	8002330 <hex_to_bcd>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	7c3b      	ldrb	r3, [r7, #16]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	7dba      	ldrb	r2, [r7, #22]
 8001a44:	9205      	str	r2, [sp, #20]
 8001a46:	9304      	str	r3, [sp, #16]
 8001a48:	9003      	str	r0, [sp, #12]
 8001a4a:	9102      	str	r1, [sp, #8]
 8001a4c:	9501      	str	r5, [sp, #4]
 8001a4e:	9400      	str	r4, [sp, #0]
 8001a50:	4643      	mov	r3, r8
 8001a52:	4632      	mov	r2, r6
 8001a54:	4904      	ldr	r1, [pc, #16]	@ (8001a68 <MMD_Log_Firmware_Version+0x8c>)
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MMD_Log_Firmware_Version+0x90>)
 8001a58:	f7ff fb77 	bl	800114a <log_info>
}
 8001a5c:	bf00      	nop
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a66:	bf00      	nop
 8001a68:	0800bd58 	.word	0x0800bd58
 8001a6c:	20000340 	.word	0x20000340

08001a70 <MMD_Log_Status_Flags>:

void MMD_Log_Status_Flags(MotorModule *m) {
 8001a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a74:	b08d      	sub	sp, #52	@ 0x34
 8001a76:	af02      	add	r7, sp, #8
 8001a78:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = { MMD_CMD_GET_VARIABLES, 0, MMD_VAR_STATUS_FLAGS, 2 };
 8001a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <MMD_Log_Status_Flags+0x134>)
 8001a7c:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef tx_hstat = i2c_master_tx(m, cmd, 4);
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	2204      	movs	r2, #4
 8001a84:	4619      	mov	r1, r3
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fe74 	bl	8001774 <i2c_master_tx>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[3];
	HAL_StatusTypeDef rx_hstat = i2c_master_rx(m, buf, 3);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2203      	movs	r2, #3
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fec3 	bl	8001824 <i2c_master_rx>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	77bb      	strb	r3, [r7, #30]
	uint16_t flag_word = ((uint16_t)buf[1] << 8) | buf[0];
 8001aa2:	7b7b      	ldrb	r3, [r7, #13]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	7b3b      	ldrb	r3, [r7, #12]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	83bb      	strh	r3, [r7, #28]

	if (LOG_LEVEL <= LL_INFO) {
 8001ab4:	466b      	mov	r3, sp
 8001ab6:	461e      	mov	r6, r3
		char lbuf[dfl_logger.msg_size];
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <MMD_Log_Status_Flags+0x138>)
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	4688      	mov	r8, r1
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ad4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ad8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001adc:	2300      	movs	r3, #0
 8001ade:	460c      	mov	r4, r1
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	00eb      	lsls	r3, r5, #3
 8001aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001af0:	00e2      	lsls	r2, r4, #3
 8001af2:	1dcb      	adds	r3, r1, #7
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	ebad 0d03 	sub.w	sp, sp, r3
 8001afc:	ab02      	add	r3, sp, #8
 8001afe:	3300      	adds	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
		int n = snprintf(lbuf, dfl_logger.msg_size, "DRIVER STATUS FLAGS -- ");
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <MMD_Log_Status_Flags+0x138>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a29      	ldr	r2, [pc, #164]	@ (8001bac <MMD_Log_Status_Flags+0x13c>)
 8001b08:	4619      	mov	r1, r3
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f007 fd8c 	bl	8009628 <sniprintf>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24
		for (size_t i = 0; i < 16; i++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	e029      	b.n	8001b6c <MMD_Log_Status_Flags+0xfc>
			if (strcmp(flags[i], "N/A") == 0)
 8001b18:	4a25      	ldr	r2, [pc, #148]	@ (8001bb0 <MMD_Log_Status_Flags+0x140>)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	4924      	ldr	r1, [pc, #144]	@ (8001bb4 <MMD_Log_Status_Flags+0x144>)
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fb74 	bl	8000210 <strcmp>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01a      	beq.n	8001b64 <MMD_Log_Status_Flags+0xf4>
				continue;
			n += snprintf(lbuf + n, dfl_logger.msg_size - n, "%s=%u ", flags[i], (flag_word >> i) & 1);
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	18d0      	adds	r0, r2, r3
 8001b34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <MMD_Log_Status_Flags+0x138>)
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	1ad1      	subs	r1, r2, r3
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <MMD_Log_Status_Flags+0x140>)
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b44:	8bba      	ldrh	r2, [r7, #28]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	fa42 f303 	asr.w	r3, r2, r3
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4623      	mov	r3, r4
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <MMD_Log_Status_Flags+0x148>)
 8001b56:	f007 fd67 	bl	8009628 <sniprintf>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	4413      	add	r3, r2
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b62:	e000      	b.n	8001b66 <MMD_Log_Status_Flags+0xf6>
				continue;
 8001b64:	bf00      	nop
		for (size_t i = 0; i < 16; i++) {
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	d9d2      	bls.n	8001b18 <MMD_Log_Status_Flags+0xa8>
		}
		snprintf(lbuf + n, dfl_logger.msg_size - n, "-- tx_hstat=0x%02X -- rx_hstat=0x%02X", tx_hstat, rx_hstat);
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	18d0      	adds	r0, r2, r3
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <MMD_Log_Status_Flags+0x138>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	1ad1      	subs	r1, r2, r3
 8001b80:	7ffa      	ldrb	r2, [r7, #31]
 8001b82:	7fbb      	ldrb	r3, [r7, #30]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <MMD_Log_Status_Flags+0x14c>)
 8001b8a:	f007 fd4d 	bl	8009628 <sniprintf>
		log_info(&dfl_logger, "%s", lbuf);
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	490b      	ldr	r1, [pc, #44]	@ (8001bc0 <MMD_Log_Status_Flags+0x150>)
 8001b92:	4805      	ldr	r0, [pc, #20]	@ (8001ba8 <MMD_Log_Status_Flags+0x138>)
 8001b94:	f7ff fad9 	bl	800114a <log_info>
 8001b98:	46b5      	mov	sp, r6
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	372c      	adds	r7, #44	@ 0x2c
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ba4:	0201009a 	.word	0x0201009a
 8001ba8:	20000340 	.word	0x20000340
 8001bac:	0800bdb8 	.word	0x0800bdb8
 8001bb0:	20000014 	.word	0x20000014
 8001bb4:	0800bcdc 	.word	0x0800bcdc
 8001bb8:	0800bdd0 	.word	0x0800bdd0
 8001bbc:	0800bdd8 	.word	0x0800bdd8
 8001bc0:	0800be00 	.word	0x0800be00

08001bc4 <MMD_Reset>:

void MMD_Reset(MotorModule *m) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_RESET };
 8001bcc:	2399      	movs	r3, #153	@ 0x99
 8001bce:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 1);
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fdcb 	bl	8001774 <i2c_master_tx>
 8001bde:	4603      	mov	r3, r0
 8001be0:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER RESET -- hstat=0x%02X", hstat);
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4904      	ldr	r1, [pc, #16]	@ (8001bf8 <MMD_Reset+0x34>)
 8001be8:	4804      	ldr	r0, [pc, #16]	@ (8001bfc <MMD_Reset+0x38>)
 8001bea:	f7ff faae 	bl	800114a <log_info>
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800be04 	.word	0x0800be04
 8001bfc:	20000340 	.word	0x20000340

08001c00 <MMD_Reinitialize>:

void MMD_Reinitialize(MotorModule *m) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_REINITIALIZE };
 8001c08:	2396      	movs	r3, #150	@ 0x96
 8001c0a:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 1);
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fdad 	bl	8001774 <i2c_master_tx>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER REINITIALIZE -- hstat=0x%02X", hstat);
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4904      	ldr	r1, [pc, #16]	@ (8001c34 <MMD_Reinitialize+0x34>)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MMD_Reinitialize+0x38>)
 8001c26:	f7ff fa90 	bl	800114a <log_info>
}
 8001c2a:	bf00      	nop
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800be24 	.word	0x0800be24
 8001c38:	20000340 	.word	0x20000340

08001c3c <MMD_Clear_Reset>:

void MMD_Clear_Reset(MotorModule *m) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	uint8_t cmd[3] = { MMD_CMD_CLEAR_FLAGS, 0x00, 0x04 };
 8001c44:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <MMD_Clear_Reset+0x40>)
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	8019      	strh	r1, [r3, #0]
 8001c50:	3302      	adds	r3, #2
 8001c52:	0c12      	lsrs	r2, r2, #16
 8001c54:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 3);
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fd88 	bl	8001774 <i2c_master_tx>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER CLEAR RESET -- hstat=0x%02X", hstat);
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4904      	ldr	r1, [pc, #16]	@ (8001c80 <MMD_Clear_Reset+0x44>)
 8001c6e:	4805      	ldr	r0, [pc, #20]	@ (8001c84 <MMD_Clear_Reset+0x48>)
 8001c70:	f7ff fa6b 	bl	800114a <log_info>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800be6c 	.word	0x0800be6c
 8001c80:	0800be48 	.word	0x0800be48
 8001c84:	20000340 	.word	0x20000340

08001c88 <MMD_Set_Speed>:

void MMD_Set_Speed(MotorModule *m, int16_t speed, uint8_t mode) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
	uint8_t cmd[4] = { mode, m->cfg.motor_num & 0x7F, speed & 0x7F, (speed >> 7) & 0x7F };
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	723b      	strb	r3, [r7, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7a9b      	ldrb	r3, [r3, #10]
 8001ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	727b      	strb	r3, [r7, #9]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	72bb      	strb	r3, [r7, #10]
 8001cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001cb8:	11db      	asrs	r3, r3, #7
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 4);
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff fd50 	bl	8001774 <i2c_master_tx>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	73fb      	strb	r3, [r7, #15]
	log_debug(&dfl_logger, "DRIVER SET SPEED -- speed=%d -- mode=0x%02X -- hstat=0x%02X", speed, mode, hstat);
 8001cd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cdc:	7879      	ldrb	r1, [r7, #1]
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	4903      	ldr	r1, [pc, #12]	@ (8001cf4 <MMD_Set_Speed+0x6c>)
 8001ce6:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <MMD_Set_Speed+0x70>)
 8001ce8:	f7ff fa44 	bl	8001174 <log_debug>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0800be70 	.word	0x0800be70
 8001cf8:	20000340 	.word	0x20000340

08001cfc <PID_init>:

#include "pid.h"
#include "cmsis_os.h"
#include <stdlib.h>

void PID_init(PID *pid, float Kp, float Ki, float Kd) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d08:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d0c:	ed87 1a00 	vstr	s2, [r7]
	pid->Kp = Kp;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	601a      	str	r2, [r3, #0]
	pid->Ki = Ki;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
	pid->Kd = Kd;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	609a      	str	r2, [r3, #8]
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <PID_reset>:

void PID_reset(PID *pid, float sp, float pv) {
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d3a:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->sp = sp;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	60da      	str	r2, [r3, #12]
	pid->last_e = sp - pv;
 8001d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->integrator = 0;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
	pid->derivator = 0;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
	pid->last_update_time = osKernelGetTickCount();
 8001d66:	f003 ff5d 	bl	8005c24 <osKernelGetTickCount>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	61da      	str	r2, [r3, #28]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <PID_update>:

float PID_update(PID *pid, float pv) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	ed87 0a00 	vstr	s0, [r7]
	uint32_t t_ms = osKernelGetTickCount();
 8001d84:	f003 ff4e 	bl	8005c24 <osKernelGetTickCount>
 8001d88:	6178      	str	r0, [r7, #20]
	float err = pid->sp - pv;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d90:	edd7 7a00 	vldr	s15, [r7]
 8001d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d98:	edc7 7a04 	vstr	s15, [r7, #16]
	if (abs(err) < 1) return 0;
 8001d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da4:	ee17 3a90 	vmov	r3, s15
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <PID_update+0x4a>
 8001dac:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db4:	ee17 3a90 	vmov	r3, s15
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	dc02      	bgt.n	8001dc2 <PID_update+0x4a>
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e04d      	b.n	8001e5e <PID_update+0xe6>
	uint32_t dt = t_ms - pid->last_update_time;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	60fb      	str	r3, [r7, #12]
	pid->integrator += err * dt;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	edc3 7a05 	vstr	s15, [r3, #20]
	if (dt != 0) pid->derivator = (err - pid->last_e) / dt;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d010      	beq.n	8001e16 <PID_update+0x9e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dfa:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dfe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	edc3 7a06 	vstr	s15, [r3, #24]
	float u = pid->Kp*err + pid->Ki*pid->integrator + pid->Kd*pid->derivator;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	edc7 7a02 	vstr	s15, [r7, #8]
	pid->last_e = err;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	611a      	str	r2, [r3, #16]
	pid->last_update_time = t_ms;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	61da      	str	r2, [r3, #28]
	return u;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
}
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <HAL_MspInit+0x54>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	210f      	movs	r1, #15
 8001eae:	f06f 0001 	mvn.w	r0, #1
 8001eb2:	f000 fc1f 	bl	80026f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	@ (8001f48 <HAL_I2C_MspInit+0x84>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12c      	bne.n	8001f40 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	4a17      	ldr	r2, [pc, #92]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f08:	2312      	movs	r3, #18
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f14:	2304      	movs	r3, #4
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <HAL_I2C_MspInit+0x8c>)
 8001f20:	f000 fc12 	bl	8002748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	4a07      	ldr	r2, [pc, #28]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001f2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_I2C_MspInit+0x88>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40005400 	.word	0x40005400
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020400 	.word	0x40020400

08001f54 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12c      	bne.n	8001fd0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_ENC_A_Pin|M1_ENC_B_Pin;
 8001fae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fcc:	f000 fbbc 	bl	8002748 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	@ 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	@ 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	@ (800206c <HAL_UART_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	4a17      	ldr	r2, [pc, #92]	@ (800206c <HAL_UART_MspInit+0x88>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	6413      	str	r3, [r2, #64]	@ 0x40
 8002016:	4b15      	ldr	r3, [pc, #84]	@ (800206c <HAL_UART_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_UART_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	@ (800206c <HAL_UART_MspInit+0x88>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_UART_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800203e:	230c      	movs	r3, #12
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204e:	2307      	movs	r3, #7
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	@ (8002070 <HAL_UART_MspInit+0x8c>)
 800205a:	f000 fb75 	bl	8002748 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	@ 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40004400 	.word	0x40004400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	@ 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	4b33      	ldr	r3, [pc, #204]	@ (8002158 <HAL_InitTick+0xe4>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	4a32      	ldr	r2, [pc, #200]	@ (8002158 <HAL_InitTick+0xe4>)
 800208e:	f043 0310 	orr.w	r3, r3, #16
 8002092:	6413      	str	r3, [r2, #64]	@ 0x40
 8002094:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <HAL_InitTick+0xe4>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a0:	f107 0210 	add.w	r2, r7, #16
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f001 ff8c 	bl	8003fc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ba:	f001 ff5d 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 80020be:	6378      	str	r0, [r7, #52]	@ 0x34
 80020c0:	e004      	b.n	80020cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020c2:	f001 ff59 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 80020c6:	4603      	mov	r3, r0
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <HAL_InitTick+0xe8>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	3b01      	subs	r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <HAL_InitTick+0xec>)
 80020dc:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <HAL_InitTick+0xf0>)
 80020de:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <HAL_InitTick+0xec>)
 80020e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_InitTick+0xec>)
 80020ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_InitTick+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <HAL_InitTick+0xec>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <HAL_InitTick+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002100:	4817      	ldr	r0, [pc, #92]	@ (8002160 <HAL_InitTick+0xec>)
 8002102:	f002 fc61 	bl	80049c8 <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002110:	2b00      	cmp	r3, #0
 8002112:	d11b      	bne.n	800214c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002114:	4812      	ldr	r0, [pc, #72]	@ (8002160 <HAL_InitTick+0xec>)
 8002116:	f002 fcb1 	bl	8004a7c <HAL_TIM_Base_Start_IT>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002124:	2b00      	cmp	r3, #0
 8002126:	d111      	bne.n	800214c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002128:	2036      	movs	r0, #54	@ 0x36
 800212a:	f000 faff 	bl	800272c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0f      	cmp	r3, #15
 8002132:	d808      	bhi.n	8002146 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002134:	2200      	movs	r2, #0
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	2036      	movs	r0, #54	@ 0x36
 800213a:	f000 fadb 	bl	80026f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_InitTick+0xf4>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e002      	b.n	800214c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800214c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002150:	4618      	mov	r0, r3
 8002152:	3738      	adds	r7, #56	@ 0x38
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	431bde83 	.word	0x431bde83
 8002160:	2000038c 	.word	0x2000038c
 8002164:	40001000 	.word	0x40001000
 8002168:	20000058 	.word	0x20000058

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <NMI_Handler+0x4>

08002174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002178:	bf00      	nop
 800217a:	e7fd      	b.n	8002178 <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	bf00      	nop
 8002182:	e7fd      	b.n	8002180 <MemManage_Handler+0x4>

08002184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <UsageFault_Handler+0x4>

08002194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021a8:	4802      	ldr	r0, [pc, #8]	@ (80021b4 <TIM6_DAC_IRQHandler+0x10>)
 80021aa:	f002 fe0b 	bl	8004dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000038c 	.word	0x2000038c

080021b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return 1;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_kill>:

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d2:	f007 fc23 	bl	8009a1c <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
  return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021fa:	bf00      	nop
 80021fc:	e7fd      	b.n	80021fa <_exit+0x12>

080021fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e00a      	b.n	8002226 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002210:	f3af 8000 	nop.w
 8002214:	4601      	mov	r1, r0
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	b2ca      	uxtb	r2, r1
 800221e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	dbf0      	blt.n	8002210 <_read+0x12>
  }

  return len;
 800222e:	687b      	ldr	r3, [r7, #4]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002260:	605a      	str	r2, [r3, #4]
  return 0;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <_isatty>:

int _isatty(int file)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	@ (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f007 fba4 	bl	8009a1c <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	@ (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20020000 	.word	0x20020000
 8002300:	00000400 	.word	0x00000400
 8002304:	200003d4 	.word	0x200003d4
 8002308:	20006390 	.word	0x20006390

0800230c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002310:	4b06      	ldr	r3, [pc, #24]	@ (800232c <SystemInit+0x20>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002316:	4a05      	ldr	r2, [pc, #20]	@ (800232c <SystemInit+0x20>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <hex_to_bcd>:
#include "logger.h"
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"
#include <math.h>

uint8_t hex_to_bcd(uint8_t hex) {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
	return (((hex / 10) << 4) | (hex % 10));
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <hex_to_bcd+0x48>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	08db      	lsrs	r3, r3, #3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	b25b      	sxtb	r3, r3
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	b258      	sxtb	r0, r3
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <hex_to_bcd+0x48>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	08d9      	lsrs	r1, r3, #3
 8002356:	460b      	mov	r3, r1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	b25b      	sxtb	r3, r3
 8002364:	4303      	orrs	r3, r0
 8002366:	b25b      	sxtb	r3, r3
 8002368:	b2db      	uxtb	r3, r3
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	cccccccd 	.word	0xcccccccd

0800237c <clampf>:

float clampf(float v, float lower, float upper) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	ed87 0a03 	vstr	s0, [r7, #12]
 8002386:	edc7 0a02 	vstr	s1, [r7, #8]
 800238a:	ed87 1a01 	vstr	s2, [r7, #4]
	return fmaxf(fminf(v, upper), lower);
 800238e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002392:	ed97 0a03 	vldr	s0, [r7, #12]
 8002396:	f009 fb66 	bl	800ba66 <fminf>
 800239a:	eef0 7a40 	vmov.f32	s15, s0
 800239e:	eef0 0a67 	vmov.f32	s1, s15
 80023a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80023a6:	f009 fb41 	bl	800ba2c <fmaxf>
 80023aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80023ae:	eeb0 0a67 	vmov.f32	s0, s15
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <get_crc>:

uint8_t get_crc(uint8_t *message, uint8_t length) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < length; i++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	73bb      	strb	r3, [r7, #14]
 80023cc:	e01f      	b.n	800240e <get_crc+0x56>
		crc ^= message[i];
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	4053      	eors	r3, r2
 80023da:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 80023dc:	2300      	movs	r3, #0
 80023de:	737b      	strb	r3, [r7, #13]
 80023e0:	e00f      	b.n	8002402 <get_crc+0x4a>
			if (crc & 1) crc ^= 0x91;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d004      	beq.n	80023f6 <get_crc+0x3e>
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	f083 036e 	eor.w	r3, r3, #110	@ 0x6e
 80023f2:	43db      	mvns	r3, r3
 80023f4:	73fb      	strb	r3, [r7, #15]
			crc >>= 1;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 80023fc:	7b7b      	ldrb	r3, [r7, #13]
 80023fe:	3301      	adds	r3, #1
 8002400:	737b      	strb	r3, [r7, #13]
 8002402:	7b7b      	ldrb	r3, [r7, #13]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d9ec      	bls.n	80023e2 <get_crc+0x2a>
	for (uint8_t i = 0; i < length; i++) {
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	3301      	adds	r3, #1
 800240c:	73bb      	strb	r3, [r7, #14]
 800240e:	7bba      	ldrb	r2, [r7, #14]
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	429a      	cmp	r2, r3
 8002414:	d3db      	bcc.n	80023ce <get_crc+0x16>
		}
	}
	return crc;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <i2c_probe>:

void i2c_probe(I2C_HandleTypeDef *hi2c) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    for (uint8_t a = 0x08; a <= 0x77; a++) {                 // 7-bit
 800242c:	2308      	movs	r3, #8
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e014      	b.n	800245c <i2c_probe+0x38>
        if (HAL_I2C_IsDeviceReady(hi2c, a << 1, 2, 10) == HAL_OK) {
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	b29b      	uxth	r3, r3
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	b299      	uxth	r1, r3
 800243a:	230a      	movs	r3, #10
 800243c:	2202      	movs	r2, #2
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 ffa4 	bl	800338c <HAL_I2C_IsDeviceReady>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <i2c_probe+0x32>
            log_info(&dfl_logger, "Found I2C device at 0x%02X \r\n", a);
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	461a      	mov	r2, r3
 800244e:	4907      	ldr	r1, [pc, #28]	@ (800246c <i2c_probe+0x48>)
 8002450:	4807      	ldr	r0, [pc, #28]	@ (8002470 <i2c_probe+0x4c>)
 8002452:	f7fe fe7a 	bl	800114a <log_info>
    for (uint8_t a = 0x08; a <= 0x77; a++) {                 // 7-bit
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	3301      	adds	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b77      	cmp	r3, #119	@ 0x77
 8002460:	d9e7      	bls.n	8002432 <i2c_probe+0xe>
        }
    }
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	0800beac 	.word	0x0800beac
 8002470:	20000340 	.word	0x20000340

08002474 <delay>:

void delay(uint32_t ms) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
    if (osKernelGetState() == osKernelRunning) {
 800247c:	f003 fb8a 	bl	8005b94 <osKernelGetState>
 8002480:	4603      	mov	r3, r0
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <delay+0x1a>
        osDelay(ms);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f003 fc73 	bl	8005d72 <osDelay>
        return;
 800248c:	e00b      	b.n	80024a6 <delay+0x32>
    }
    uint32_t start = HAL_GetTick();
 800248e:	f000 f86d 	bl	800256c <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]
    while ((HAL_GetTick() - start) < ms) {}
 8002494:	bf00      	nop
 8002496:	f000 f869 	bl	800256c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d8f7      	bhi.n	8002496 <delay+0x22>
}
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024b0:	f7ff ff2c 	bl	800230c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024b4:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024b8:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024bc:	e002      	b.n	80024c4 <LoopCopyDataInit>

080024be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c2:	3304      	adds	r3, #4

080024c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c8:	d3f9      	bcc.n	80024be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ca:	4a0a      	ldr	r2, [pc, #40]	@ (80024f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024cc:	4c0a      	ldr	r4, [pc, #40]	@ (80024f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d0:	e001      	b.n	80024d6 <LoopFillZerobss>

080024d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d4:	3204      	adds	r2, #4

080024d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d8:	d3fb      	bcc.n	80024d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80024da:	f007 faa5 	bl	8009a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024de:	f7fe fe85 	bl	80011ec <main>
  bx  lr    
 80024e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ec:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80024f0:	0800c334 	.word	0x0800c334
  ldr r2, =_sbss
 80024f4:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80024f8:	20006390 	.word	0x20006390

080024fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024fc:	e7fe      	b.n	80024fc <ADC_IRQHandler>
	...

08002500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002504:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_Init+0x40>)
 800250a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800250e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_Init+0x40>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_Init+0x40>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800251a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <HAL_Init+0x40>)
 8002522:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002526:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 f8d8 	bl	80026de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff fda0 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002534:	f7ff fc9a 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	2000005c 	.word	0x2000005c
 8002568:	200003d8 	.word	0x200003d8

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	@ (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	200003d8 	.word	0x200003d8

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	@ (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	@ (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	@ (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff4c 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002706:	f7ff ff61 	bl	80025cc <__NVIC_GetPriorityGrouping>
 800270a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f7ff ffb1 	bl	8002678 <NVIC_EncodePriority>
 8002716:	4602      	mov	r2, r0
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff80 	bl	8002624 <__NVIC_SetPriority>
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff54 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002740:	bf00      	nop
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e165      	b.n	8002a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 8154 	bne.w	8002a2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b01      	cmp	r3, #1
 800278c:	d005      	beq.n	800279a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	2b02      	cmp	r3, #2
 8002798:	d130      	bne.n	80027fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d0:	2201      	movs	r2, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 0201 	and.w	r2, r3, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b03      	cmp	r3, #3
 8002806:	d017      	beq.n	8002838 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d123      	bne.n	800288c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	08da      	lsrs	r2, r3, #3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3208      	adds	r2, #8
 800284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0203 	and.w	r2, r3, #3
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80ae 	beq.w	8002a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028de:	4b5a      	ldr	r3, [pc, #360]	@ (8002a48 <HAL_GPIO_Init+0x300>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ea:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_GPIO_Init+0x304>)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	220f      	movs	r2, #15
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	@ (8002a50 <HAL_GPIO_Init+0x308>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d025      	beq.n	8002962 <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	@ (8002a54 <HAL_GPIO_Init+0x30c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01f      	beq.n	800295e <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <HAL_GPIO_Init+0x310>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d019      	beq.n	800295a <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4c      	ldr	r2, [pc, #304]	@ (8002a5c <HAL_GPIO_Init+0x314>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d013      	beq.n	8002956 <HAL_GPIO_Init+0x20e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4b      	ldr	r2, [pc, #300]	@ (8002a60 <HAL_GPIO_Init+0x318>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d00d      	beq.n	8002952 <HAL_GPIO_Init+0x20a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4a      	ldr	r2, [pc, #296]	@ (8002a64 <HAL_GPIO_Init+0x31c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d007      	beq.n	800294e <HAL_GPIO_Init+0x206>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	@ (8002a68 <HAL_GPIO_Init+0x320>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_GPIO_Init+0x202>
 8002946:	2306      	movs	r3, #6
 8002948:	e00c      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800294a:	2307      	movs	r3, #7
 800294c:	e00a      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800294e:	2305      	movs	r3, #5
 8002950:	e008      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002952:	2304      	movs	r3, #4
 8002954:	e006      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002956:	2303      	movs	r3, #3
 8002958:	e004      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800295a:	2302      	movs	r3, #2
 800295c:	e002      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <HAL_GPIO_Init+0x21c>
 8002962:	2300      	movs	r3, #0
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f002 0203 	and.w	r2, r2, #3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4093      	lsls	r3, r2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002974:	4935      	ldr	r1, [pc, #212]	@ (8002a4c <HAL_GPIO_Init+0x304>)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	089b      	lsrs	r3, r3, #2
 800297a:	3302      	adds	r3, #2
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002982:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a6:	4a31      	ldr	r2, [pc, #196]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d0:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d6:	4b25      	ldr	r3, [pc, #148]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a24:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_GPIO_Init+0x324>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	f67f ae96 	bls.w	8002764 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	@ 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12b      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff f9fa 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	@ 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b08:	f001 fa36 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a81      	ldr	r2, [pc, #516]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d807      	bhi.n	8002b28 <HAL_I2C_Init+0x84>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a80      	ldr	r2, [pc, #512]	@ (8002d1c <HAL_I2C_Init+0x278>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e006      	b.n	8002b36 <HAL_I2C_Init+0x92>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d20 <HAL_I2C_Init+0x27c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e7      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a78      	ldr	r2, [pc, #480]	@ (8002d24 <HAL_I2C_Init+0x280>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d802      	bhi.n	8002b78 <HAL_I2C_Init+0xd4>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_I2C_Init+0xe8>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a69      	ldr	r2, [pc, #420]	@ (8002d28 <HAL_I2C_Init+0x284>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	495c      	ldr	r1, [pc, #368]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d819      	bhi.n	8002be0 <HAL_I2C_Init+0x13c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e59      	subs	r1, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_I2C_Init+0x138>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e59      	subs	r1, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	e051      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e04f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_I2C_Init+0x168>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e012      	b.n	8002c32 <HAL_I2C_Init+0x18e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x196>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_I2C_Init+0x1bc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e58      	subs	r0, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6809      	ldr	r1, [r1, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6911      	ldr	r1, [r2, #16]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	000186a0 	.word	0x000186a0
 8002d1c:	001e847f 	.word	0x001e847f
 8002d20:	003d08ff 	.word	0x003d08ff
 8002d24:	431bde83 	.word	0x431bde83
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	461a      	mov	r2, r3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	817b      	strh	r3, [r7, #10]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d40:	f7ff fc14 	bl	800256c <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	f040 80e0 	bne.w	8002f14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2319      	movs	r3, #25
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4970      	ldr	r1, [pc, #448]	@ (8002f20 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fd92 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0d3      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x50>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0cc      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d007      	beq.n	8002da2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	@ 0x21
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	893a      	ldrh	r2, [r7, #8]
 8002dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a50      	ldr	r2, [pc, #320]	@ (8002f24 <HAL_I2C_Master_Transmit+0x1f8>)
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002de4:	8979      	ldrh	r1, [r7, #10]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 fbfc 	bl	80035e8 <I2C_MasterRequestWrite>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e08d      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e10:	e066      	b.n	8002ee0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	6a39      	ldr	r1, [r7, #32]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fe50 	bl	8003abc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	781a      	ldrb	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d11b      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x188>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d017      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	6a39      	ldr	r1, [r7, #32]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fe47 	bl	8003b4c <I2C_WaitOnBTFFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e01a      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d194      	bne.n	8002e12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	e000      	b.n	8002f16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f14:	2302      	movs	r3, #2
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00100002 	.word	0x00100002
 8002f24:	ffff0000 	.word	0xffff0000

08002f28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	@ 0x30
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fb16 	bl	800256c <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 8217 	bne.w	800337e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2319      	movs	r3, #25
 8002f56:	2201      	movs	r2, #1
 8002f58:	497c      	ldr	r1, [pc, #496]	@ (800314c <HAL_I2C_Master_Receive+0x224>)
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 fc94 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
 8002f68:	e20a      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Receive+0x50>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e203      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d007      	beq.n	8002f9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2222      	movs	r2, #34	@ 0x22
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8003150 <HAL_I2C_Master_Receive+0x228>)
 8002fde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fb80 	bl	80036ec <I2C_MasterRequestRead>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e1c4      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d113      	bne.n	8003026 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ffe:	2300      	movs	r3, #0
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	e198      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	2b01      	cmp	r3, #1
 800302c:	d11b      	bne.n	8003066 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800303c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	e178      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	2b02      	cmp	r3, #2
 800306c:	d11b      	bne.n	80030a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	e158      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030cc:	e144      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	f200 80f1 	bhi.w	80032ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d123      	bne.n	8003128 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fd79 	bl	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e145      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003126:	e117      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	2b02      	cmp	r3, #2
 800312e:	d14e      	bne.n	80031ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	4906      	ldr	r1, [pc, #24]	@ (8003154 <HAL_I2C_Master_Receive+0x22c>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fba4 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e11a      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
 800314a:	bf00      	nop
 800314c:	00100002 	.word	0x00100002
 8003150:	ffff0000 	.word	0xffff0000
 8003154:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031cc:	e0c4      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	2200      	movs	r2, #0
 80031d6:	496c      	ldr	r1, [pc, #432]	@ (8003388 <HAL_I2C_Master_Receive+0x460>)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fb55 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0cb      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	3b01      	subs	r3, #1
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	2200      	movs	r2, #0
 8003232:	4955      	ldr	r1, [pc, #340]	@ (8003388 <HAL_I2C_Master_Receive+0x460>)
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fb27 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e09d      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b8:	e04e      	b.n	8003358 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fc8c 	bl	8003bdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e058      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d124      	bne.n	8003358 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003312:	2b03      	cmp	r3, #3
 8003314:	d107      	bne.n	8003326 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003324:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aeb6 	bne.w	80030ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	@ 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010004 	.word	0x00010004

0800338c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff f8e6 	bl	800256c <HAL_GetTick>
 80033a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	f040 8111 	bne.w	80035d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2319      	movs	r3, #25
 80033ba:	2201      	movs	r2, #1
 80033bc:	4988      	ldr	r1, [pc, #544]	@ (80035e0 <HAL_I2C_IsDeviceReady+0x254>)
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa62 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033ca:	2302      	movs	r3, #2
 80033cc:	e104      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_I2C_IsDeviceReady+0x50>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0fd      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d007      	beq.n	8003402 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2224      	movs	r2, #36	@ 0x24
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a70      	ldr	r2, [pc, #448]	@ (80035e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003424:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003434:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa20 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345c:	d103      	bne.n	8003466 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003464:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e0b6      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003478:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800347a:	f7ff f877 	bl	800256c <HAL_GetTick>
 800347e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	bf0c      	ite	eq
 800348e:	2301      	moveq	r3, #1
 8003490:	2300      	movne	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ae:	e025      	b.n	80034fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034b0:	f7ff f85c 	bl	800256c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d302      	bcc.n	80034c6 <HAL_I2C_IsDeviceReady+0x13a>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22a0      	movs	r2, #160	@ 0xa0
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b02      	cmp	r3, #2
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2ba0      	cmp	r3, #160	@ 0xa0
 8003506:	d005      	beq.n	8003514 <HAL_I2C_IsDeviceReady+0x188>
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_I2C_IsDeviceReady+0x188>
 800350e:	7dbb      	ldrb	r3, [r7, #22]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0cd      	beq.n	80034b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2220      	movs	r2, #32
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d129      	bne.n	800357e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003538:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	2319      	movs	r3, #25
 8003556:	2201      	movs	r2, #1
 8003558:	4921      	ldr	r1, [pc, #132]	@ (80035e0 <HAL_I2C_IsDeviceReady+0x254>)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f994 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e036      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e02c      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800358c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003596:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	490f      	ldr	r1, [pc, #60]	@ (80035e0 <HAL_I2C_IsDeviceReady+0x254>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f970 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e012      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	429a      	cmp	r2, r3
 80035be:	f4ff af32 	bcc.w	8003426 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00100002 	.word	0x00100002
 80035e4:	ffff0000 	.word	0xffff0000

080035e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d006      	beq.n	8003612 <I2C_MasterRequestWrite+0x2a>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d003      	beq.n	8003612 <I2C_MasterRequestWrite+0x2a>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003610:	d108      	bne.n	8003624 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e00b      	b.n	800363c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b12      	cmp	r3, #18
 800362a:	d107      	bne.n	800363c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800363a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f91d 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00d      	beq.n	8003670 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003662:	d103      	bne.n	800366c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e035      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003678:	d108      	bne.n	800368c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800367a:	897b      	ldrh	r3, [r7, #10]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	e01b      	b.n	80036c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	11db      	asrs	r3, r3, #7
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0306 	and.w	r3, r3, #6
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f063 030f 	orn	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	490e      	ldr	r1, [pc, #56]	@ (80036e4 <I2C_MasterRequestWrite+0xfc>)
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f966 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e010      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036ba:	897b      	ldrh	r3, [r7, #10]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4907      	ldr	r1, [pc, #28]	@ (80036e8 <I2C_MasterRequestWrite+0x100>)
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f956 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	00010008 	.word	0x00010008
 80036e8:	00010002 	.word	0x00010002

080036ec <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003710:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d006      	beq.n	8003726 <I2C_MasterRequestRead+0x3a>
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d003      	beq.n	8003726 <I2C_MasterRequestRead+0x3a>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003724:	d108      	bne.n	8003738 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e00b      	b.n	8003750 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373c:	2b11      	cmp	r3, #17
 800373e:	d107      	bne.n	8003750 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f893 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	d103      	bne.n	8003780 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e079      	b.n	8003878 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378c:	d108      	bne.n	80037a0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	e05f      	b.n	8003860 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a0:	897b      	ldrh	r3, [r7, #10]
 80037a2:	11db      	asrs	r3, r3, #7
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	f003 0306 	and.w	r3, r3, #6
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f063 030f 	orn	r3, r3, #15
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	4930      	ldr	r1, [pc, #192]	@ (8003880 <I2C_MasterRequestRead+0x194>)
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 f8dc 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e054      	b.n	8003878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	4929      	ldr	r1, [pc, #164]	@ (8003884 <I2C_MasterRequestRead+0x198>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f8cc 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e044      	b.n	8003878 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003812:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f831 	bl	8003888 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00d      	beq.n	8003848 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383a:	d103      	bne.n	8003844 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003842:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e017      	b.n	8003878 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	11db      	asrs	r3, r3, #7
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0306 	and.w	r3, r3, #6
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f063 030e 	orn	r3, r3, #14
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4907      	ldr	r1, [pc, #28]	@ (8003884 <I2C_MasterRequestRead+0x198>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f888 	bl	800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	00010008 	.word	0x00010008
 8003884:	00010002 	.word	0x00010002

08003888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003898:	e048      	b.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d044      	beq.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a2:	f7fe fe63 	bl	800256c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d302      	bcc.n	80038b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d139      	bne.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d10d      	bne.n	80038de <I2C_WaitOnFlagUntilTimeout+0x56>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	43da      	mvns	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4013      	ands	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	461a      	mov	r2, r3
 80038dc:	e00c      	b.n	80038f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d116      	bne.n	800392c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f043 0220 	orr.w	r2, r3, #32
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e023      	b.n	8003974 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	0c1b      	lsrs	r3, r3, #16
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10d      	bne.n	8003952 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	e00c      	b.n	800396c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	429a      	cmp	r2, r3
 8003970:	d093      	beq.n	800389a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800398a:	e071      	b.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399a:	d123      	bne.n	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0204 	orr.w	r2, r3, #4
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e067      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ea:	d041      	beq.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fe fdbe 	bl	800256c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d136      	bne.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10c      	bne.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4013      	ands	r3, r2
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf14      	ite	ne
 8003a1e:	2301      	movne	r3, #1
 8003a20:	2300      	moveq	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e00b      	b.n	8003a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	43da      	mvns	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	4013      	ands	r3, r2
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f043 0220 	orr.w	r2, r3, #32
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e021      	b.n	8003ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	0c1b      	lsrs	r3, r3, #16
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d10c      	bne.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	43da      	mvns	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e00b      	b.n	8003aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bf14      	ite	ne
 8003aa6:	2301      	movne	r3, #1
 8003aa8:	2300      	moveq	r3, #0
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f47f af6d 	bne.w	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac8:	e034      	b.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f8e3 	bl	8003c96 <I2C_IsAcknowledgeFailed>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e034      	b.n	8003b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ae0:	d028      	beq.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fe fd43 	bl	800256c <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d11d      	bne.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	d016      	beq.n	8003b34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3e:	2b80      	cmp	r3, #128	@ 0x80
 8003b40:	d1c3      	bne.n	8003aca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b58:	e034      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f89b 	bl	8003c96 <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e034      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b70:	d028      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fcfb 	bl	800256c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d016      	beq.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d1c3      	bne.n	8003b5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003be8:	e049      	b.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d119      	bne.n	8003c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e030      	b.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fe fc9e 	bl	800256c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4c:	2b40      	cmp	r3, #64	@ 0x40
 8003c4e:	d016      	beq.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e007      	b.n	8003c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d1ae      	bne.n	8003bea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cac:	d11b      	bne.n	8003ce6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	4a1f      	ldr	r2, [pc, #124]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d20:	f7fe fc24 	bl	800256c <HAL_GetTick>
 8003d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d26:	e009      	b.n	8003d3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d28:	f7fe fc20 	bl	800256c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d36:	d901      	bls.n	8003d3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e01f      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d3c:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d48:	d1ee      	bne.n	8003d28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d4a:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d50:	f7fe fc0c 	bl	800256c <HAL_GetTick>
 8003d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d56:	e009      	b.n	8003d6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d58:	f7fe fc08 	bl	800256c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d66:	d901      	bls.n	8003d6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e007      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d78:	d1ee      	bne.n	8003d58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	420e0040 	.word	0x420e0040
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	420e0044 	.word	0x420e0044

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0cc      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90c      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b65      	ldr	r3, [pc, #404]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d044      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b3f      	ldr	r3, [pc, #252]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3b      	ldr	r3, [pc, #236]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e067      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b37      	ldr	r3, [pc, #220]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4934      	ldr	r1, [pc, #208]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fe fb72 	bl	800256c <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fe fb6e 	bl	800256c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20c      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f887 	bl	800402c <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	@ (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe f89a 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	0800bf8c 	.word	0x0800bf8c
 8003f58:	20000054 	.word	0x20000054
 8003f5c:	20000058 	.word	0x20000058

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000054 	.word	0x20000054

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	@ (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	@ (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800bf9c 	.word	0x0800bf9c

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	@ (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	@ (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800bf9c 	.word	0x0800bf9c

08003fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 0203 	and.w	r2, r3, #3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_GetClockConfig+0x5c>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800400a:	4b07      	ldr	r3, [pc, #28]	@ (8004028 <HAL_RCC_GetClockConfig+0x60>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 020f 	and.w	r2, r3, #15
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	601a      	str	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	40023c00 	.word	0x40023c00

0800402c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b0ae      	sub	sp, #184	@ 0xb8
 8004032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004052:	4bcb      	ldr	r3, [pc, #812]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b0c      	cmp	r3, #12
 800405c:	f200 8206 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x440>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800409d 	.word	0x0800409d
 800406c:	0800446d 	.word	0x0800446d
 8004070:	0800446d 	.word	0x0800446d
 8004074:	0800446d 	.word	0x0800446d
 8004078:	080040a5 	.word	0x080040a5
 800407c:	0800446d 	.word	0x0800446d
 8004080:	0800446d 	.word	0x0800446d
 8004084:	0800446d 	.word	0x0800446d
 8004088:	080040ad 	.word	0x080040ad
 800408c:	0800446d 	.word	0x0800446d
 8004090:	0800446d 	.word	0x0800446d
 8004094:	0800446d 	.word	0x0800446d
 8004098:	0800429d 	.word	0x0800429d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800409c:	4bb9      	ldr	r3, [pc, #740]	@ (8004384 <HAL_RCC_GetSysClockFreq+0x358>)
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040a2:	e1e7      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004388 <HAL_RCC_GetSysClockFreq+0x35c>)
 80040a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80040aa:	e1e3      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ac:	4bb4      	ldr	r3, [pc, #720]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040b8:	4bb1      	ldr	r3, [pc, #708]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d071      	beq.n	80041a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c4:	4bae      	ldr	r3, [pc, #696]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80040d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80040ea:	4622      	mov	r2, r4
 80040ec:	462b      	mov	r3, r5
 80040ee:	f04f 0000 	mov.w	r0, #0
 80040f2:	f04f 0100 	mov.w	r1, #0
 80040f6:	0159      	lsls	r1, r3, #5
 80040f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fc:	0150      	lsls	r0, r2, #5
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4621      	mov	r1, r4
 8004104:	1a51      	subs	r1, r2, r1
 8004106:	6439      	str	r1, [r7, #64]	@ 0x40
 8004108:	4629      	mov	r1, r5
 800410a:	eb63 0301 	sbc.w	r3, r3, r1
 800410e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800411c:	4649      	mov	r1, r9
 800411e:	018b      	lsls	r3, r1, #6
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004126:	4641      	mov	r1, r8
 8004128:	018a      	lsls	r2, r1, #6
 800412a:	4641      	mov	r1, r8
 800412c:	1a51      	subs	r1, r2, r1
 800412e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004130:	4649      	mov	r1, r9
 8004132:	eb63 0301 	sbc.w	r3, r3, r1
 8004136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004144:	4649      	mov	r1, r9
 8004146:	00cb      	lsls	r3, r1, #3
 8004148:	4641      	mov	r1, r8
 800414a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414e:	4641      	mov	r1, r8
 8004150:	00ca      	lsls	r2, r1, #3
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	4603      	mov	r3, r0
 8004158:	4622      	mov	r2, r4
 800415a:	189b      	adds	r3, r3, r2
 800415c:	633b      	str	r3, [r7, #48]	@ 0x30
 800415e:	462b      	mov	r3, r5
 8004160:	460a      	mov	r2, r1
 8004162:	eb42 0303 	adc.w	r3, r2, r3
 8004166:	637b      	str	r3, [r7, #52]	@ 0x34
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004174:	4629      	mov	r1, r5
 8004176:	024b      	lsls	r3, r1, #9
 8004178:	4621      	mov	r1, r4
 800417a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800417e:	4621      	mov	r1, r4
 8004180:	024a      	lsls	r2, r1, #9
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800418a:	2200      	movs	r2, #0
 800418c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004190:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004194:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004198:	f7fc fd36 	bl	8000c08 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4613      	mov	r3, r2
 80041a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a6:	e067      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a8:	4b75      	ldr	r3, [pc, #468]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	099b      	lsrs	r3, r3, #6
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041b4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80041b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041c2:	2300      	movs	r3, #0
 80041c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	f04f 0000 	mov.w	r0, #0
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	0159      	lsls	r1, r3, #5
 80041d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041dc:	0150      	lsls	r0, r2, #5
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4621      	mov	r1, r4
 80041e4:	1a51      	subs	r1, r2, r1
 80041e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80041e8:	4629      	mov	r1, r5
 80041ea:	eb63 0301 	sbc.w	r3, r3, r1
 80041ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80041fc:	4649      	mov	r1, r9
 80041fe:	018b      	lsls	r3, r1, #6
 8004200:	4641      	mov	r1, r8
 8004202:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004206:	4641      	mov	r1, r8
 8004208:	018a      	lsls	r2, r1, #6
 800420a:	4641      	mov	r1, r8
 800420c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004210:	4649      	mov	r1, r9
 8004212:	eb63 0b01 	sbc.w	fp, r3, r1
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004222:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800422a:	4692      	mov	sl, r2
 800422c:	469b      	mov	fp, r3
 800422e:	4623      	mov	r3, r4
 8004230:	eb1a 0303 	adds.w	r3, sl, r3
 8004234:	623b      	str	r3, [r7, #32]
 8004236:	462b      	mov	r3, r5
 8004238:	eb4b 0303 	adc.w	r3, fp, r3
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800424a:	4629      	mov	r1, r5
 800424c:	028b      	lsls	r3, r1, #10
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004254:	4621      	mov	r1, r4
 8004256:	028a      	lsls	r2, r1, #10
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004260:	2200      	movs	r2, #0
 8004262:	673b      	str	r3, [r7, #112]	@ 0x70
 8004264:	677a      	str	r2, [r7, #116]	@ 0x74
 8004266:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800426a:	f7fc fccd 	bl	8000c08 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4613      	mov	r3, r2
 8004274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004278:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800428a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800428e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800429a:	e0eb      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800429c:	4b38      	ldr	r3, [pc, #224]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042a8:	4b35      	ldr	r3, [pc, #212]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d06b      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042b4:	4b32      	ldr	r3, [pc, #200]	@ (8004380 <HAL_RCC_GetSysClockFreq+0x354>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	099b      	lsrs	r3, r3, #6
 80042ba:	2200      	movs	r2, #0
 80042bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c8:	2300      	movs	r3, #0
 80042ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80042cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80042d0:	4622      	mov	r2, r4
 80042d2:	462b      	mov	r3, r5
 80042d4:	f04f 0000 	mov.w	r0, #0
 80042d8:	f04f 0100 	mov.w	r1, #0
 80042dc:	0159      	lsls	r1, r3, #5
 80042de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042e2:	0150      	lsls	r0, r2, #5
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4621      	mov	r1, r4
 80042ea:	1a51      	subs	r1, r2, r1
 80042ec:	61b9      	str	r1, [r7, #24]
 80042ee:	4629      	mov	r1, r5
 80042f0:	eb63 0301 	sbc.w	r3, r3, r1
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004302:	4659      	mov	r1, fp
 8004304:	018b      	lsls	r3, r1, #6
 8004306:	4651      	mov	r1, sl
 8004308:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800430c:	4651      	mov	r1, sl
 800430e:	018a      	lsls	r2, r1, #6
 8004310:	4651      	mov	r1, sl
 8004312:	ebb2 0801 	subs.w	r8, r2, r1
 8004316:	4659      	mov	r1, fp
 8004318:	eb63 0901 	sbc.w	r9, r3, r1
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004328:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800432c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004330:	4690      	mov	r8, r2
 8004332:	4699      	mov	r9, r3
 8004334:	4623      	mov	r3, r4
 8004336:	eb18 0303 	adds.w	r3, r8, r3
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	462b      	mov	r3, r5
 800433e:	eb49 0303 	adc.w	r3, r9, r3
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004350:	4629      	mov	r1, r5
 8004352:	024b      	lsls	r3, r1, #9
 8004354:	4621      	mov	r1, r4
 8004356:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800435a:	4621      	mov	r1, r4
 800435c:	024a      	lsls	r2, r1, #9
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004366:	2200      	movs	r2, #0
 8004368:	65bb      	str	r3, [r7, #88]	@ 0x58
 800436a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800436c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004370:	f7fc fc4a 	bl	8000c08 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800437e:	e065      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x420>
 8004380:	40023800 	.word	0x40023800
 8004384:	00f42400 	.word	0x00f42400
 8004388:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4b3d      	ldr	r3, [pc, #244]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x458>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	2200      	movs	r2, #0
 8004394:	4618      	mov	r0, r3
 8004396:	4611      	mov	r1, r2
 8004398:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800439c:	653b      	str	r3, [r7, #80]	@ 0x50
 800439e:	2300      	movs	r3, #0
 80043a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80043a6:	4642      	mov	r2, r8
 80043a8:	464b      	mov	r3, r9
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	0159      	lsls	r1, r3, #5
 80043b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b8:	0150      	lsls	r0, r2, #5
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4641      	mov	r1, r8
 80043c0:	1a51      	subs	r1, r2, r1
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	4649      	mov	r1, r9
 80043c6:	eb63 0301 	sbc.w	r3, r3, r1
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80043d8:	4659      	mov	r1, fp
 80043da:	018b      	lsls	r3, r1, #6
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e2:	4651      	mov	r1, sl
 80043e4:	018a      	lsls	r2, r1, #6
 80043e6:	4651      	mov	r1, sl
 80043e8:	1a54      	subs	r4, r2, r1
 80043ea:	4659      	mov	r1, fp
 80043ec:	eb63 0501 	sbc.w	r5, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	00eb      	lsls	r3, r5, #3
 80043fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fe:	00e2      	lsls	r2, r4, #3
 8004400:	4614      	mov	r4, r2
 8004402:	461d      	mov	r5, r3
 8004404:	4643      	mov	r3, r8
 8004406:	18e3      	adds	r3, r4, r3
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	464b      	mov	r3, r9
 800440c:	eb45 0303 	adc.w	r3, r5, r3
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441e:	4629      	mov	r1, r5
 8004420:	028b      	lsls	r3, r1, #10
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004428:	4621      	mov	r1, r4
 800442a:	028a      	lsls	r2, r1, #10
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004434:	2200      	movs	r2, #0
 8004436:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004438:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800443a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800443e:	f7fc fbe3 	bl	8000c08 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4613      	mov	r3, r2
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800444c:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x458>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0f1b      	lsrs	r3, r3, #28
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800445a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800445e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800446a:	e003      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x45c>)
 800446e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004478:	4618      	mov	r0, r3
 800447a:	37b8      	adds	r7, #184	@ 0xb8
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400

0800448c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e28d      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8083 	beq.w	80045b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044ac:	4b94      	ldr	r3, [pc, #592]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d019      	beq.n	80044ec <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044b8:	4b91      	ldr	r3, [pc, #580]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
        || \
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d0:	d00c      	beq.n	80044ec <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d2:	4b8b      	ldr	r3, [pc, #556]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044ea:	d10b      	bne.n	8004504 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	4b84      	ldr	r3, [pc, #528]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05b      	beq.n	80045b0 <HAL_RCC_OscConfig+0x124>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d157      	bne.n	80045b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e25a      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450c:	d106      	bne.n	800451c <HAL_RCC_OscConfig+0x90>
 800450e:	4b7c      	ldr	r3, [pc, #496]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a7b      	ldr	r2, [pc, #492]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e01d      	b.n	8004558 <HAL_RCC_OscConfig+0xcc>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0xb4>
 8004526:	4b76      	ldr	r3, [pc, #472]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 800452c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b73      	ldr	r3, [pc, #460]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a72      	ldr	r2, [pc, #456]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e00b      	b.n	8004558 <HAL_RCC_OscConfig+0xcc>
 8004540:	4b6f      	ldr	r3, [pc, #444]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a6e      	ldr	r2, [pc, #440]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	4b6c      	ldr	r3, [pc, #432]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a6b      	ldr	r2, [pc, #428]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe f804 	bl	800256c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe f800 	bl	800256c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e21f      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0f0      	beq.n	8004568 <HAL_RCC_OscConfig+0xdc>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fff0 	bl	800256c <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004590:	f7fd ffec 	bl	800256c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b64      	cmp	r3, #100	@ 0x64
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e20b      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	4b57      	ldr	r3, [pc, #348]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x104>
 80045ae:	e000      	b.n	80045b2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d06f      	beq.n	800469e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80045be:	4b50      	ldr	r3, [pc, #320]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d017      	beq.n	80045fa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
        || \
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b44      	ldr	r3, [pc, #272]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b41      	ldr	r3, [pc, #260]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x186>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1d3      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b3b      	ldr	r3, [pc, #236]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4937      	ldr	r1, [pc, #220]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <HAL_RCC_OscConfig+0x278>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fd ff99 	bl	800256c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fd ff95 	bl	800256c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1b4      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b28      	ldr	r3, [pc, #160]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4925      	ldr	r1, [pc, #148]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <HAL_RCC_OscConfig+0x278>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd ff78 	bl	800256c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004680:	f7fd ff74 	bl	800256c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e193      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d036      	beq.n	8004718 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <HAL_RCC_OscConfig+0x27c>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd ff58 	bl	800256c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fd ff54 	bl	800256c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e173      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_RCC_OscConfig+0x274>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x234>
 80046de:	e01b      	b.n	8004718 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_RCC_OscConfig+0x27c>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fd ff41 	bl	800256c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	e00e      	b.n	800470c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fd ff3d 	bl	800256c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d907      	bls.n	800470c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e15c      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
 8004700:	40023800 	.word	0x40023800
 8004704:	42470000 	.word	0x42470000
 8004708:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b8a      	ldr	r3, [pc, #552]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ea      	bne.n	80046ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8097 	beq.w	8004854 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b83      	ldr	r3, [pc, #524]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b7f      	ldr	r3, [pc, #508]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	4a7e      	ldr	r2, [pc, #504]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	@ 0x40
 8004746:	4b7c      	ldr	r3, [pc, #496]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b79      	ldr	r3, [pc, #484]	@ (800493c <HAL_RCC_OscConfig+0x4b0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b76      	ldr	r3, [pc, #472]	@ (800493c <HAL_RCC_OscConfig+0x4b0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a75      	ldr	r2, [pc, #468]	@ (800493c <HAL_RCC_OscConfig+0x4b0>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fd fefd 	bl	800256c <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fd fef9 	bl	800256c <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e118      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b6c      	ldr	r3, [pc, #432]	@ (800493c <HAL_RCC_OscConfig+0x4b0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x31e>
 800479c:	4b66      	ldr	r3, [pc, #408]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a65      	ldr	r2, [pc, #404]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x358>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x340>
 80047b2:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a60      	ldr	r2, [pc, #384]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	4b5e      	ldr	r3, [pc, #376]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a5d      	ldr	r2, [pc, #372]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0x358>
 80047cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a59      	ldr	r2, [pc, #356]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d8:	4b57      	ldr	r3, [pc, #348]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	4a56      	ldr	r2, [pc, #344]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fd febe 	bl	800256c <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fd feba 	bl	800256c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0d7      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	4b4b      	ldr	r3, [pc, #300]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <HAL_RCC_OscConfig+0x368>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fea8 	bl	800256c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fd fea4 	bl	800256c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0c1      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	4b40      	ldr	r3, [pc, #256]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b3b      	ldr	r3, [pc, #236]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	4a3a      	ldr	r2, [pc, #232]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80ad 	beq.w	80049b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485e:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b08      	cmp	r3, #8
 8004868:	d060      	beq.n	800492c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d145      	bne.n	80048fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b33      	ldr	r3, [pc, #204]	@ (8004940 <HAL_RCC_OscConfig+0x4b4>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fd fe78 	bl	800256c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fd fe74 	bl	800256c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e093      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	491b      	ldr	r1, [pc, #108]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_RCC_OscConfig+0x4b4>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd fe49 	bl	800256c <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd fe45 	bl	800256c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e064      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x452>
 80048fc:	e05c      	b.n	80049b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b10      	ldr	r3, [pc, #64]	@ (8004940 <HAL_RCC_OscConfig+0x4b4>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fe32 	bl	800256c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fe2e 	bl	800256c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e04d      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_RCC_OscConfig+0x4ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x480>
 800492a:	e045      	b.n	80049b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e040      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004944:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <HAL_RCC_OscConfig+0x538>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d030      	beq.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d129      	bne.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d122      	bne.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800497a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	4293      	cmp	r3, r2
 800497e:	d119      	bne.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	3b01      	subs	r3, #1
 800498e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d10f      	bne.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800

080049c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e041      	b.n	8004a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f839 	bl	8004a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 faf4 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04e      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	@ (8004b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004abe:	d01d      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	@ (8004b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d010      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1e:	e007      	b.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	40001800 	.word	0x40001800

08004b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e097      	b.n	8004ca0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7fd f9e5 	bl	8001f54 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ba0:	f023 0307 	bic.w	r3, r3, #7
 8004ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fa1f 	bl	8004ff4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004bfc:	f023 030c 	bic.w	r3, r3, #12
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	011a      	lsls	r2, r3, #4
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	031b      	lsls	r3, r3, #12
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d102      	bne.n	8004ce4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cde:	7b7b      	ldrb	r3, [r7, #13]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e069      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf8:	e031      	b.n	8004d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d110      	bne.n	8004d22 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d06:	7b3b      	ldrb	r3, [r7, #12]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e055      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d20:	e01d      	b.n	8004d5e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d108      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d28:	7bbb      	ldrb	r3, [r7, #14]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d105      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d2e:	7b7b      	ldrb	r3, [r7, #13]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d102      	bne.n	8004d3a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d34:	7b3b      	ldrb	r3, [r7, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d001      	beq.n	8004d3e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03e      	b.n	8004dbc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_Encoder_Start+0xc4>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d008      	beq.n	8004d7c <HAL_TIM_Encoder_Start+0xd4>
 8004d6a:	e00f      	b.n	8004d8c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2201      	movs	r2, #1
 8004d72:	2100      	movs	r1, #0
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9e3 	bl	8005140 <TIM_CCxChannelCmd>
      break;
 8004d7a:	e016      	b.n	8004daa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2201      	movs	r2, #1
 8004d82:	2104      	movs	r1, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f9db 	bl	8005140 <TIM_CCxChannelCmd>
      break;
 8004d8a:	e00e      	b.n	8004daa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2201      	movs	r2, #1
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f9d3 	bl	8005140 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2104      	movs	r1, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f9cc 	bl	8005140 <TIM_CCxChannelCmd>
      break;
 8004da8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d020      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01b      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0202 	mvn.w	r2, #2
 8004df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f8d2 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e005      	b.n	8004e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f8c4 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f8d5 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d020      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0204 	mvn.w	r2, #4
 8004e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f8ac 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004e60:	e005      	b.n	8004e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f89e 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8af 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0208 	mvn.w	r2, #8
 8004e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f886 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004eac:	e005      	b.n	8004eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f878 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f889 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d020      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0210 	mvn.w	r2, #16
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f860 	bl	8004fb8 <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f852 	bl	8004fa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f863 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0201 	mvn.w	r2, #1
 8004f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fc0a 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00c      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9a2 	bl	8005298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00c      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f834 	bl	8004fe0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00c      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f06f 0220 	mvn.w	r2, #32
 8004f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f974 	bl	8005284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a43      	ldr	r2, [pc, #268]	@ (8005114 <TIM_Base_SetConfig+0x120>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d013      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005012:	d00f      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a40      	ldr	r2, [pc, #256]	@ (8005118 <TIM_Base_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <TIM_Base_SetConfig+0x128>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a3e      	ldr	r2, [pc, #248]	@ (8005120 <TIM_Base_SetConfig+0x12c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3d      	ldr	r2, [pc, #244]	@ (8005124 <TIM_Base_SetConfig+0x130>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d108      	bne.n	8005046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800503a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <TIM_Base_SetConfig+0x120>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d02b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005054:	d027      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <TIM_Base_SetConfig+0x124>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d023      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2e      	ldr	r2, [pc, #184]	@ (800511c <TIM_Base_SetConfig+0x128>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d01f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2d      	ldr	r2, [pc, #180]	@ (8005120 <TIM_Base_SetConfig+0x12c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2c      	ldr	r2, [pc, #176]	@ (8005124 <TIM_Base_SetConfig+0x130>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d017      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2b      	ldr	r2, [pc, #172]	@ (8005128 <TIM_Base_SetConfig+0x134>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2a      	ldr	r2, [pc, #168]	@ (800512c <TIM_Base_SetConfig+0x138>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00f      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a29      	ldr	r2, [pc, #164]	@ (8005130 <TIM_Base_SetConfig+0x13c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a28      	ldr	r2, [pc, #160]	@ (8005134 <TIM_Base_SetConfig+0x140>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a27      	ldr	r2, [pc, #156]	@ (8005138 <TIM_Base_SetConfig+0x144>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a26      	ldr	r2, [pc, #152]	@ (800513c <TIM_Base_SetConfig+0x148>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d108      	bne.n	80050b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <TIM_Base_SetConfig+0x120>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0xf2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a10      	ldr	r2, [pc, #64]	@ (8005124 <TIM_Base_SetConfig+0x130>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d103      	bne.n	80050ee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f043 0204 	orr.w	r2, r3, #4
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010000 	.word	0x40010000
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40010400 	.word	0x40010400
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800
 8005134:	40001800 	.word	0x40001800
 8005138:	40001c00 	.word	0x40001c00
 800513c:	40002000 	.word	0x40002000

08005140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	2201      	movs	r2, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	fa01 f303 	lsl.w	r3, r1, r3
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e05a      	b.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a21      	ldr	r2, [pc, #132]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d022      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d01d      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d018      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1a      	ldr	r2, [pc, #104]	@ (8005274 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d00e      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d009      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10c      	bne.n	8005248 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	4313      	orrs	r3, r2
 800523e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40010000 	.word	0x40010000
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40010400 	.word	0x40010400
 800527c:	40014000 	.word	0x40014000
 8005280:	40001800 	.word	0x40001800

08005284 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e042      	b.n	8005344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fe86 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	@ 0x24
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f973 	bl	80055dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68da      	ldr	r2, [r3, #12]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	@ 0x28
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	4613      	mov	r3, r2
 800535a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d175      	bne.n	8005458 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Transmit+0x2c>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e06e      	b.n	800545a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2221      	movs	r2, #33	@ 0x21
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538a:	f7fd f8ef 	bl	800256c <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a4:	d108      	bne.n	80053b8 <HAL_UART_Transmit+0x6c>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e003      	b.n	80053c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053c0:	e02e      	b.n	8005420 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2200      	movs	r2, #0
 80053ca:	2180      	movs	r1, #128	@ 0x80
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f848 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e03a      	b.n	800545a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	3302      	adds	r3, #2
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e007      	b.n	8005412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1cb      	bne.n	80053c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f814 	bl	8005462 <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	e03b      	b.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547a:	d037      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fd f876 	bl	800256c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	6a3a      	ldr	r2, [r7, #32]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <UART_WaitOnFlagUntilTimeout+0x30>
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e03a      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d023      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b80      	cmp	r3, #128	@ 0x80
 80054a8:	d020      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d01d      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0308 	and.w	r3, r3, #8
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d116      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f81d 	bl	8005514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2208      	movs	r2, #8
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e00f      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d0b4      	beq.n	8005474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b095      	sub	sp, #84	@ 0x54
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	330c      	adds	r3, #12
 800553a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800553c:	643a      	str	r2, [r7, #64]	@ 0x40
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005542:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e5      	bne.n	800551c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3314      	adds	r3, #20
 800556e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	d119      	bne.n	80055c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60bb      	str	r3, [r7, #8]
   return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ac:	61ba      	str	r2, [r7, #24]
 80055ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80055ce:	bf00      	nop
 80055d0:	3754      	adds	r7, #84	@ 0x54
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055e0:	b0c0      	sub	sp, #256	@ 0x100
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	ea40 0301 	orr.w	r3, r0, r1
 8005604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	431a      	orrs	r2, r3
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	431a      	orrs	r2, r3
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005634:	f021 010c 	bic.w	r1, r1, #12
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005642:	430b      	orrs	r3, r1
 8005644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	6999      	ldr	r1, [r3, #24]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	ea40 0301 	orr.w	r3, r0, r1
 8005662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b8f      	ldr	r3, [pc, #572]	@ (80058a8 <UART_SetConfig+0x2cc>)
 800566c:	429a      	cmp	r2, r3
 800566e:	d005      	beq.n	800567c <UART_SetConfig+0xa0>
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <UART_SetConfig+0x2d0>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d104      	bne.n	8005686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fe fc90 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8005680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005684:	e003      	b.n	800568e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005686:	f7fe fc77 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 800568a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005698:	f040 810c 	bne.w	80058b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800569c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056b6:	415b      	adcs	r3, r3
 80056b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056be:	4621      	mov	r1, r4
 80056c0:	eb12 0801 	adds.w	r8, r2, r1
 80056c4:	4629      	mov	r1, r5
 80056c6:	eb43 0901 	adc.w	r9, r3, r1
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056de:	4690      	mov	r8, r2
 80056e0:	4699      	mov	r9, r3
 80056e2:	4623      	mov	r3, r4
 80056e4:	eb18 0303 	adds.w	r3, r8, r3
 80056e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056ec:	462b      	mov	r3, r5
 80056ee:	eb49 0303 	adc.w	r3, r9, r3
 80056f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800570a:	460b      	mov	r3, r1
 800570c:	18db      	adds	r3, r3, r3
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	4613      	mov	r3, r2
 8005712:	eb42 0303 	adc.w	r3, r2, r3
 8005716:	657b      	str	r3, [r7, #84]	@ 0x54
 8005718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800571c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005720:	f7fb fa72 	bl	8000c08 <__aeabi_uldivmod>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4b61      	ldr	r3, [pc, #388]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800572a:	fba3 2302 	umull	r2, r3, r3, r2
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	011c      	lsls	r4, r3, #4
 8005732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800573c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005744:	4642      	mov	r2, r8
 8005746:	464b      	mov	r3, r9
 8005748:	1891      	adds	r1, r2, r2
 800574a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800574c:	415b      	adcs	r3, r3
 800574e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005754:	4641      	mov	r1, r8
 8005756:	eb12 0a01 	adds.w	sl, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0b01 	adc.w	fp, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800576c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	4692      	mov	sl, r2
 8005776:	469b      	mov	fp, r3
 8005778:	4643      	mov	r3, r8
 800577a:	eb1a 0303 	adds.w	r3, sl, r3
 800577e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005782:	464b      	mov	r3, r9
 8005784:	eb4b 0303 	adc.w	r3, fp, r3
 8005788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800579c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057a0:	460b      	mov	r3, r1
 80057a2:	18db      	adds	r3, r3, r3
 80057a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a6:	4613      	mov	r3, r2
 80057a8:	eb42 0303 	adc.w	r3, r2, r3
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057b6:	f7fb fa27 	bl	8000c08 <__aeabi_uldivmod>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4611      	mov	r1, r2
 80057c0:	4b3b      	ldr	r3, [pc, #236]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057c2:	fba3 2301 	umull	r2, r3, r3, r1
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2264      	movs	r2, #100	@ 0x64
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	1acb      	subs	r3, r1, r3
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80057d6:	4b36      	ldr	r3, [pc, #216]	@ (80058b0 <UART_SetConfig+0x2d4>)
 80057d8:	fba3 2302 	umull	r2, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057e4:	441c      	add	r4, r3
 80057e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005800:	415b      	adcs	r3, r3
 8005802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005808:	4641      	mov	r1, r8
 800580a:	1851      	adds	r1, r2, r1
 800580c:	6339      	str	r1, [r7, #48]	@ 0x30
 800580e:	4649      	mov	r1, r9
 8005810:	414b      	adcs	r3, r1
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005820:	4659      	mov	r1, fp
 8005822:	00cb      	lsls	r3, r1, #3
 8005824:	4651      	mov	r1, sl
 8005826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582a:	4651      	mov	r1, sl
 800582c:	00ca      	lsls	r2, r1, #3
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	4603      	mov	r3, r0
 8005834:	4642      	mov	r2, r8
 8005836:	189b      	adds	r3, r3, r2
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583c:	464b      	mov	r3, r9
 800583e:	460a      	mov	r2, r1
 8005840:	eb42 0303 	adc.w	r3, r2, r3
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800586e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005872:	f7fb f9c9 	bl	8000c08 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <UART_SetConfig+0x2d4>)
 800587c:	fba3 1302 	umull	r1, r3, r3, r2
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	2164      	movs	r1, #100	@ 0x64
 8005884:	fb01 f303 	mul.w	r3, r1, r3
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	3332      	adds	r3, #50	@ 0x32
 800588e:	4a08      	ldr	r2, [pc, #32]	@ (80058b0 <UART_SetConfig+0x2d4>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	f003 0207 	and.w	r2, r3, #7
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4422      	add	r2, r4
 80058a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a4:	e106      	b.n	8005ab4 <UART_SetConfig+0x4d8>
 80058a6:	bf00      	nop
 80058a8:	40011000 	.word	0x40011000
 80058ac:	40011400 	.word	0x40011400
 80058b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	1891      	adds	r1, r2, r2
 80058cc:	6239      	str	r1, [r7, #32]
 80058ce:	415b      	adcs	r3, r3
 80058d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058d6:	4641      	mov	r1, r8
 80058d8:	1854      	adds	r4, r2, r1
 80058da:	4649      	mov	r1, r9
 80058dc:	eb43 0501 	adc.w	r5, r3, r1
 80058e0:	f04f 0200 	mov.w	r2, #0
 80058e4:	f04f 0300 	mov.w	r3, #0
 80058e8:	00eb      	lsls	r3, r5, #3
 80058ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ee:	00e2      	lsls	r2, r4, #3
 80058f0:	4614      	mov	r4, r2
 80058f2:	461d      	mov	r5, r3
 80058f4:	4643      	mov	r3, r8
 80058f6:	18e3      	adds	r3, r4, r3
 80058f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058fc:	464b      	mov	r3, r9
 80058fe:	eb45 0303 	adc.w	r3, r5, r3
 8005902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	f04f 0300 	mov.w	r3, #0
 800591e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005922:	4629      	mov	r1, r5
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	4621      	mov	r1, r4
 8005928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800592c:	4621      	mov	r1, r4
 800592e:	008a      	lsls	r2, r1, #2
 8005930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005934:	f7fb f968 	bl	8000c08 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4b60      	ldr	r3, [pc, #384]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 800593e:	fba3 2302 	umull	r2, r3, r3, r2
 8005942:	095b      	lsrs	r3, r3, #5
 8005944:	011c      	lsls	r4, r3, #4
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005958:	4642      	mov	r2, r8
 800595a:	464b      	mov	r3, r9
 800595c:	1891      	adds	r1, r2, r2
 800595e:	61b9      	str	r1, [r7, #24]
 8005960:	415b      	adcs	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005968:	4641      	mov	r1, r8
 800596a:	1851      	adds	r1, r2, r1
 800596c:	6139      	str	r1, [r7, #16]
 800596e:	4649      	mov	r1, r9
 8005970:	414b      	adcs	r3, r1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	f04f 0300 	mov.w	r3, #0
 800597c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005980:	4659      	mov	r1, fp
 8005982:	00cb      	lsls	r3, r1, #3
 8005984:	4651      	mov	r1, sl
 8005986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800598a:	4651      	mov	r1, sl
 800598c:	00ca      	lsls	r2, r1, #3
 800598e:	4610      	mov	r0, r2
 8005990:	4619      	mov	r1, r3
 8005992:	4603      	mov	r3, r0
 8005994:	4642      	mov	r2, r8
 8005996:	189b      	adds	r3, r3, r2
 8005998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800599c:	464b      	mov	r3, r9
 800599e:	460a      	mov	r2, r1
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059c0:	4649      	mov	r1, r9
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ca:	4641      	mov	r1, r8
 80059cc:	008a      	lsls	r2, r1, #2
 80059ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80059d2:	f7fb f919 	bl	8000c08 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b38      	ldr	r3, [pc, #224]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	@ 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	3332      	adds	r3, #50	@ 0x32
 80059f0:	4a33      	ldr	r2, [pc, #204]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059fc:	441c      	add	r4, r3
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	1891      	adds	r1, r2, r2
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	415b      	adcs	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	1851      	adds	r1, r2, r1
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	4649      	mov	r1, r9
 8005a24:	414b      	adcs	r3, r1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a34:	4659      	mov	r1, fp
 8005a36:	00cb      	lsls	r3, r1, #3
 8005a38:	4651      	mov	r1, sl
 8005a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a3e:	4651      	mov	r1, sl
 8005a40:	00ca      	lsls	r2, r1, #3
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	4642      	mov	r2, r8
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a4e:	464b      	mov	r3, r9
 8005a50:	460a      	mov	r2, r1
 8005a52:	eb42 0303 	adc.w	r3, r2, r3
 8005a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a70:	4649      	mov	r1, r9
 8005a72:	008b      	lsls	r3, r1, #2
 8005a74:	4641      	mov	r1, r8
 8005a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	008a      	lsls	r2, r1, #2
 8005a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a82:	f7fb f8c1 	bl	8000c08 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a90:	095b      	lsrs	r3, r3, #5
 8005a92:	2164      	movs	r1, #100	@ 0x64
 8005a94:	fb01 f303 	mul.w	r3, r1, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	3332      	adds	r3, #50	@ 0x32
 8005a9e:	4a08      	ldr	r2, [pc, #32]	@ (8005ac0 <UART_SetConfig+0x4e4>)
 8005aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	f003 020f 	and.w	r2, r3, #15
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4422      	add	r2, r4
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005aba:	46bd      	mov	sp, r7
 8005abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ac0:	51eb851f 	.word	0x51eb851f

08005ac4 <__NVIC_SetPriority>:
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	6039      	str	r1, [r7, #0]
 8005ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db0a      	blt.n	8005aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	490c      	ldr	r1, [pc, #48]	@ (8005b10 <__NVIC_SetPriority+0x4c>)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	0112      	lsls	r2, r2, #4
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005aec:	e00a      	b.n	8005b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4908      	ldr	r1, [pc, #32]	@ (8005b14 <__NVIC_SetPriority+0x50>)
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	3b04      	subs	r3, #4
 8005afc:	0112      	lsls	r2, r2, #4
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	440b      	add	r3, r1
 8005b02:	761a      	strb	r2, [r3, #24]
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	e000e100 	.word	0xe000e100
 8005b14:	e000ed00 	.word	0xe000ed00

08005b18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <SysTick_Handler+0x1c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b20:	f001 ff94 	bl	8007a4c <xTaskGetSchedulerState>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d001      	beq.n	8005b2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b2a:	f002 fd8d 	bl	8008648 <xPortSysTickHandler>
  }
}
 8005b2e:	bf00      	nop
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000e010 	.word	0xe000e010

08005b38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f06f 0004 	mvn.w	r0, #4
 8005b42:	f7ff ffbf 	bl	8005ac4 <__NVIC_SetPriority>
#endif
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b52:	f3ef 8305 	mrs	r3, IPSR
 8005b56:	603b      	str	r3, [r7, #0]
  return(result);
 8005b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005b5e:	f06f 0305 	mvn.w	r3, #5
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	e00c      	b.n	8005b80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b66:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <osKernelInitialize+0x44>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005b6e:	4b08      	ldr	r3, [pc, #32]	@ (8005b90 <osKernelInitialize+0x44>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	e002      	b.n	8005b80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b80:	687b      	ldr	r3, [r7, #4]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	200003dc 	.word	0x200003dc

08005b94 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8005b9a:	f001 ff57 	bl	8007a4c <xTaskGetSchedulerState>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <osKernelGetState+0x1a>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d105      	bne.n	8005bb4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	607b      	str	r3, [r7, #4]
      break;
 8005bac:	e00c      	b.n	8005bc8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	607b      	str	r3, [r7, #4]
      break;
 8005bb2:	e009      	b.n	8005bc8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8005bb4:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <osKernelGetState+0x40>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d102      	bne.n	8005bc2 <osKernelGetState+0x2e>
        state = osKernelReady;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8005bc0:	e001      	b.n	8005bc6 <osKernelGetState+0x32>
        state = osKernelInactive;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
      break;
 8005bc6:	bf00      	nop
  }

  return (state);
 8005bc8:	687b      	ldr	r3, [r7, #4]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	200003dc 	.word	0x200003dc

08005bd8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bde:	f3ef 8305 	mrs	r3, IPSR
 8005be2:	603b      	str	r3, [r7, #0]
  return(result);
 8005be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bea:	f06f 0305 	mvn.w	r3, #5
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	e010      	b.n	8005c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <osKernelStart+0x48>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d109      	bne.n	8005c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005bfa:	f7ff ff9d 	bl	8005b38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005bfe:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <osKernelStart+0x48>)
 8005c00:	2202      	movs	r2, #2
 8005c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c04:	f001 faac 	bl	8007160 <vTaskStartScheduler>
      stat = osOK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	e002      	b.n	8005c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c14:	687b      	ldr	r3, [r7, #4]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200003dc 	.word	0x200003dc

08005c24 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2a:	f3ef 8305 	mrs	r3, IPSR
 8005c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c30:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005c36:	f001 fbbf 	bl	80073b8 <xTaskGetTickCountFromISR>
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	e002      	b.n	8005c44 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005c3e:	f001 fbab 	bl	8007398 <xTaskGetTickCount>
 8005c42:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005c44:	687b      	ldr	r3, [r7, #4]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b08e      	sub	sp, #56	@ 0x38
 8005c52:	af04      	add	r7, sp, #16
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5e:	f3ef 8305 	mrs	r3, IPSR
 8005c62:	617b      	str	r3, [r7, #20]
  return(result);
 8005c64:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d17e      	bne.n	8005d68 <osThreadNew+0x11a>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d07b      	beq.n	8005d68 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c70:	2380      	movs	r3, #128	@ 0x80
 8005c72:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c74:	2318      	movs	r3, #24
 8005c76:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d045      	beq.n	8005d14 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <osThreadNew+0x48>
        name = attr->name;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <osThreadNew+0x6e>
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2b38      	cmp	r3, #56	@ 0x38
 8005cae:	d805      	bhi.n	8005cbc <osThreadNew+0x6e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <osThreadNew+0x72>
        return (NULL);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e054      	b.n	8005d6a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00e      	beq.n	8005cf6 <osThreadNew+0xa8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2bb7      	cmp	r3, #183	@ 0xb7
 8005cde:	d90a      	bls.n	8005cf6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d006      	beq.n	8005cf6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osThreadNew+0xa8>
        mem = 1;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	61bb      	str	r3, [r7, #24]
 8005cf4:	e010      	b.n	8005d18 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10c      	bne.n	8005d18 <osThreadNew+0xca>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <osThreadNew+0xca>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <osThreadNew+0xca>
          mem = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e001      	b.n	8005d18 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d110      	bne.n	8005d40 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d26:	9202      	str	r2, [sp, #8]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f001 f81f 	bl	8006d78 <xTaskCreateStatic>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e013      	b.n	8005d68 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d110      	bne.n	8005d68 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	f107 0310 	add.w	r3, r7, #16
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f001 f86d 	bl	8006e38 <xTaskCreate>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <osThreadNew+0x11a>
            hTask = NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d68:	693b      	ldr	r3, [r7, #16]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3728      	adds	r7, #40	@ 0x28
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7a:	f3ef 8305 	mrs	r3, IPSR
 8005d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <osDelay+0x1c>
    stat = osErrorISR;
 8005d86:	f06f 0305 	mvn.w	r3, #5
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e007      	b.n	8005d9e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 f9ab 	bl	80070f4 <vTaskDelay>
    }
  }

  return (stat);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	@ 0x28
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db8:	f3ef 8305 	mrs	r3, IPSR
 8005dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d15f      	bne.n	8005e84 <osMessageQueueNew+0xdc>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d05c      	beq.n	8005e84 <osMessageQueueNew+0xdc>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d059      	beq.n	8005e84 <osMessageQueueNew+0xdc>
    mem = -1;
 8005dd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d029      	beq.n	8005e30 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d012      	beq.n	8005e0a <osMessageQueueNew+0x62>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	2b4f      	cmp	r3, #79	@ 0x4f
 8005dea:	d90e      	bls.n	8005e0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <osMessageQueueNew+0x62>
        mem = 1;
 8005e04:	2301      	movs	r3, #1
 8005e06:	61bb      	str	r3, [r7, #24]
 8005e08:	e014      	b.n	8005e34 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d110      	bne.n	8005e34 <osMessageQueueNew+0x8c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10c      	bne.n	8005e34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d108      	bne.n	8005e34 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <osMessageQueueNew+0x8c>
          mem = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e001      	b.n	8005e34 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10b      	bne.n	8005e52 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2100      	movs	r1, #0
 8005e44:	9100      	str	r1, [sp, #0]
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fa47 	bl	80062dc <xQueueGenericCreateStatic>
 8005e4e:	61f8      	str	r0, [r7, #28]
 8005e50:	e008      	b.n	8005e64 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d105      	bne.n	8005e64 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 faba 	bl	80063d6 <xQueueGenericCreate>
 8005e62:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00c      	beq.n	8005e84 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d003      	beq.n	8005e78 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e001      	b.n	8005e7c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	69f8      	ldr	r0, [r7, #28]
 8005e80:	f000 ff1c 	bl	8006cbc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e84:	69fb      	ldr	r3, [r7, #28]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
	...

08005e90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea8:	f3ef 8305 	mrs	r3, IPSR
 8005eac:	617b      	str	r3, [r7, #20]
  return(result);
 8005eae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d028      	beq.n	8005f06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <osMessageQueuePut+0x36>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <osMessageQueuePut+0x36>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005ec6:	f06f 0303 	mvn.w	r3, #3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e038      	b.n	8005f40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ed2:	f107 0210 	add.w	r2, r7, #16
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	69b8      	ldr	r0, [r7, #24]
 8005edc:	f000 fbdc 	bl	8006698 <xQueueGenericSendFromISR>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d003      	beq.n	8005eee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005ee6:	f06f 0302 	mvn.w	r3, #2
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	e028      	b.n	8005f40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d025      	beq.n	8005f40 <osMessageQueuePut+0xb0>
 8005ef4:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <osMessageQueuePut+0xbc>)
 8005ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	e01c      	b.n	8005f40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <osMessageQueuePut+0x82>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005f12:	f06f 0303 	mvn.w	r3, #3
 8005f16:	61fb      	str	r3, [r7, #28]
 8005f18:	e012      	b.n	8005f40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	69b8      	ldr	r0, [r7, #24]
 8005f22:	f000 fab7 	bl	8006494 <xQueueGenericSend>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d009      	beq.n	8005f40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005f32:	f06f 0301 	mvn.w	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e002      	b.n	8005f40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005f3a:	f06f 0302 	mvn.w	r3, #2
 8005f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f40:	69fb      	ldr	r3, [r7, #28]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f66:	f3ef 8305 	mrs	r3, IPSR
 8005f6a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d028      	beq.n	8005fc4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <osMessageQueueGet+0x34>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <osMessageQueueGet+0x34>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005f84:	f06f 0303 	mvn.w	r3, #3
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e037      	b.n	8005ffc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005f90:	f107 0310 	add.w	r3, r7, #16
 8005f94:	461a      	mov	r2, r3
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	69b8      	ldr	r0, [r7, #24]
 8005f9a:	f000 fcfd 	bl	8006998 <xQueueReceiveFromISR>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d003      	beq.n	8005fac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005fa4:	f06f 0302 	mvn.w	r3, #2
 8005fa8:	61fb      	str	r3, [r7, #28]
 8005faa:	e027      	b.n	8005ffc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d024      	beq.n	8005ffc <osMessageQueueGet+0xac>
 8005fb2:	4b15      	ldr	r3, [pc, #84]	@ (8006008 <osMessageQueueGet+0xb8>)
 8005fb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	e01b      	b.n	8005ffc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <osMessageQueueGet+0x80>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005fd0:	f06f 0303 	mvn.w	r3, #3
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e011      	b.n	8005ffc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	69b8      	ldr	r0, [r7, #24]
 8005fde:	f000 fbf9 	bl	80067d4 <xQueueReceive>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d009      	beq.n	8005ffc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005fee:	f06f 0301 	mvn.w	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	e002      	b.n	8005ffc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005ff6:	f06f 0302 	mvn.w	r3, #2
 8005ffa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005ffc:	69fb      	ldr	r3, [r7, #28]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3720      	adds	r7, #32
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <osMessageQueueGetMsgSize>:
  }

  return (capacity);
}

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e002      	b.n	800602a <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006028:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a07      	ldr	r2, [pc, #28]	@ (8006064 <vApplicationGetIdleTaskMemory+0x2c>)
 8006048:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4a06      	ldr	r2, [pc, #24]	@ (8006068 <vApplicationGetIdleTaskMemory+0x30>)
 800604e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2280      	movs	r2, #128	@ 0x80
 8006054:	601a      	str	r2, [r3, #0]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	200003e0 	.word	0x200003e0
 8006068:	20000498 	.word	0x20000498

0800606c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4a07      	ldr	r2, [pc, #28]	@ (8006098 <vApplicationGetTimerTaskMemory+0x2c>)
 800607c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <vApplicationGetTimerTaskMemory+0x30>)
 8006082:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800608a:	601a      	str	r2, [r3, #0]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000698 	.word	0x20000698
 800609c:	20000750 	.word	0x20000750

080060a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f103 0208 	add.w	r2, r3, #8
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f103 0208 	add.w	r2, r3, #8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f103 0208 	add.w	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060fa:	b480      	push	{r7}
 80060fc:	b085      	sub	sp, #20
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
 8006102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	601a      	str	r2, [r3, #0]
}
 8006136:	bf00      	nop
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006158:	d103      	bne.n	8006162 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e00c      	b.n	800617c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	3308      	adds	r3, #8
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e002      	b.n	8006170 <vListInsert+0x2e>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	d2f6      	bcs.n	800616a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6892      	ldr	r2, [r2, #8]
 80061ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6852      	ldr	r2, [r2, #4]
 80061d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d103      	bne.n	80061e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	1e5a      	subs	r2, r3, #1
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	e7fd      	b.n	8006230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006234:	f002 f978 	bl	8008528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	441a      	add	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006264:	3b01      	subs	r3, #1
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	441a      	add	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	22ff      	movs	r2, #255	@ 0xff
 8006278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	22ff      	movs	r2, #255	@ 0xff
 8006280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d114      	bne.n	80062b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01a      	beq.n	80062c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3310      	adds	r3, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f001 fa12 	bl	80076c0 <xTaskRemoveFromEventList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d012      	beq.n	80062c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <xQueueGenericReset+0xd0>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	e009      	b.n	80062c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3310      	adds	r3, #16
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fef1 	bl	80060a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3324      	adds	r3, #36	@ 0x24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff feec 	bl	80060a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062c8:	f002 f960 	bl	800858c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062cc:	2301      	movs	r3, #1
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	@ 0x38
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10b      	bne.n	8006308 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006302:	bf00      	nop
 8006304:	bf00      	nop
 8006306:	e7fd      	b.n	8006304 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10b      	bne.n	8006326 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	e7fd      	b.n	8006322 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <xQueueGenericCreateStatic+0x56>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <xQueueGenericCreateStatic+0x5a>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericCreateStatic+0x5c>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <xQueueGenericCreateStatic+0x84>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <xQueueGenericCreateStatic+0x88>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <xQueueGenericCreateStatic+0x8a>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61fb      	str	r3, [r7, #28]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006382:	2350      	movs	r3, #80	@ 0x50
 8006384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b50      	cmp	r3, #80	@ 0x50
 800638a:	d00b      	beq.n	80063a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800638c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006390:	f383 8811 	msr	BASEPRI, r3
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	61bb      	str	r3, [r7, #24]
}
 800639e:	bf00      	nop
 80063a0:	bf00      	nop
 80063a2:	e7fd      	b.n	80063a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80063a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f840 	bl	800644c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3730      	adds	r7, #48	@ 0x30
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b08a      	sub	sp, #40	@ 0x28
 80063da:	af02      	add	r7, sp, #8
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	4613      	mov	r3, r2
 80063e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <xQueueGenericCreate+0x2c>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	613b      	str	r3, [r7, #16]
}
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	3350      	adds	r3, #80	@ 0x50
 8006410:	4618      	mov	r0, r3
 8006412:	f002 f9ab 	bl	800876c <pvPortMalloc>
 8006416:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d011      	beq.n	8006442 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	3350      	adds	r3, #80	@ 0x50
 8006426:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006430:	79fa      	ldrb	r2, [r7, #7]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	4613      	mov	r3, r2
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f805 	bl	800644c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006442:	69bb      	ldr	r3, [r7, #24]
	}
 8006444:	4618      	mov	r0, r3
 8006446:	3720      	adds	r7, #32
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e002      	b.n	800646e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800647a:	2101      	movs	r1, #1
 800647c:	69b8      	ldr	r0, [r7, #24]
 800647e:	f7ff fec3 	bl	8006208 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08e      	sub	sp, #56	@ 0x38
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064a2:	2300      	movs	r3, #0
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10b      	bne.n	80064c8 <xQueueGenericSend+0x34>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSend+0x42>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0x46>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0x48>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <xQueueGenericSend+0x64>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064f2:	bf00      	nop
 80064f4:	bf00      	nop
 80064f6:	e7fd      	b.n	80064f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d103      	bne.n	8006506 <xQueueGenericSend+0x72>
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <xQueueGenericSend+0x76>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueGenericSend+0x78>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xQueueGenericSend+0x94>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	623b      	str	r3, [r7, #32]
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006528:	f001 fa90 	bl	8007a4c <xTaskGetSchedulerState>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <xQueueGenericSend+0xa4>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <xQueueGenericSend+0xa8>
 8006538:	2301      	movs	r3, #1
 800653a:	e000      	b.n	800653e <xQueueGenericSend+0xaa>
 800653c:	2300      	movs	r3, #0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10b      	bne.n	800655a <xQueueGenericSend+0xc6>
	__asm volatile
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	61fb      	str	r3, [r7, #28]
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop
 8006558:	e7fd      	b.n	8006556 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655a:	f001 ffe5 	bl	8008528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006566:	429a      	cmp	r2, r3
 8006568:	d302      	bcc.n	8006570 <xQueueGenericSend+0xdc>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d129      	bne.n	80065c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68b9      	ldr	r1, [r7, #8]
 8006574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006576:	f000 fa91 	bl	8006a9c <prvCopyDataToQueue>
 800657a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d010      	beq.n	80065a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	3324      	adds	r3, #36	@ 0x24
 8006588:	4618      	mov	r0, r3
 800658a:	f001 f899 	bl	80076c0 <xTaskRemoveFromEventList>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d013      	beq.n	80065bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006594:	4b3f      	ldr	r3, [pc, #252]	@ (8006694 <xQueueGenericSend+0x200>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	e00a      	b.n	80065bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065ac:	4b39      	ldr	r3, [pc, #228]	@ (8006694 <xQueueGenericSend+0x200>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065bc:	f001 ffe6 	bl	800858c <vPortExitCritical>
				return pdPASS;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e063      	b.n	800668c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ca:	f001 ffdf 	bl	800858c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e05c      	b.n	800668c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065d8:	f107 0314 	add.w	r3, r7, #20
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f8d3 	bl	8007788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065e2:	2301      	movs	r3, #1
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065e6:	f001 ffd1 	bl	800858c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065ea:	f000 fe29 	bl	8007240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ee:	f001 ff9b 	bl	8008528 <vPortEnterCritical>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065fe:	d103      	bne.n	8006608 <xQueueGenericSend+0x174>
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800660e:	b25b      	sxtb	r3, r3
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006614:	d103      	bne.n	800661e <xQueueGenericSend+0x18a>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800661e:	f001 ffb5 	bl	800858c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006622:	1d3a      	adds	r2, r7, #4
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4611      	mov	r1, r2
 800662a:	4618      	mov	r0, r3
 800662c:	f001 f8c2 	bl	80077b4 <xTaskCheckForTimeOut>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d124      	bne.n	8006680 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006636:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006638:	f000 fb28 	bl	8006c8c <prvIsQueueFull>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d018      	beq.n	8006674 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	3310      	adds	r3, #16
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	4611      	mov	r1, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f000 ffe6 	bl	800761c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006652:	f000 fab3 	bl	8006bbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006656:	f000 fe01 	bl	800725c <xTaskResumeAll>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	f47f af7c 	bne.w	800655a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006662:	4b0c      	ldr	r3, [pc, #48]	@ (8006694 <xQueueGenericSend+0x200>)
 8006664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	e772      	b.n	800655a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006676:	f000 faa1 	bl	8006bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667a:	f000 fdef 	bl	800725c <xTaskResumeAll>
 800667e:	e76c      	b.n	800655a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006682:	f000 fa9b 	bl	8006bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006686:	f000 fde9 	bl	800725c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800668a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800668c:	4618      	mov	r0, r3
 800668e:	3738      	adds	r7, #56	@ 0x38
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b090      	sub	sp, #64	@ 0x40
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSendFromISR+0x3e>
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <xQueueGenericSendFromISR+0x42>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSendFromISR+0x44>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d103      	bne.n	8006706 <xQueueGenericSendFromISR+0x6e>
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <xQueueGenericSendFromISR+0x72>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericSendFromISR+0x74>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	623b      	str	r3, [r7, #32]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006728:	f001 ffde 	bl	80086e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800672c:	f3ef 8211 	mrs	r2, BASEPRI
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	61fa      	str	r2, [r7, #28]
 8006742:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006744:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	429a      	cmp	r2, r3
 8006752:	d302      	bcc.n	800675a <xQueueGenericSendFromISR+0xc2>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d12f      	bne.n	80067ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800675a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006760:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006770:	f000 f994 	bl	8006a9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006774:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800677c:	d112      	bne.n	80067a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	3324      	adds	r3, #36	@ 0x24
 800678a:	4618      	mov	r0, r3
 800678c:	f000 ff98 	bl	80076c0 <xTaskRemoveFromEventList>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00b      	beq.n	80067b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e007      	b.n	80067b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067a8:	3301      	adds	r3, #1
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	b25a      	sxtb	r2, r3
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067b4:	2301      	movs	r3, #1
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80067b8:	e001      	b.n	80067be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3740      	adds	r7, #64	@ 0x40
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	@ 0x30
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <xQueueReceive+0x32>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	623b      	str	r3, [r7, #32]
}
 8006800:	bf00      	nop
 8006802:	bf00      	nop
 8006804:	e7fd      	b.n	8006802 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <xQueueReceive+0x40>
 800680c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <xQueueReceive+0x44>
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <xQueueReceive+0x46>
 8006818:	2300      	movs	r3, #0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10b      	bne.n	8006836 <xQueueReceive+0x62>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	61fb      	str	r3, [r7, #28]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006836:	f001 f909 	bl	8007a4c <xTaskGetSchedulerState>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <xQueueReceive+0x72>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <xQueueReceive+0x76>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueReceive+0x78>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xQueueReceive+0x94>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	61bb      	str	r3, [r7, #24]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006868:	f001 fe5e 	bl	8008528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01f      	beq.n	80068b8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006878:	68b9      	ldr	r1, [r7, #8]
 800687a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800687c:	f000 f978 	bl	8006b70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00f      	beq.n	80068b0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	3310      	adds	r3, #16
 8006894:	4618      	mov	r0, r3
 8006896:	f000 ff13 	bl	80076c0 <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006994 <xQueueReceive+0x1c0>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068b0:	f001 fe6c 	bl	800858c <vPortExitCritical>
				return pdPASS;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e069      	b.n	800698c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068be:	f001 fe65 	bl	800858c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e062      	b.n	800698c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068cc:	f107 0310 	add.w	r3, r7, #16
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 ff59 	bl	8007788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068d6:	2301      	movs	r3, #1
 80068d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068da:	f001 fe57 	bl	800858c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068de:	f000 fcaf 	bl	8007240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068e2:	f001 fe21 	bl	8008528 <vPortEnterCritical>
 80068e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068ec:	b25b      	sxtb	r3, r3
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068f2:	d103      	bne.n	80068fc <xQueueReceive+0x128>
 80068f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006902:	b25b      	sxtb	r3, r3
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006908:	d103      	bne.n	8006912 <xQueueReceive+0x13e>
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006912:	f001 fe3b 	bl	800858c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006916:	1d3a      	adds	r2, r7, #4
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	4611      	mov	r1, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 ff48 	bl	80077b4 <xTaskCheckForTimeOut>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d123      	bne.n	8006972 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800692a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800692c:	f000 f998 	bl	8006c60 <prvIsQueueEmpty>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d017      	beq.n	8006966 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	3324      	adds	r3, #36	@ 0x24
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4611      	mov	r1, r2
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fe6c 	bl	800761c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006946:	f000 f939 	bl	8006bbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800694a:	f000 fc87 	bl	800725c <xTaskResumeAll>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d189      	bne.n	8006868 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006954:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <xQueueReceive+0x1c0>)
 8006956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	e780      	b.n	8006868 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006968:	f000 f928 	bl	8006bbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800696c:	f000 fc76 	bl	800725c <xTaskResumeAll>
 8006970:	e77a      	b.n	8006868 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006974:	f000 f922 	bl	8006bbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006978:	f000 fc70 	bl	800725c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800697c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800697e:	f000 f96f 	bl	8006c60 <prvIsQueueEmpty>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	f43f af6f 	beq.w	8006868 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800698a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800698c:	4618      	mov	r0, r3
 800698e:	3730      	adds	r7, #48	@ 0x30
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	@ 0x38
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	623b      	str	r3, [r7, #32]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <xQueueReceiveFromISR+0x3c>
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <xQueueReceiveFromISR+0x40>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <xQueueReceiveFromISR+0x42>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61fb      	str	r3, [r7, #28]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f6:	f001 fe77 	bl	80086e8 <vPortValidateInterruptPriority>
	__asm volatile
 80069fa:	f3ef 8211 	mrs	r2, BASEPRI
 80069fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	61ba      	str	r2, [r7, #24]
 8006a10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006a12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02f      	beq.n	8006a82 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a30:	f000 f89e 	bl	8006b70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006a3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a44:	d112      	bne.n	8006a6c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	3310      	adds	r3, #16
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fe34 	bl	80076c0 <xTaskRemoveFromEventList>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e007      	b.n	8006a7c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a70:	3301      	adds	r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	b25a      	sxtb	r2, r3
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a80:	e001      	b.n	8006a86 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f383 8811 	msr	BASEPRI, r3
}
 8006a90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3738      	adds	r7, #56	@ 0x38
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10d      	bne.n	8006ad6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d14d      	bne.n	8006b5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ffde 	bl	8007a88 <xTaskPriorityDisinherit>
 8006acc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	e043      	b.n	8006b5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d119      	bne.n	8006b10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6858      	ldr	r0, [r3, #4]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	f002 ffc5 	bl	8009a76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af4:	441a      	add	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d32b      	bcc.n	8006b5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e026      	b.n	8006b5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68d8      	ldr	r0, [r3, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	f002 ffab 	bl	8009a76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	425b      	negs	r3, r3
 8006b2a:	441a      	add	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d207      	bcs.n	8006b4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	425b      	negs	r3, r3
 8006b46:	441a      	add	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d105      	bne.n	8006b5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d018      	beq.n	8006bb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8a:	441a      	add	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d303      	bcc.n	8006ba4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68d9      	ldr	r1, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	461a      	mov	r2, r3
 8006bae:	6838      	ldr	r0, [r7, #0]
 8006bb0:	f002 ff61 	bl	8009a76 <memcpy>
	}
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006bc4:	f001 fcb0 	bl	8008528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bd0:	e011      	b.n	8006bf6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d012      	beq.n	8006c00 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3324      	adds	r3, #36	@ 0x24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fd6e 	bl	80076c0 <xTaskRemoveFromEventList>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bea:	f000 fe47 	bl	800787c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	dce9      	bgt.n	8006bd2 <prvUnlockQueue+0x16>
 8006bfe:	e000      	b.n	8006c02 <prvUnlockQueue+0x46>
					break;
 8006c00:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	22ff      	movs	r2, #255	@ 0xff
 8006c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006c0a:	f001 fcbf 	bl	800858c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c0e:	f001 fc8b 	bl	8008528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c18:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c1a:	e011      	b.n	8006c40 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d012      	beq.n	8006c4a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3310      	adds	r3, #16
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fd49 	bl	80076c0 <xTaskRemoveFromEventList>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c34:	f000 fe22 	bl	800787c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c38:	7bbb      	ldrb	r3, [r7, #14]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dce9      	bgt.n	8006c1c <prvUnlockQueue+0x60>
 8006c48:	e000      	b.n	8006c4c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c4a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	22ff      	movs	r2, #255	@ 0xff
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006c54:	f001 fc9a 	bl	800858c <vPortExitCritical>
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c68:	f001 fc5e 	bl	8008528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d102      	bne.n	8006c7a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	e001      	b.n	8006c7e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c7e:	f001 fc85 	bl	800858c <vPortExitCritical>

	return xReturn;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c94:	f001 fc48 	bl	8008528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d102      	bne.n	8006caa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e001      	b.n	8006cae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cae:	f001 fc6d 	bl	800858c <vPortExitCritical>

	return xReturn;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e014      	b.n	8006cf6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8006d0c <vQueueAddToRegistry+0x50>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10b      	bne.n	8006cf0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006cd8:	490c      	ldr	r1, [pc, #48]	@ (8006d0c <vQueueAddToRegistry+0x50>)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8006d0c <vQueueAddToRegistry+0x50>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006cee:	e006      	b.n	8006cfe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b07      	cmp	r3, #7
 8006cfa:	d9e7      	bls.n	8006ccc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000b50 	.word	0x20000b50

08006d10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006d20:	f001 fc02 	bl	8008528 <vPortEnterCritical>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d30:	d103      	bne.n	8006d3a <vQueueWaitForMessageRestricted+0x2a>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d40:	b25b      	sxtb	r3, r3
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d46:	d103      	bne.n	8006d50 <vQueueWaitForMessageRestricted+0x40>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d50:	f001 fc1c 	bl	800858c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3324      	adds	r3, #36	@ 0x24
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	68b9      	ldr	r1, [r7, #8]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fc7f 	bl	8007668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d6a:	6978      	ldr	r0, [r7, #20]
 8006d6c:	f7ff ff26 	bl	8006bbc <prvUnlockQueue>
	}
 8006d70:	bf00      	nop
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08e      	sub	sp, #56	@ 0x38
 8006d7c:	af04      	add	r7, sp, #16
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	623b      	str	r3, [r7, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	61fb      	str	r3, [r7, #28]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dc2:	23b8      	movs	r3, #184	@ 0xb8
 8006dc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	2bb8      	cmp	r3, #184	@ 0xb8
 8006dca:	d00b      	beq.n	8006de4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	61bb      	str	r3, [r7, #24]
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006de4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <xTaskCreateStatic+0xb2>
 8006dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d01b      	beq.n	8006e2a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006dfa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e04:	2300      	movs	r3, #0
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	9302      	str	r3, [sp, #8]
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	68b9      	ldr	r1, [r7, #8]
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 f851 	bl	8006ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e24:	f000 f8f6 	bl	8007014 <prvAddNewTaskToReadyList>
 8006e28:	e001      	b.n	8006e2e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e2e:	697b      	ldr	r3, [r7, #20]
	}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3728      	adds	r7, #40	@ 0x28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	@ 0x30
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fc8d 	bl	800876c <pvPortMalloc>
 8006e52:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00e      	beq.n	8006e78 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e5a:	20b8      	movs	r0, #184	@ 0xb8
 8006e5c:	f001 fc86 	bl	800876c <pvPortMalloc>
 8006e60:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e6e:	e005      	b.n	8006e7c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f001 fd49 	bl	8008908 <vPortFree>
 8006e76:	e001      	b.n	8006e7c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d017      	beq.n	8006eb2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9303      	str	r3, [sp, #12]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	9302      	str	r3, [sp, #8]
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68b9      	ldr	r1, [r7, #8]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 f80f 	bl	8006ec4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ea6:	69f8      	ldr	r0, [r7, #28]
 8006ea8:	f000 f8b4 	bl	8007014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006eac:	2301      	movs	r3, #1
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e002      	b.n	8006eb8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eb6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eb8:	69bb      	ldr	r3, [r7, #24]
	}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3720      	adds	r7, #32
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	461a      	mov	r2, r3
 8006edc:	21a5      	movs	r1, #165	@ 0xa5
 8006ede:	f002 fced 	bl	80098bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006eec:	3b01      	subs	r3, #1
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f023 0307 	bic.w	r3, r3, #7
 8006efa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	617b      	str	r3, [r7, #20]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01f      	beq.n	8006f64 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e012      	b.n	8006f50 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	7819      	ldrb	r1, [r3, #0]
 8006f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	4413      	add	r3, r2
 8006f38:	3334      	adds	r3, #52	@ 0x34
 8006f3a:	460a      	mov	r2, r1
 8006f3c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b1f      	cmp	r3, #31
 8006f54:	d9e9      	bls.n	8006f2a <prvInitialiseNewTask+0x66>
 8006f56:	e000      	b.n	8006f5a <prvInitialiseNewTask+0x96>
			{
				break;
 8006f58:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006f62:	e003      	b.n	8006f6c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	2b37      	cmp	r3, #55	@ 0x37
 8006f70:	d901      	bls.n	8006f76 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f72:	2337      	movs	r3, #55	@ 0x37
 8006f74:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f80:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	2200      	movs	r2, #0
 8006f86:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff f8a7 	bl	80060e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	3318      	adds	r3, #24
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff f8a2 	bl	80060e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006faa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	3364      	adds	r3, #100	@ 0x64
 8006fc6:	224c      	movs	r2, #76	@ 0x4c
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f002 fc76 	bl	80098bc <memset>
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8007008 <prvInitialiseNewTask+0x144>)
 8006fd4:	669a      	str	r2, [r3, #104]	@ 0x68
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800700c <prvInitialiseNewTask+0x148>)
 8006fda:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	4a0c      	ldr	r2, [pc, #48]	@ (8007010 <prvInitialiseNewTask+0x14c>)
 8006fe0:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f001 f96c 	bl	80082c4 <pxPortInitialiseStack>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffe:	bf00      	nop
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20006244 	.word	0x20006244
 800700c:	200062ac 	.word	0x200062ac
 8007010:	20006314 	.word	0x20006314

08007014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800701c:	f001 fa84 	bl	8008528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007020:	4b2d      	ldr	r3, [pc, #180]	@ (80070d8 <prvAddNewTaskToReadyList+0xc4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3301      	adds	r3, #1
 8007026:	4a2c      	ldr	r2, [pc, #176]	@ (80070d8 <prvAddNewTaskToReadyList+0xc4>)
 8007028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800702a:	4b2c      	ldr	r3, [pc, #176]	@ (80070dc <prvAddNewTaskToReadyList+0xc8>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007032:	4a2a      	ldr	r2, [pc, #168]	@ (80070dc <prvAddNewTaskToReadyList+0xc8>)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007038:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <prvAddNewTaskToReadyList+0xc4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d110      	bne.n	8007062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007040:	f000 fc40 	bl	80078c4 <prvInitialiseTaskLists>
 8007044:	e00d      	b.n	8007062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007046:	4b26      	ldr	r3, [pc, #152]	@ (80070e0 <prvAddNewTaskToReadyList+0xcc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800704e:	4b23      	ldr	r3, [pc, #140]	@ (80070dc <prvAddNewTaskToReadyList+0xc8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	429a      	cmp	r2, r3
 800705a:	d802      	bhi.n	8007062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800705c:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <prvAddNewTaskToReadyList+0xc8>)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007062:	4b20      	ldr	r3, [pc, #128]	@ (80070e4 <prvAddNewTaskToReadyList+0xd0>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	4a1e      	ldr	r2, [pc, #120]	@ (80070e4 <prvAddNewTaskToReadyList+0xd0>)
 800706a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <prvAddNewTaskToReadyList+0xd0>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007078:	4b1b      	ldr	r3, [pc, #108]	@ (80070e8 <prvAddNewTaskToReadyList+0xd4>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d903      	bls.n	8007088 <prvAddNewTaskToReadyList+0x74>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007084:	4a18      	ldr	r2, [pc, #96]	@ (80070e8 <prvAddNewTaskToReadyList+0xd4>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4a15      	ldr	r2, [pc, #84]	@ (80070ec <prvAddNewTaskToReadyList+0xd8>)
 8007096:	441a      	add	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	4619      	mov	r1, r3
 800709e:	4610      	mov	r0, r2
 80070a0:	f7ff f82b 	bl	80060fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80070a4:	f001 fa72 	bl	800858c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80070a8:	4b0d      	ldr	r3, [pc, #52]	@ (80070e0 <prvAddNewTaskToReadyList+0xcc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00e      	beq.n	80070ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80070b0:	4b0a      	ldr	r3, [pc, #40]	@ (80070dc <prvAddNewTaskToReadyList+0xc8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d207      	bcs.n	80070ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <prvAddNewTaskToReadyList+0xdc>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ce:	bf00      	nop
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20001064 	.word	0x20001064
 80070dc:	20000b90 	.word	0x20000b90
 80070e0:	20001070 	.word	0x20001070
 80070e4:	20001080 	.word	0x20001080
 80070e8:	2000106c 	.word	0x2000106c
 80070ec:	20000b94 	.word	0x20000b94
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007106:	4b14      	ldr	r3, [pc, #80]	@ (8007158 <vTaskDelay+0x64>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00b      	beq.n	8007126 <vTaskDelay+0x32>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60bb      	str	r3, [r7, #8]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007126:	f000 f88b 	bl	8007240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800712a:	2100      	movs	r1, #0
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fd1b 	bl	8007b68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007132:	f000 f893 	bl	800725c <xTaskResumeAll>
 8007136:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800713e:	4b07      	ldr	r3, [pc, #28]	@ (800715c <vTaskDelay+0x68>)
 8007140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	2000108c 	.word	0x2000108c
 800715c:	e000ed04 	.word	0xe000ed04

08007160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	@ 0x28
 8007164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800716e:	463a      	mov	r2, r7
 8007170:	1d39      	adds	r1, r7, #4
 8007172:	f107 0308 	add.w	r3, r7, #8
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe ff5e 	bl	8006038 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	9202      	str	r2, [sp, #8]
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	2300      	movs	r3, #0
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	2300      	movs	r3, #0
 800718c:	460a      	mov	r2, r1
 800718e:	4924      	ldr	r1, [pc, #144]	@ (8007220 <vTaskStartScheduler+0xc0>)
 8007190:	4824      	ldr	r0, [pc, #144]	@ (8007224 <vTaskStartScheduler+0xc4>)
 8007192:	f7ff fdf1 	bl	8006d78 <xTaskCreateStatic>
 8007196:	4603      	mov	r3, r0
 8007198:	4a23      	ldr	r2, [pc, #140]	@ (8007228 <vTaskStartScheduler+0xc8>)
 800719a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800719c:	4b22      	ldr	r3, [pc, #136]	@ (8007228 <vTaskStartScheduler+0xc8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e001      	b.n	80071ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d102      	bne.n	80071ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80071b4:	f000 fd2c 	bl	8007c10 <xTimerCreateTimerTask>
 80071b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d11b      	bne.n	80071f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	613b      	str	r3, [r7, #16]
}
 80071d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071d4:	4b15      	ldr	r3, [pc, #84]	@ (800722c <vTaskStartScheduler+0xcc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3364      	adds	r3, #100	@ 0x64
 80071da:	4a15      	ldr	r2, [pc, #84]	@ (8007230 <vTaskStartScheduler+0xd0>)
 80071dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071de:	4b15      	ldr	r3, [pc, #84]	@ (8007234 <vTaskStartScheduler+0xd4>)
 80071e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071e6:	4b14      	ldr	r3, [pc, #80]	@ (8007238 <vTaskStartScheduler+0xd8>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071ec:	4b13      	ldr	r3, [pc, #76]	@ (800723c <vTaskStartScheduler+0xdc>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071f2:	f001 f8f5 	bl	80083e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071f6:	e00f      	b.n	8007218 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071fe:	d10b      	bne.n	8007218 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <vTaskStartScheduler+0xb4>
}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	0800becc 	.word	0x0800becc
 8007224:	08007895 	.word	0x08007895
 8007228:	20001088 	.word	0x20001088
 800722c:	20000b90 	.word	0x20000b90
 8007230:	20000070 	.word	0x20000070
 8007234:	20001084 	.word	0x20001084
 8007238:	20001070 	.word	0x20001070
 800723c:	20001068 	.word	0x20001068

08007240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <vTaskSuspendAll+0x18>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3301      	adds	r3, #1
 800724a:	4a03      	ldr	r2, [pc, #12]	@ (8007258 <vTaskSuspendAll+0x18>)
 800724c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800724e:	bf00      	nop
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	2000108c 	.word	0x2000108c

0800725c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800726a:	4b42      	ldr	r3, [pc, #264]	@ (8007374 <xTaskResumeAll+0x118>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <xTaskResumeAll+0x2e>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	603b      	str	r3, [r7, #0]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800728a:	f001 f94d 	bl	8008528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800728e:	4b39      	ldr	r3, [pc, #228]	@ (8007374 <xTaskResumeAll+0x118>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3b01      	subs	r3, #1
 8007294:	4a37      	ldr	r2, [pc, #220]	@ (8007374 <xTaskResumeAll+0x118>)
 8007296:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007298:	4b36      	ldr	r3, [pc, #216]	@ (8007374 <xTaskResumeAll+0x118>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d162      	bne.n	8007366 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072a0:	4b35      	ldr	r3, [pc, #212]	@ (8007378 <xTaskResumeAll+0x11c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d05e      	beq.n	8007366 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072a8:	e02f      	b.n	800730a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072aa:	4b34      	ldr	r3, [pc, #208]	@ (800737c <xTaskResumeAll+0x120>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3318      	adds	r3, #24
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe ff7c 	bl	80061b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3304      	adds	r3, #4
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7fe ff77 	bl	80061b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007380 <xTaskResumeAll+0x124>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d903      	bls.n	80072da <xTaskResumeAll+0x7e>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	4a2a      	ldr	r2, [pc, #168]	@ (8007380 <xTaskResumeAll+0x124>)
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4a27      	ldr	r2, [pc, #156]	@ (8007384 <xTaskResumeAll+0x128>)
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3304      	adds	r3, #4
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7fe ff02 	bl	80060fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072fa:	4b23      	ldr	r3, [pc, #140]	@ (8007388 <xTaskResumeAll+0x12c>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	429a      	cmp	r2, r3
 8007302:	d302      	bcc.n	800730a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007304:	4b21      	ldr	r3, [pc, #132]	@ (800738c <xTaskResumeAll+0x130>)
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800730a:	4b1c      	ldr	r3, [pc, #112]	@ (800737c <xTaskResumeAll+0x120>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1cb      	bne.n	80072aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007318:	f000 fb78 	bl	8007a0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800731c:	4b1c      	ldr	r3, [pc, #112]	@ (8007390 <xTaskResumeAll+0x134>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007328:	f000 f858 	bl	80073dc <xTaskIncrementTick>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007332:	4b16      	ldr	r3, [pc, #88]	@ (800738c <xTaskResumeAll+0x130>)
 8007334:	2201      	movs	r2, #1
 8007336:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	3b01      	subs	r3, #1
 800733c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1f1      	bne.n	8007328 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007344:	4b12      	ldr	r3, [pc, #72]	@ (8007390 <xTaskResumeAll+0x134>)
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800734a:	4b10      	ldr	r3, [pc, #64]	@ (800738c <xTaskResumeAll+0x130>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d009      	beq.n	8007366 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007356:	4b0f      	ldr	r3, [pc, #60]	@ (8007394 <xTaskResumeAll+0x138>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007366:	f001 f911 	bl	800858c <vPortExitCritical>

	return xAlreadyYielded;
 800736a:	68bb      	ldr	r3, [r7, #8]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	2000108c 	.word	0x2000108c
 8007378:	20001064 	.word	0x20001064
 800737c:	20001024 	.word	0x20001024
 8007380:	2000106c 	.word	0x2000106c
 8007384:	20000b94 	.word	0x20000b94
 8007388:	20000b90 	.word	0x20000b90
 800738c:	20001078 	.word	0x20001078
 8007390:	20001074 	.word	0x20001074
 8007394:	e000ed04 	.word	0xe000ed04

08007398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800739e:	4b05      	ldr	r3, [pc, #20]	@ (80073b4 <xTaskGetTickCount+0x1c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073a4:	687b      	ldr	r3, [r7, #4]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20001068 	.word	0x20001068

080073b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073be:	f001 f993 	bl	80086e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80073c2:	2300      	movs	r3, #0
 80073c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80073c6:	4b04      	ldr	r3, [pc, #16]	@ (80073d8 <xTaskGetTickCountFromISR+0x20>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073cc:	683b      	ldr	r3, [r7, #0]
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20001068 	.word	0x20001068

080073dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073e6:	4b4f      	ldr	r3, [pc, #316]	@ (8007524 <xTaskIncrementTick+0x148>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 8090 	bne.w	8007510 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073f0:	4b4d      	ldr	r3, [pc, #308]	@ (8007528 <xTaskIncrementTick+0x14c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007528 <xTaskIncrementTick+0x14c>)
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d121      	bne.n	8007448 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007404:	4b49      	ldr	r3, [pc, #292]	@ (800752c <xTaskIncrementTick+0x150>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <xTaskIncrementTick+0x4a>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	603b      	str	r3, [r7, #0]
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	e7fd      	b.n	8007422 <xTaskIncrementTick+0x46>
 8007426:	4b41      	ldr	r3, [pc, #260]	@ (800752c <xTaskIncrementTick+0x150>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	4b40      	ldr	r3, [pc, #256]	@ (8007530 <xTaskIncrementTick+0x154>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a3e      	ldr	r2, [pc, #248]	@ (800752c <xTaskIncrementTick+0x150>)
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	4a3e      	ldr	r2, [pc, #248]	@ (8007530 <xTaskIncrementTick+0x154>)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	4b3e      	ldr	r3, [pc, #248]	@ (8007534 <xTaskIncrementTick+0x158>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3301      	adds	r3, #1
 8007440:	4a3c      	ldr	r2, [pc, #240]	@ (8007534 <xTaskIncrementTick+0x158>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	f000 fae2 	bl	8007a0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007448:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <xTaskIncrementTick+0x15c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	429a      	cmp	r2, r3
 8007450:	d349      	bcc.n	80074e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007452:	4b36      	ldr	r3, [pc, #216]	@ (800752c <xTaskIncrementTick+0x150>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d104      	bne.n	8007466 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745c:	4b36      	ldr	r3, [pc, #216]	@ (8007538 <xTaskIncrementTick+0x15c>)
 800745e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007462:	601a      	str	r2, [r3, #0]
					break;
 8007464:	e03f      	b.n	80074e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007466:	4b31      	ldr	r3, [pc, #196]	@ (800752c <xTaskIncrementTick+0x150>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	d203      	bcs.n	8007486 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800747e:	4a2e      	ldr	r2, [pc, #184]	@ (8007538 <xTaskIncrementTick+0x15c>)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007484:	e02f      	b.n	80074e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	3304      	adds	r3, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fe92 	bl	80061b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3318      	adds	r3, #24
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fe89 	bl	80061b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a6:	4b25      	ldr	r3, [pc, #148]	@ (800753c <xTaskIncrementTick+0x160>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d903      	bls.n	80074b6 <xTaskIncrementTick+0xda>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	4a22      	ldr	r2, [pc, #136]	@ (800753c <xTaskIncrementTick+0x160>)
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <xTaskIncrementTick+0x164>)
 80074c4:	441a      	add	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fe fe14 	bl	80060fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007544 <xTaskIncrementTick+0x168>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	429a      	cmp	r2, r3
 80074de:	d3b8      	bcc.n	8007452 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e4:	e7b5      	b.n	8007452 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074e6:	4b17      	ldr	r3, [pc, #92]	@ (8007544 <xTaskIncrementTick+0x168>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ec:	4914      	ldr	r1, [pc, #80]	@ (8007540 <xTaskIncrementTick+0x164>)
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d901      	bls.n	8007502 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007502:	4b11      	ldr	r3, [pc, #68]	@ (8007548 <xTaskIncrementTick+0x16c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800750a:	2301      	movs	r3, #1
 800750c:	617b      	str	r3, [r7, #20]
 800750e:	e004      	b.n	800751a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007510:	4b0e      	ldr	r3, [pc, #56]	@ (800754c <xTaskIncrementTick+0x170>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a0d      	ldr	r2, [pc, #52]	@ (800754c <xTaskIncrementTick+0x170>)
 8007518:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800751a:	697b      	ldr	r3, [r7, #20]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	2000108c 	.word	0x2000108c
 8007528:	20001068 	.word	0x20001068
 800752c:	2000101c 	.word	0x2000101c
 8007530:	20001020 	.word	0x20001020
 8007534:	2000107c 	.word	0x2000107c
 8007538:	20001084 	.word	0x20001084
 800753c:	2000106c 	.word	0x2000106c
 8007540:	20000b94 	.word	0x20000b94
 8007544:	20000b90 	.word	0x20000b90
 8007548:	20001078 	.word	0x20001078
 800754c:	20001074 	.word	0x20001074

08007550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007556:	4b2b      	ldr	r3, [pc, #172]	@ (8007604 <vTaskSwitchContext+0xb4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800755e:	4b2a      	ldr	r3, [pc, #168]	@ (8007608 <vTaskSwitchContext+0xb8>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007564:	e047      	b.n	80075f6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007566:	4b28      	ldr	r3, [pc, #160]	@ (8007608 <vTaskSwitchContext+0xb8>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	4b27      	ldr	r3, [pc, #156]	@ (800760c <vTaskSwitchContext+0xbc>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e011      	b.n	8007598 <vTaskSwitchContext+0x48>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <vTaskSwitchContext+0x42>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	607b      	str	r3, [r7, #4]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <vTaskSwitchContext+0x3e>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3b01      	subs	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	491d      	ldr	r1, [pc, #116]	@ (8007610 <vTaskSwitchContext+0xc0>)
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	4613      	mov	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4413      	add	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0e3      	beq.n	8007574 <vTaskSwitchContext+0x24>
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <vTaskSwitchContext+0xc0>)
 80075b8:	4413      	add	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	3308      	adds	r3, #8
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d104      	bne.n	80075dc <vTaskSwitchContext+0x8c>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007614 <vTaskSwitchContext+0xc4>)
 80075e4:	6013      	str	r3, [r2, #0]
 80075e6:	4a09      	ldr	r2, [pc, #36]	@ (800760c <vTaskSwitchContext+0xbc>)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80075ec:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <vTaskSwitchContext+0xc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3364      	adds	r3, #100	@ 0x64
 80075f2:	4a09      	ldr	r2, [pc, #36]	@ (8007618 <vTaskSwitchContext+0xc8>)
 80075f4:	6013      	str	r3, [r2, #0]
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	2000108c 	.word	0x2000108c
 8007608:	20001078 	.word	0x20001078
 800760c:	2000106c 	.word	0x2000106c
 8007610:	20000b94 	.word	0x20000b94
 8007614:	20000b90 	.word	0x20000b90
 8007618:	20000070 	.word	0x20000070

0800761c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	60fb      	str	r3, [r7, #12]
}
 800763e:	bf00      	nop
 8007640:	bf00      	nop
 8007642:	e7fd      	b.n	8007640 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007644:	4b07      	ldr	r3, [pc, #28]	@ (8007664 <vTaskPlaceOnEventList+0x48>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3318      	adds	r3, #24
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fe fd78 	bl	8006142 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007652:	2101      	movs	r1, #1
 8007654:	6838      	ldr	r0, [r7, #0]
 8007656:	f000 fa87 	bl	8007b68 <prvAddCurrentTaskToDelayedList>
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000b90 	.word	0x20000b90

08007668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	617b      	str	r3, [r7, #20]
}
 800768c:	bf00      	nop
 800768e:	bf00      	nop
 8007690:	e7fd      	b.n	800768e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007692:	4b0a      	ldr	r3, [pc, #40]	@ (80076bc <vTaskPlaceOnEventListRestricted+0x54>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3318      	adds	r3, #24
 8007698:	4619      	mov	r1, r3
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f7fe fd2d 	bl	80060fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80076a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	68b8      	ldr	r0, [r7, #8]
 80076b0:	f000 fa5a 	bl	8007b68 <prvAddCurrentTaskToDelayedList>
	}
 80076b4:	bf00      	nop
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20000b90 	.word	0x20000b90

080076c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	e7fd      	b.n	80076ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3318      	adds	r3, #24
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fd5e 	bl	80061b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007770 <xTaskRemoveFromEventList+0xb0>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11d      	bne.n	800773c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe fd55 	bl	80061b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4b19      	ldr	r3, [pc, #100]	@ (8007774 <xTaskRemoveFromEventList+0xb4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d903      	bls.n	800771e <xTaskRemoveFromEventList+0x5e>
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a16      	ldr	r2, [pc, #88]	@ (8007774 <xTaskRemoveFromEventList+0xb4>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4a13      	ldr	r2, [pc, #76]	@ (8007778 <xTaskRemoveFromEventList+0xb8>)
 800772c:	441a      	add	r2, r3
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fe fce0 	bl	80060fa <vListInsertEnd>
 800773a:	e005      	b.n	8007748 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3318      	adds	r3, #24
 8007740:	4619      	mov	r1, r3
 8007742:	480e      	ldr	r0, [pc, #56]	@ (800777c <xTaskRemoveFromEventList+0xbc>)
 8007744:	f7fe fcd9 	bl	80060fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774c:	4b0c      	ldr	r3, [pc, #48]	@ (8007780 <xTaskRemoveFromEventList+0xc0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d905      	bls.n	8007762 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800775a:	4b0a      	ldr	r3, [pc, #40]	@ (8007784 <xTaskRemoveFromEventList+0xc4>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e001      	b.n	8007766 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	2000108c 	.word	0x2000108c
 8007774:	2000106c 	.word	0x2000106c
 8007778:	20000b94 	.word	0x20000b94
 800777c:	20001024 	.word	0x20001024
 8007780:	20000b90 	.word	0x20000b90
 8007784:	20001078 	.word	0x20001078

08007788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007790:	4b06      	ldr	r3, [pc, #24]	@ (80077ac <vTaskInternalSetTimeOutState+0x24>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007798:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <vTaskInternalSetTimeOutState+0x28>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	2000107c 	.word	0x2000107c
 80077b0:	20001068 	.word	0x20001068

080077b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	613b      	str	r3, [r7, #16]
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10b      	bne.n	80077fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	60fb      	str	r3, [r7, #12]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80077fa:	f000 fe95 	bl	8008528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007874 <xTaskCheckForTimeOut+0xc0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007816:	d102      	bne.n	800781e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007818:	2300      	movs	r3, #0
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	e023      	b.n	8007866 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	4b15      	ldr	r3, [pc, #84]	@ (8007878 <xTaskCheckForTimeOut+0xc4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d007      	beq.n	800783a <xTaskCheckForTimeOut+0x86>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	429a      	cmp	r2, r3
 8007832:	d302      	bcc.n	800783a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007834:	2301      	movs	r3, #1
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e015      	b.n	8007866 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	429a      	cmp	r2, r3
 8007842:	d20b      	bcs.n	800785c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	1ad2      	subs	r2, r2, r3
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7ff ff99 	bl	8007788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	e004      	b.n	8007866 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2200      	movs	r2, #0
 8007860:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007862:	2301      	movs	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007866:	f000 fe91 	bl	800858c <vPortExitCritical>

	return xReturn;
 800786a:	69fb      	ldr	r3, [r7, #28]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3720      	adds	r7, #32
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20001068 	.word	0x20001068
 8007878:	2000107c 	.word	0x2000107c

0800787c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007880:	4b03      	ldr	r3, [pc, #12]	@ (8007890 <vTaskMissedYield+0x14>)
 8007882:	2201      	movs	r2, #1
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	20001078 	.word	0x20001078

08007894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800789c:	f000 f852 	bl	8007944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80078a0:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <prvIdleTask+0x28>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d9f9      	bls.n	800789c <prvIdleTask+0x8>
			{
				taskYIELD();
 80078a8:	4b05      	ldr	r3, [pc, #20]	@ (80078c0 <prvIdleTask+0x2c>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078b8:	e7f0      	b.n	800789c <prvIdleTask+0x8>
 80078ba:	bf00      	nop
 80078bc:	20000b94 	.word	0x20000b94
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078ca:	2300      	movs	r3, #0
 80078cc:	607b      	str	r3, [r7, #4]
 80078ce:	e00c      	b.n	80078ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4a12      	ldr	r2, [pc, #72]	@ (8007924 <prvInitialiseTaskLists+0x60>)
 80078dc:	4413      	add	r3, r2
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fbde 	bl	80060a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3301      	adds	r3, #1
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b37      	cmp	r3, #55	@ 0x37
 80078ee:	d9ef      	bls.n	80078d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078f0:	480d      	ldr	r0, [pc, #52]	@ (8007928 <prvInitialiseTaskLists+0x64>)
 80078f2:	f7fe fbd5 	bl	80060a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078f6:	480d      	ldr	r0, [pc, #52]	@ (800792c <prvInitialiseTaskLists+0x68>)
 80078f8:	f7fe fbd2 	bl	80060a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078fc:	480c      	ldr	r0, [pc, #48]	@ (8007930 <prvInitialiseTaskLists+0x6c>)
 80078fe:	f7fe fbcf 	bl	80060a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007902:	480c      	ldr	r0, [pc, #48]	@ (8007934 <prvInitialiseTaskLists+0x70>)
 8007904:	f7fe fbcc 	bl	80060a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007908:	480b      	ldr	r0, [pc, #44]	@ (8007938 <prvInitialiseTaskLists+0x74>)
 800790a:	f7fe fbc9 	bl	80060a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800790e:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <prvInitialiseTaskLists+0x78>)
 8007910:	4a05      	ldr	r2, [pc, #20]	@ (8007928 <prvInitialiseTaskLists+0x64>)
 8007912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007914:	4b0a      	ldr	r3, [pc, #40]	@ (8007940 <prvInitialiseTaskLists+0x7c>)
 8007916:	4a05      	ldr	r2, [pc, #20]	@ (800792c <prvInitialiseTaskLists+0x68>)
 8007918:	601a      	str	r2, [r3, #0]
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000b94 	.word	0x20000b94
 8007928:	20000ff4 	.word	0x20000ff4
 800792c:	20001008 	.word	0x20001008
 8007930:	20001024 	.word	0x20001024
 8007934:	20001038 	.word	0x20001038
 8007938:	20001050 	.word	0x20001050
 800793c:	2000101c 	.word	0x2000101c
 8007940:	20001020 	.word	0x20001020

08007944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800794a:	e019      	b.n	8007980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800794c:	f000 fdec 	bl	8008528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007950:	4b10      	ldr	r3, [pc, #64]	@ (8007994 <prvCheckTasksWaitingTermination+0x50>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3304      	adds	r3, #4
 800795c:	4618      	mov	r0, r3
 800795e:	f7fe fc29 	bl	80061b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007962:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <prvCheckTasksWaitingTermination+0x54>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3b01      	subs	r3, #1
 8007968:	4a0b      	ldr	r2, [pc, #44]	@ (8007998 <prvCheckTasksWaitingTermination+0x54>)
 800796a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800796c:	4b0b      	ldr	r3, [pc, #44]	@ (800799c <prvCheckTasksWaitingTermination+0x58>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3b01      	subs	r3, #1
 8007972:	4a0a      	ldr	r2, [pc, #40]	@ (800799c <prvCheckTasksWaitingTermination+0x58>)
 8007974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007976:	f000 fe09 	bl	800858c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f810 	bl	80079a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007980:	4b06      	ldr	r3, [pc, #24]	@ (800799c <prvCheckTasksWaitingTermination+0x58>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1e1      	bne.n	800794c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20001038 	.word	0x20001038
 8007998:	20001064 	.word	0x20001064
 800799c:	2000104c 	.word	0x2000104c

080079a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3364      	adds	r3, #100	@ 0x64
 80079ac:	4618      	mov	r0, r3
 80079ae:	f001 ffa1 	bl	80098f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d108      	bne.n	80079ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 ffa1 	bl	8008908 <vPortFree>
				vPortFree( pxTCB );
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 ff9e 	bl	8008908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079cc:	e019      	b.n	8007a02 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d103      	bne.n	80079e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 ff95 	bl	8008908 <vPortFree>
	}
 80079de:	e010      	b.n	8007a02 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d00b      	beq.n	8007a02 <prvDeleteTCB+0x62>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60fb      	str	r3, [r7, #12]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <prvDeleteTCB+0x5e>
	}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <prvResetNextTaskUnblockTime+0x38>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d104      	bne.n	8007a26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a48 <prvResetNextTaskUnblockTime+0x3c>)
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a24:	e008      	b.n	8007a38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a26:	4b07      	ldr	r3, [pc, #28]	@ (8007a44 <prvResetNextTaskUnblockTime+0x38>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a04      	ldr	r2, [pc, #16]	@ (8007a48 <prvResetNextTaskUnblockTime+0x3c>)
 8007a36:	6013      	str	r3, [r2, #0]
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	2000101c 	.word	0x2000101c
 8007a48:	20001084 	.word	0x20001084

08007a4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a52:	4b0b      	ldr	r3, [pc, #44]	@ (8007a80 <xTaskGetSchedulerState+0x34>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d102      	bne.n	8007a60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	607b      	str	r3, [r7, #4]
 8007a5e:	e008      	b.n	8007a72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a60:	4b08      	ldr	r3, [pc, #32]	@ (8007a84 <xTaskGetSchedulerState+0x38>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	607b      	str	r3, [r7, #4]
 8007a6c:	e001      	b.n	8007a72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a72:	687b      	ldr	r3, [r7, #4]
	}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20001070 	.word	0x20001070
 8007a84:	2000108c 	.word	0x2000108c

08007a88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d058      	beq.n	8007b50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007b5c <xTaskPriorityDisinherit+0xd4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d00b      	beq.n	8007ac0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	bf00      	nop
 8007abe:	e7fd      	b.n	8007abc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	60bb      	str	r3, [r7, #8]
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	e7fd      	b.n	8007adc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ae4:	1e5a      	subs	r2, r3, #1
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d02c      	beq.n	8007b50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d128      	bne.n	8007b50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	3304      	adds	r3, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe fb56 	bl	80061b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b20:	4b0f      	ldr	r3, [pc, #60]	@ (8007b60 <xTaskPriorityDisinherit+0xd8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d903      	bls.n	8007b30 <xTaskPriorityDisinherit+0xa8>
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8007b60 <xTaskPriorityDisinherit+0xd8>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4a09      	ldr	r2, [pc, #36]	@ (8007b64 <xTaskPriorityDisinherit+0xdc>)
 8007b3e:	441a      	add	r2, r3
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3304      	adds	r3, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4610      	mov	r0, r2
 8007b48:	f7fe fad7 	bl	80060fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b50:	697b      	ldr	r3, [r7, #20]
	}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000b90 	.word	0x20000b90
 8007b60:	2000106c 	.word	0x2000106c
 8007b64:	20000b94 	.word	0x20000b94

08007b68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b72:	4b21      	ldr	r3, [pc, #132]	@ (8007bf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b78:	4b20      	ldr	r3, [pc, #128]	@ (8007bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fb18 	bl	80061b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b8a:	d10a      	bne.n	8007ba2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b92:	4b1a      	ldr	r3, [pc, #104]	@ (8007bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3304      	adds	r3, #4
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4819      	ldr	r0, [pc, #100]	@ (8007c00 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b9c:	f7fe faad 	bl	80060fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ba0:	e026      	b.n	8007bf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007baa:	4b14      	ldr	r3, [pc, #80]	@ (8007bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d209      	bcs.n	8007bce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bba:	4b12      	ldr	r3, [pc, #72]	@ (8007c04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8007bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f7fe fabb 	bl	8006142 <vListInsert>
}
 8007bcc:	e010      	b.n	8007bf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bce:	4b0e      	ldr	r3, [pc, #56]	@ (8007c08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bfc <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4610      	mov	r0, r2
 8007bdc:	f7fe fab1 	bl	8006142 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007be0:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d202      	bcs.n	8007bf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bea:	4a08      	ldr	r2, [pc, #32]	@ (8007c0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6013      	str	r3, [r2, #0]
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20001068 	.word	0x20001068
 8007bfc:	20000b90 	.word	0x20000b90
 8007c00:	20001050 	.word	0x20001050
 8007c04:	20001020 	.word	0x20001020
 8007c08:	2000101c 	.word	0x2000101c
 8007c0c:	20001084 	.word	0x20001084

08007c10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08a      	sub	sp, #40	@ 0x28
 8007c14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c1a:	f000 fb13 	bl	8008244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <xTimerCreateTimerTask+0x84>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d021      	beq.n	8007c6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c2e:	1d3a      	adds	r2, r7, #4
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7fe fa17 	bl	800606c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	9202      	str	r2, [sp, #8]
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	2302      	movs	r3, #2
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	460a      	mov	r2, r1
 8007c50:	4911      	ldr	r1, [pc, #68]	@ (8007c98 <xTimerCreateTimerTask+0x88>)
 8007c52:	4812      	ldr	r0, [pc, #72]	@ (8007c9c <xTimerCreateTimerTask+0x8c>)
 8007c54:	f7ff f890 	bl	8006d78 <xTaskCreateStatic>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	4a11      	ldr	r2, [pc, #68]	@ (8007ca0 <xTimerCreateTimerTask+0x90>)
 8007c5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <xTimerCreateTimerTask+0x90>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c66:	2301      	movs	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10b      	bne.n	8007c88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c74:	f383 8811 	msr	BASEPRI, r3
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	613b      	str	r3, [r7, #16]
}
 8007c82:	bf00      	nop
 8007c84:	bf00      	nop
 8007c86:	e7fd      	b.n	8007c84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c88:	697b      	ldr	r3, [r7, #20]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	200010c0 	.word	0x200010c0
 8007c98:	0800bed4 	.word	0x0800bed4
 8007c9c:	08007ddd 	.word	0x08007ddd
 8007ca0:	200010c4 	.word	0x200010c4

08007ca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	@ 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10b      	bne.n	8007cd4 <xTimerGenericCommand+0x30>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	623b      	str	r3, [r7, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	e7fd      	b.n	8007cd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cd4:	4b19      	ldr	r3, [pc, #100]	@ (8007d3c <xTimerGenericCommand+0x98>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02a      	beq.n	8007d32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b05      	cmp	r3, #5
 8007cec:	dc18      	bgt.n	8007d20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cee:	f7ff fead 	bl	8007a4c <xTaskGetSchedulerState>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d109      	bne.n	8007d0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cf8:	4b10      	ldr	r3, [pc, #64]	@ (8007d3c <xTimerGenericCommand+0x98>)
 8007cfa:	6818      	ldr	r0, [r3, #0]
 8007cfc:	f107 0110 	add.w	r1, r7, #16
 8007d00:	2300      	movs	r3, #0
 8007d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d04:	f7fe fbc6 	bl	8006494 <xQueueGenericSend>
 8007d08:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d0a:	e012      	b.n	8007d32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d3c <xTimerGenericCommand+0x98>)
 8007d0e:	6818      	ldr	r0, [r3, #0]
 8007d10:	f107 0110 	add.w	r1, r7, #16
 8007d14:	2300      	movs	r3, #0
 8007d16:	2200      	movs	r2, #0
 8007d18:	f7fe fbbc 	bl	8006494 <xQueueGenericSend>
 8007d1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d1e:	e008      	b.n	8007d32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d20:	4b06      	ldr	r3, [pc, #24]	@ (8007d3c <xTimerGenericCommand+0x98>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	f107 0110 	add.w	r1, r7, #16
 8007d28:	2300      	movs	r3, #0
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	f7fe fcb4 	bl	8006698 <xQueueGenericSendFromISR>
 8007d30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3728      	adds	r7, #40	@ 0x28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200010c0 	.word	0x200010c0

08007d40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b088      	sub	sp, #32
 8007d44:	af02      	add	r7, sp, #8
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4a:	4b23      	ldr	r3, [pc, #140]	@ (8007dd8 <prvProcessExpiredTimer+0x98>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fa2b 	bl	80061b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d023      	beq.n	8007db4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	699a      	ldr	r2, [r3, #24]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	18d1      	adds	r1, r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	f000 f8d5 	bl	8007f28 <prvInsertTimerInActiveList>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d020      	beq.n	8007dc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d84:	2300      	movs	r3, #0
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6978      	ldr	r0, [r7, #20]
 8007d90:	f7ff ff88 	bl	8007ca4 <xTimerGenericCommand>
 8007d94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d114      	bne.n	8007dc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	60fb      	str	r3, [r7, #12]
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	e7fd      	b.n	8007db0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	6978      	ldr	r0, [r7, #20]
 8007dcc:	4798      	blx	r3
}
 8007dce:	bf00      	nop
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200010b8 	.word	0x200010b8

08007ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f859 	bl	8007ea0 <prvGetNextExpireTime>
 8007dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f805 	bl	8007e04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dfa:	f000 f8d7 	bl	8007fac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dfe:	bf00      	nop
 8007e00:	e7f0      	b.n	8007de4 <prvTimerTask+0x8>
	...

08007e04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e0e:	f7ff fa17 	bl	8007240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e12:	f107 0308 	add.w	r3, r7, #8
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f866 	bl	8007ee8 <prvSampleTimeNow>
 8007e1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d130      	bne.n	8007e86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <prvProcessTimerOrBlockTask+0x3c>
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d806      	bhi.n	8007e40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e32:	f7ff fa13 	bl	800725c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff ff81 	bl	8007d40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e3e:	e024      	b.n	8007e8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e46:	4b13      	ldr	r3, [pc, #76]	@ (8007e94 <prvProcessTimerOrBlockTask+0x90>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <prvProcessTimerOrBlockTask+0x50>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <prvProcessTimerOrBlockTask+0x52>
 8007e54:	2300      	movs	r3, #0
 8007e56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e58:	4b0f      	ldr	r3, [pc, #60]	@ (8007e98 <prvProcessTimerOrBlockTask+0x94>)
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4619      	mov	r1, r3
 8007e66:	f7fe ff53 	bl	8006d10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e6a:	f7ff f9f7 	bl	800725c <xTaskResumeAll>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e74:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <prvProcessTimerOrBlockTask+0x98>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
}
 8007e84:	e001      	b.n	8007e8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e86:	f7ff f9e9 	bl	800725c <xTaskResumeAll>
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	200010bc 	.word	0x200010bc
 8007e98:	200010c0 	.word	0x200010c0
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <prvGetNextExpireTime+0x44>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <prvGetNextExpireTime+0x16>
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	e000      	b.n	8007eb8 <prvGetNextExpireTime+0x18>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d105      	bne.n	8007ed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec4:	4b07      	ldr	r3, [pc, #28]	@ (8007ee4 <prvGetNextExpireTime+0x44>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	e001      	b.n	8007ed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3714      	adds	r7, #20
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	200010b8 	.word	0x200010b8

08007ee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ef0:	f7ff fa52 	bl	8007398 <xTaskGetTickCount>
 8007ef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f24 <prvSampleTimeNow+0x3c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d205      	bcs.n	8007f0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007f00:	f000 f93a 	bl	8008178 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e002      	b.n	8007f12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f12:	4a04      	ldr	r2, [pc, #16]	@ (8007f24 <prvSampleTimeNow+0x3c>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f18:	68fb      	ldr	r3, [r7, #12]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200010c8 	.word	0x200010c8

08007f28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d812      	bhi.n	8007f74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d302      	bcc.n	8007f62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e01b      	b.n	8007f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f62:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <prvInsertTimerInActiveList+0x7c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	f7fe f8e8 	bl	8006142 <vListInsert>
 8007f72:	e012      	b.n	8007f9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d206      	bcs.n	8007f8a <prvInsertTimerInActiveList+0x62>
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d302      	bcc.n	8007f8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f84:	2301      	movs	r3, #1
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e007      	b.n	8007f9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f8a:	4b07      	ldr	r3, [pc, #28]	@ (8007fa8 <prvInsertTimerInActiveList+0x80>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3304      	adds	r3, #4
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f7fe f8d4 	bl	8006142 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f9a:	697b      	ldr	r3, [r7, #20]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	200010bc 	.word	0x200010bc
 8007fa8:	200010b8 	.word	0x200010b8

08007fac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08e      	sub	sp, #56	@ 0x38
 8007fb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fb2:	e0ce      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	da19      	bge.n	8007fee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fba:	1d3b      	adds	r3, r7, #4
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10b      	bne.n	8007fde <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	61fb      	str	r3, [r7, #28]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fe4:	6850      	ldr	r0, [r2, #4]
 8007fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fe8:	6892      	ldr	r2, [r2, #8]
 8007fea:	4611      	mov	r1, r2
 8007fec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f2c0 80ae 	blt.w	8008152 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	3304      	adds	r3, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe f8d4 	bl	80061b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800800c:	463b      	mov	r3, r7
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ff6a 	bl	8007ee8 <prvSampleTimeNow>
 8008014:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b09      	cmp	r3, #9
 800801a:	f200 8097 	bhi.w	800814c <prvProcessReceivedCommands+0x1a0>
 800801e:	a201      	add	r2, pc, #4	@ (adr r2, 8008024 <prvProcessReceivedCommands+0x78>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	0800804d 	.word	0x0800804d
 8008028:	0800804d 	.word	0x0800804d
 800802c:	0800804d 	.word	0x0800804d
 8008030:	080080c3 	.word	0x080080c3
 8008034:	080080d7 	.word	0x080080d7
 8008038:	08008123 	.word	0x08008123
 800803c:	0800804d 	.word	0x0800804d
 8008040:	0800804d 	.word	0x0800804d
 8008044:	080080c3 	.word	0x080080c3
 8008048:	080080d7 	.word	0x080080d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800804c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	18d1      	adds	r1, r2, r3
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800806a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800806c:	f7ff ff5c 	bl	8007f28 <prvInsertTimerInActiveList>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d06c      	beq.n	8008150 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800807c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d061      	beq.n	8008150 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	441a      	add	r2, r3
 8008094:	2300      	movs	r3, #0
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	2300      	movs	r3, #0
 800809a:	2100      	movs	r1, #0
 800809c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800809e:	f7ff fe01 	bl	8007ca4 <xTimerGenericCommand>
 80080a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d152      	bne.n	8008150 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	61bb      	str	r3, [r7, #24]
}
 80080bc:	bf00      	nop
 80080be:	bf00      	nop
 80080c0:	e7fd      	b.n	80080be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80080d4:	e03d      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080dc:	f043 0301 	orr.w	r3, r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	617b      	str	r3, [r7, #20]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	18d1      	adds	r1, r2, r3
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800811a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811c:	f7ff ff04 	bl	8007f28 <prvInsertTimerInActiveList>
					break;
 8008120:	e017      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d103      	bne.n	8008138 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008132:	f000 fbe9 	bl	8008908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008136:	e00c      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800814a:	e002      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800814c:	bf00      	nop
 800814e:	e000      	b.n	8008152 <prvProcessReceivedCommands+0x1a6>
					break;
 8008150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008152:	4b08      	ldr	r3, [pc, #32]	@ (8008174 <prvProcessReceivedCommands+0x1c8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	1d39      	adds	r1, r7, #4
 8008158:	2200      	movs	r2, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fb3a 	bl	80067d4 <xQueueReceive>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	f47f af26 	bne.w	8007fb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	3730      	adds	r7, #48	@ 0x30
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200010c0 	.word	0x200010c0

08008178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800817e:	e049      	b.n	8008214 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008180:	4b2e      	ldr	r3, [pc, #184]	@ (800823c <prvSwitchTimerLists+0xc4>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800818a:	4b2c      	ldr	r3, [pc, #176]	@ (800823c <prvSwitchTimerLists+0xc4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3304      	adds	r3, #4
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe f80b 	bl	80061b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d02f      	beq.n	8008214 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d90e      	bls.n	80081e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081d2:	4b1a      	ldr	r3, [pc, #104]	@ (800823c <prvSwitchTimerLists+0xc4>)
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fd ffb0 	bl	8006142 <vListInsert>
 80081e2:	e017      	b.n	8008214 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081e4:	2300      	movs	r3, #0
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	2100      	movs	r1, #0
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7ff fd58 	bl	8007ca4 <xTimerGenericCommand>
 80081f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	603b      	str	r3, [r7, #0]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008214:	4b09      	ldr	r3, [pc, #36]	@ (800823c <prvSwitchTimerLists+0xc4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1b0      	bne.n	8008180 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800821e:	4b07      	ldr	r3, [pc, #28]	@ (800823c <prvSwitchTimerLists+0xc4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008224:	4b06      	ldr	r3, [pc, #24]	@ (8008240 <prvSwitchTimerLists+0xc8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a04      	ldr	r2, [pc, #16]	@ (800823c <prvSwitchTimerLists+0xc4>)
 800822a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800822c:	4a04      	ldr	r2, [pc, #16]	@ (8008240 <prvSwitchTimerLists+0xc8>)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6013      	str	r3, [r2, #0]
}
 8008232:	bf00      	nop
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	200010b8 	.word	0x200010b8
 8008240:	200010bc 	.word	0x200010bc

08008244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800824a:	f000 f96d 	bl	8008528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800824e:	4b15      	ldr	r3, [pc, #84]	@ (80082a4 <prvCheckForValidListAndQueue+0x60>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d120      	bne.n	8008298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008256:	4814      	ldr	r0, [pc, #80]	@ (80082a8 <prvCheckForValidListAndQueue+0x64>)
 8008258:	f7fd ff22 	bl	80060a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800825c:	4813      	ldr	r0, [pc, #76]	@ (80082ac <prvCheckForValidListAndQueue+0x68>)
 800825e:	f7fd ff1f 	bl	80060a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008262:	4b13      	ldr	r3, [pc, #76]	@ (80082b0 <prvCheckForValidListAndQueue+0x6c>)
 8008264:	4a10      	ldr	r2, [pc, #64]	@ (80082a8 <prvCheckForValidListAndQueue+0x64>)
 8008266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008268:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <prvCheckForValidListAndQueue+0x70>)
 800826a:	4a10      	ldr	r2, [pc, #64]	@ (80082ac <prvCheckForValidListAndQueue+0x68>)
 800826c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800826e:	2300      	movs	r3, #0
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	4b11      	ldr	r3, [pc, #68]	@ (80082b8 <prvCheckForValidListAndQueue+0x74>)
 8008274:	4a11      	ldr	r2, [pc, #68]	@ (80082bc <prvCheckForValidListAndQueue+0x78>)
 8008276:	2110      	movs	r1, #16
 8008278:	200a      	movs	r0, #10
 800827a:	f7fe f82f 	bl	80062dc <xQueueGenericCreateStatic>
 800827e:	4603      	mov	r3, r0
 8008280:	4a08      	ldr	r2, [pc, #32]	@ (80082a4 <prvCheckForValidListAndQueue+0x60>)
 8008282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008284:	4b07      	ldr	r3, [pc, #28]	@ (80082a4 <prvCheckForValidListAndQueue+0x60>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <prvCheckForValidListAndQueue+0x60>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	490b      	ldr	r1, [pc, #44]	@ (80082c0 <prvCheckForValidListAndQueue+0x7c>)
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fd12 	bl	8006cbc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008298:	f000 f978 	bl	800858c <vPortExitCritical>
}
 800829c:	bf00      	nop
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	200010c0 	.word	0x200010c0
 80082a8:	20001090 	.word	0x20001090
 80082ac:	200010a4 	.word	0x200010a4
 80082b0:	200010b8 	.word	0x200010b8
 80082b4:	200010bc 	.word	0x200010bc
 80082b8:	2000116c 	.word	0x2000116c
 80082bc:	200010cc 	.word	0x200010cc
 80082c0:	0800bedc 	.word	0x0800bedc

080082c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3b04      	subs	r3, #4
 80082d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3b04      	subs	r3, #4
 80082e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0201 	bic.w	r2, r3, #1
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3b04      	subs	r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082f4:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <pxPortInitialiseStack+0x64>)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3b14      	subs	r3, #20
 80082fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3b04      	subs	r3, #4
 800830a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f06f 0202 	mvn.w	r2, #2
 8008312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3b20      	subs	r3, #32
 8008318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	0800832d 	.word	0x0800832d

0800832c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008332:	2300      	movs	r3, #0
 8008334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008336:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <prvTaskExitError+0x58>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833e:	d00b      	beq.n	8008358 <prvTaskExitError+0x2c>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	60fb      	str	r3, [r7, #12]
}
 8008352:	bf00      	nop
 8008354:	bf00      	nop
 8008356:	e7fd      	b.n	8008354 <prvTaskExitError+0x28>
	__asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	60bb      	str	r3, [r7, #8]
}
 800836a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800836c:	bf00      	nop
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0fc      	beq.n	800836e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008374:	bf00      	nop
 8008376:	bf00      	nop
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000060 	.word	0x20000060
	...

08008390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <pxCurrentTCBConst2>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6808      	ldr	r0, [r1, #0]
 8008396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	f380 8809 	msr	PSP, r0
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8811 	msr	BASEPRI, r0
 80083aa:	4770      	bx	lr
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst2>:
 80083b0:	20000b90 	.word	0x20000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083b8:	4808      	ldr	r0, [pc, #32]	@ (80083dc <prvPortStartFirstTask+0x24>)
 80083ba:	6800      	ldr	r0, [r0, #0]
 80083bc:	6800      	ldr	r0, [r0, #0]
 80083be:	f380 8808 	msr	MSP, r0
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8814 	msr	CONTROL, r0
 80083ca:	b662      	cpsie	i
 80083cc:	b661      	cpsie	f
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	df00      	svc	0
 80083d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083da:	bf00      	nop
 80083dc:	e000ed08 	.word	0xe000ed08

080083e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083e6:	4b47      	ldr	r3, [pc, #284]	@ (8008504 <xPortStartScheduler+0x124>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a47      	ldr	r2, [pc, #284]	@ (8008508 <xPortStartScheduler+0x128>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10b      	bne.n	8008408 <xPortStartScheduler+0x28>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60fb      	str	r3, [r7, #12]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008408:	4b3e      	ldr	r3, [pc, #248]	@ (8008504 <xPortStartScheduler+0x124>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a3f      	ldr	r2, [pc, #252]	@ (800850c <xPortStartScheduler+0x12c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d10b      	bne.n	800842a <xPortStartScheduler+0x4a>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	613b      	str	r3, [r7, #16]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800842a:	4b39      	ldr	r3, [pc, #228]	@ (8008510 <xPortStartScheduler+0x130>)
 800842c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	22ff      	movs	r2, #255	@ 0xff
 800843a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b31      	ldr	r3, [pc, #196]	@ (8008514 <xPortStartScheduler+0x134>)
 8008450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008452:	4b31      	ldr	r3, [pc, #196]	@ (8008518 <xPortStartScheduler+0x138>)
 8008454:	2207      	movs	r2, #7
 8008456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008458:	e009      	b.n	800846e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800845a:	4b2f      	ldr	r3, [pc, #188]	@ (8008518 <xPortStartScheduler+0x138>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3b01      	subs	r3, #1
 8008460:	4a2d      	ldr	r2, [pc, #180]	@ (8008518 <xPortStartScheduler+0x138>)
 8008462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	b2db      	uxtb	r3, r3
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	b2db      	uxtb	r3, r3
 800846c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008476:	2b80      	cmp	r3, #128	@ 0x80
 8008478:	d0ef      	beq.n	800845a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800847a:	4b27      	ldr	r3, [pc, #156]	@ (8008518 <xPortStartScheduler+0x138>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f1c3 0307 	rsb	r3, r3, #7
 8008482:	2b04      	cmp	r3, #4
 8008484:	d00b      	beq.n	800849e <xPortStartScheduler+0xbe>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	60bb      	str	r3, [r7, #8]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800849e:	4b1e      	ldr	r3, [pc, #120]	@ (8008518 <xPortStartScheduler+0x138>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008518 <xPortStartScheduler+0x138>)
 80084a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008518 <xPortStartScheduler+0x138>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80084b0:	4a19      	ldr	r2, [pc, #100]	@ (8008518 <xPortStartScheduler+0x138>)
 80084b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	b2da      	uxtb	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084bc:	4b17      	ldr	r3, [pc, #92]	@ (800851c <xPortStartScheduler+0x13c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a16      	ldr	r2, [pc, #88]	@ (800851c <xPortStartScheduler+0x13c>)
 80084c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80084c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084c8:	4b14      	ldr	r3, [pc, #80]	@ (800851c <xPortStartScheduler+0x13c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a13      	ldr	r2, [pc, #76]	@ (800851c <xPortStartScheduler+0x13c>)
 80084ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80084d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084d4:	f000 f8da 	bl	800868c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084d8:	4b11      	ldr	r3, [pc, #68]	@ (8008520 <xPortStartScheduler+0x140>)
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084de:	f000 f8f9 	bl	80086d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084e2:	4b10      	ldr	r3, [pc, #64]	@ (8008524 <xPortStartScheduler+0x144>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008524 <xPortStartScheduler+0x144>)
 80084e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80084ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084ee:	f7ff ff63 	bl	80083b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084f2:	f7ff f82d 	bl	8007550 <vTaskSwitchContext>
	prvTaskExitError();
 80084f6:	f7ff ff19 	bl	800832c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	e000ed00 	.word	0xe000ed00
 8008508:	410fc271 	.word	0x410fc271
 800850c:	410fc270 	.word	0x410fc270
 8008510:	e000e400 	.word	0xe000e400
 8008514:	200011bc 	.word	0x200011bc
 8008518:	200011c0 	.word	0x200011c0
 800851c:	e000ed20 	.word	0xe000ed20
 8008520:	20000060 	.word	0x20000060
 8008524:	e000ef34 	.word	0xe000ef34

08008528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008542:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <vPortEnterCritical+0x5c>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3301      	adds	r3, #1
 8008548:	4a0e      	ldr	r2, [pc, #56]	@ (8008584 <vPortEnterCritical+0x5c>)
 800854a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800854c:	4b0d      	ldr	r3, [pc, #52]	@ (8008584 <vPortEnterCritical+0x5c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d110      	bne.n	8008576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008554:	4b0c      	ldr	r3, [pc, #48]	@ (8008588 <vPortEnterCritical+0x60>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <vPortEnterCritical+0x4e>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	603b      	str	r3, [r7, #0]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <vPortEnterCritical+0x4a>
	}
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20000060 	.word	0x20000060
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008592:	4b12      	ldr	r3, [pc, #72]	@ (80085dc <vPortExitCritical+0x50>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10b      	bne.n	80085b2 <vPortExitCritical+0x26>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	607b      	str	r3, [r7, #4]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <vPortExitCritical+0x50>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	4a08      	ldr	r2, [pc, #32]	@ (80085dc <vPortExitCritical+0x50>)
 80085ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085bc:	4b07      	ldr	r3, [pc, #28]	@ (80085dc <vPortExitCritical+0x50>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d105      	bne.n	80085d0 <vPortExitCritical+0x44>
 80085c4:	2300      	movs	r3, #0
 80085c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	f383 8811 	msr	BASEPRI, r3
}
 80085ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	20000060 	.word	0x20000060

080085e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085e0:	f3ef 8009 	mrs	r0, PSP
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	4b15      	ldr	r3, [pc, #84]	@ (8008640 <pxCurrentTCBConst>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	f01e 0f10 	tst.w	lr, #16
 80085f0:	bf08      	it	eq
 80085f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fa:	6010      	str	r0, [r2, #0]
 80085fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008604:	f380 8811 	msr	BASEPRI, r0
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f7fe ff9e 	bl	8007550 <vTaskSwitchContext>
 8008614:	f04f 0000 	mov.w	r0, #0
 8008618:	f380 8811 	msr	BASEPRI, r0
 800861c:	bc09      	pop	{r0, r3}
 800861e:	6819      	ldr	r1, [r3, #0]
 8008620:	6808      	ldr	r0, [r1, #0]
 8008622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008626:	f01e 0f10 	tst.w	lr, #16
 800862a:	bf08      	it	eq
 800862c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008630:	f380 8809 	msr	PSP, r0
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	f3af 8000 	nop.w

08008640 <pxCurrentTCBConst>:
 8008640:	20000b90 	.word	0x20000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop

08008648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	607b      	str	r3, [r7, #4]
}
 8008660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008662:	f7fe febb 	bl	80073dc <xTaskIncrementTick>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800866c:	4b06      	ldr	r3, [pc, #24]	@ (8008688 <xPortSysTickHandler+0x40>)
 800866e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008690:	4b0b      	ldr	r3, [pc, #44]	@ (80086c0 <vPortSetupTimerInterrupt+0x34>)
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008696:	4b0b      	ldr	r3, [pc, #44]	@ (80086c4 <vPortSetupTimerInterrupt+0x38>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800869c:	4b0a      	ldr	r3, [pc, #40]	@ (80086c8 <vPortSetupTimerInterrupt+0x3c>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0a      	ldr	r2, [pc, #40]	@ (80086cc <vPortSetupTimerInterrupt+0x40>)
 80086a2:	fba2 2303 	umull	r2, r3, r2, r3
 80086a6:	099b      	lsrs	r3, r3, #6
 80086a8:	4a09      	ldr	r2, [pc, #36]	@ (80086d0 <vPortSetupTimerInterrupt+0x44>)
 80086aa:	3b01      	subs	r3, #1
 80086ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ae:	4b04      	ldr	r3, [pc, #16]	@ (80086c0 <vPortSetupTimerInterrupt+0x34>)
 80086b0:	2207      	movs	r2, #7
 80086b2:	601a      	str	r2, [r3, #0]
}
 80086b4:	bf00      	nop
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	e000e010 	.word	0xe000e010
 80086c4:	e000e018 	.word	0xe000e018
 80086c8:	20000054 	.word	0x20000054
 80086cc:	10624dd3 	.word	0x10624dd3
 80086d0:	e000e014 	.word	0xe000e014

080086d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80086e4 <vPortEnableVFP+0x10>
 80086d8:	6801      	ldr	r1, [r0, #0]
 80086da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80086de:	6001      	str	r1, [r0, #0]
 80086e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086e2:	bf00      	nop
 80086e4:	e000ed88 	.word	0xe000ed88

080086e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086ee:	f3ef 8305 	mrs	r3, IPSR
 80086f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b0f      	cmp	r3, #15
 80086f8:	d915      	bls.n	8008726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <vPortValidateInterruptPriority+0x74>)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	4413      	add	r3, r2
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008704:	4b16      	ldr	r3, [pc, #88]	@ (8008760 <vPortValidateInterruptPriority+0x78>)
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	7afa      	ldrb	r2, [r7, #11]
 800870a:	429a      	cmp	r2, r3
 800870c:	d20b      	bcs.n	8008726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	607b      	str	r3, [r7, #4]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008726:	4b0f      	ldr	r3, [pc, #60]	@ (8008764 <vPortValidateInterruptPriority+0x7c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800872e:	4b0e      	ldr	r3, [pc, #56]	@ (8008768 <vPortValidateInterruptPriority+0x80>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d90b      	bls.n	800874e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	603b      	str	r3, [r7, #0]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vPortValidateInterruptPriority+0x62>
	}
 800874e:	bf00      	nop
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	e000e3f0 	.word	0xe000e3f0
 8008760:	200011bc 	.word	0x200011bc
 8008764:	e000ed0c 	.word	0xe000ed0c
 8008768:	200011c0 	.word	0x200011c0

0800876c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008778:	f7fe fd62 	bl	8007240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800877c:	4b5c      	ldr	r3, [pc, #368]	@ (80088f0 <pvPortMalloc+0x184>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008784:	f000 f924 	bl	80089d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008788:	4b5a      	ldr	r3, [pc, #360]	@ (80088f4 <pvPortMalloc+0x188>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4013      	ands	r3, r2
 8008790:	2b00      	cmp	r3, #0
 8008792:	f040 8095 	bne.w	80088c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800879c:	2208      	movs	r2, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d015      	beq.n	80087da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f023 0307 	bic.w	r3, r3, #7
 80087b4:	3308      	adds	r3, #8
 80087b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00b      	beq.n	80087da <pvPortMalloc+0x6e>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	617b      	str	r3, [r7, #20]
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop
 80087d8:	e7fd      	b.n	80087d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d06f      	beq.n	80088c0 <pvPortMalloc+0x154>
 80087e0:	4b45      	ldr	r3, [pc, #276]	@ (80088f8 <pvPortMalloc+0x18c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d86a      	bhi.n	80088c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087ea:	4b44      	ldr	r3, [pc, #272]	@ (80088fc <pvPortMalloc+0x190>)
 80087ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087ee:	4b43      	ldr	r3, [pc, #268]	@ (80088fc <pvPortMalloc+0x190>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087f4:	e004      	b.n	8008800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d903      	bls.n	8008812 <pvPortMalloc+0xa6>
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1f1      	bne.n	80087f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008812:	4b37      	ldr	r3, [pc, #220]	@ (80088f0 <pvPortMalloc+0x184>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008818:	429a      	cmp	r2, r3
 800881a:	d051      	beq.n	80088c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2208      	movs	r2, #8
 8008822:	4413      	add	r3, r2
 8008824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	1ad2      	subs	r2, r2, r3
 8008836:	2308      	movs	r3, #8
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	429a      	cmp	r2, r3
 800883c:	d920      	bls.n	8008880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800883e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4413      	add	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <pvPortMalloc+0xfc>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800887a:	69b8      	ldr	r0, [r7, #24]
 800887c:	f000 f90a 	bl	8008a94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008880:	4b1d      	ldr	r3, [pc, #116]	@ (80088f8 <pvPortMalloc+0x18c>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	4a1b      	ldr	r2, [pc, #108]	@ (80088f8 <pvPortMalloc+0x18c>)
 800888c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800888e:	4b1a      	ldr	r3, [pc, #104]	@ (80088f8 <pvPortMalloc+0x18c>)
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	4b1b      	ldr	r3, [pc, #108]	@ (8008900 <pvPortMalloc+0x194>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d203      	bcs.n	80088a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800889a:	4b17      	ldr	r3, [pc, #92]	@ (80088f8 <pvPortMalloc+0x18c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <pvPortMalloc+0x194>)
 80088a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	4b13      	ldr	r3, [pc, #76]	@ (80088f4 <pvPortMalloc+0x188>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	431a      	orrs	r2, r3
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088b6:	4b13      	ldr	r3, [pc, #76]	@ (8008904 <pvPortMalloc+0x198>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3301      	adds	r3, #1
 80088bc:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <pvPortMalloc+0x198>)
 80088be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088c0:	f7fe fccc 	bl	800725c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <pvPortMalloc+0x17a>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <pvPortMalloc+0x176>
	return pvReturn;
 80088e6:	69fb      	ldr	r3, [r7, #28]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3728      	adds	r7, #40	@ 0x28
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	2000622c 	.word	0x2000622c
 80088f4:	20006240 	.word	0x20006240
 80088f8:	20006230 	.word	0x20006230
 80088fc:	20006224 	.word	0x20006224
 8008900:	20006234 	.word	0x20006234
 8008904:	20006238 	.word	0x20006238

08008908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d04f      	beq.n	80089ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800891a:	2308      	movs	r3, #8
 800891c:	425b      	negs	r3, r3
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4b25      	ldr	r3, [pc, #148]	@ (80089c4 <vPortFree+0xbc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4013      	ands	r3, r2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <vPortFree+0x46>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	60fb      	str	r3, [r7, #12]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00b      	beq.n	800896e <vPortFree+0x66>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	60bb      	str	r3, [r7, #8]
}
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	685a      	ldr	r2, [r3, #4]
 8008972:	4b14      	ldr	r3, [pc, #80]	@ (80089c4 <vPortFree+0xbc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4013      	ands	r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01e      	beq.n	80089ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d11a      	bne.n	80089ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	4b0e      	ldr	r3, [pc, #56]	@ (80089c4 <vPortFree+0xbc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	43db      	mvns	r3, r3
 800898e:	401a      	ands	r2, r3
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008994:	f7fe fc54 	bl	8007240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <vPortFree+0xc0>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	4a09      	ldr	r2, [pc, #36]	@ (80089c8 <vPortFree+0xc0>)
 80089a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089a6:	6938      	ldr	r0, [r7, #16]
 80089a8:	f000 f874 	bl	8008a94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <vPortFree+0xc4>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a06      	ldr	r2, [pc, #24]	@ (80089cc <vPortFree+0xc4>)
 80089b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089b6:	f7fe fc51 	bl	800725c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20006240 	.word	0x20006240
 80089c8:	20006230 	.word	0x20006230
 80089cc:	2000623c 	.word	0x2000623c

080089d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089d6:	f245 0360 	movw	r3, #20576	@ 0x5060
 80089da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089dc:	4b27      	ldr	r3, [pc, #156]	@ (8008a7c <prvHeapInit+0xac>)
 80089de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00c      	beq.n	8008a04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3307      	adds	r3, #7
 80089ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	4a1f      	ldr	r2, [pc, #124]	@ (8008a7c <prvHeapInit+0xac>)
 8008a00:	4413      	add	r3, r2
 8008a02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a08:	4a1d      	ldr	r2, [pc, #116]	@ (8008a80 <prvHeapInit+0xb0>)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008a80 <prvHeapInit+0xb0>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	4413      	add	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1a9b      	subs	r3, r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0307 	bic.w	r3, r3, #7
 8008a2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	@ (8008a84 <prvHeapInit+0xb4>)
 8008a30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a32:	4b14      	ldr	r3, [pc, #80]	@ (8008a84 <prvHeapInit+0xb4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a3a:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <prvHeapInit+0xb4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	1ad2      	subs	r2, r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a50:	4b0c      	ldr	r3, [pc, #48]	@ (8008a84 <prvHeapInit+0xb4>)
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008a88 <prvHeapInit+0xb8>)
 8008a5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <prvHeapInit+0xbc>)
 8008a66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a68:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <prvHeapInit+0xc0>)
 8008a6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a6e:	601a      	str	r2, [r3, #0]
}
 8008a70:	bf00      	nop
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	200011c4 	.word	0x200011c4
 8008a80:	20006224 	.word	0x20006224
 8008a84:	2000622c 	.word	0x2000622c
 8008a88:	20006234 	.word	0x20006234
 8008a8c:	20006230 	.word	0x20006230
 8008a90:	20006240 	.word	0x20006240

08008a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a9c:	4b28      	ldr	r3, [pc, #160]	@ (8008b40 <prvInsertBlockIntoFreeList+0xac>)
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e002      	b.n	8008aa8 <prvInsertBlockIntoFreeList+0x14>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d8f7      	bhi.n	8008aa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	4413      	add	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d108      	bne.n	8008ad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	441a      	add	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	441a      	add	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d118      	bne.n	8008b1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <prvInsertBlockIntoFreeList+0xb0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d00d      	beq.n	8008b12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685a      	ldr	r2, [r3, #4]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	441a      	add	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e008      	b.n	8008b24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b12:	4b0c      	ldr	r3, [pc, #48]	@ (8008b44 <prvInsertBlockIntoFreeList+0xb0>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	e003      	b.n	8008b24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d002      	beq.n	8008b32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	20006224 	.word	0x20006224
 8008b44:	2000622c 	.word	0x2000622c

08008b48 <__cvt>:
 8008b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	ec57 6b10 	vmov	r6, r7, d0
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4619      	mov	r1, r3
 8008b56:	463b      	mov	r3, r7
 8008b58:	bfbb      	ittet	lt
 8008b5a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008b5e:	461f      	movlt	r7, r3
 8008b60:	2300      	movge	r3, #0
 8008b62:	232d      	movlt	r3, #45	@ 0x2d
 8008b64:	700b      	strb	r3, [r1, #0]
 8008b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b68:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008b6c:	4691      	mov	r9, r2
 8008b6e:	f023 0820 	bic.w	r8, r3, #32
 8008b72:	bfbc      	itt	lt
 8008b74:	4632      	movlt	r2, r6
 8008b76:	4616      	movlt	r6, r2
 8008b78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b7c:	d005      	beq.n	8008b8a <__cvt+0x42>
 8008b7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b82:	d100      	bne.n	8008b86 <__cvt+0x3e>
 8008b84:	3401      	adds	r4, #1
 8008b86:	2102      	movs	r1, #2
 8008b88:	e000      	b.n	8008b8c <__cvt+0x44>
 8008b8a:	2103      	movs	r1, #3
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	ab02      	add	r3, sp, #8
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	ec47 6b10 	vmov	d0, r6, r7
 8008b98:	4653      	mov	r3, sl
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	f001 f804 	bl	8009ba8 <_dtoa_r>
 8008ba0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	d119      	bne.n	8008bdc <__cvt+0x94>
 8008ba8:	f019 0f01 	tst.w	r9, #1
 8008bac:	d00e      	beq.n	8008bcc <__cvt+0x84>
 8008bae:	eb00 0904 	add.w	r9, r0, r4
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	4639      	mov	r1, r7
 8008bba:	f7f7 ffb5 	bl	8000b28 <__aeabi_dcmpeq>
 8008bbe:	b108      	cbz	r0, 8008bc4 <__cvt+0x7c>
 8008bc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bc4:	2230      	movs	r2, #48	@ 0x30
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	454b      	cmp	r3, r9
 8008bca:	d31e      	bcc.n	8008c0a <__cvt+0xc2>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bd0:	1b5b      	subs	r3, r3, r5
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	b004      	add	sp, #16
 8008bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008be0:	eb00 0904 	add.w	r9, r0, r4
 8008be4:	d1e5      	bne.n	8008bb2 <__cvt+0x6a>
 8008be6:	7803      	ldrb	r3, [r0, #0]
 8008be8:	2b30      	cmp	r3, #48	@ 0x30
 8008bea:	d10a      	bne.n	8008c02 <__cvt+0xba>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	f7f7 ff98 	bl	8000b28 <__aeabi_dcmpeq>
 8008bf8:	b918      	cbnz	r0, 8008c02 <__cvt+0xba>
 8008bfa:	f1c4 0401 	rsb	r4, r4, #1
 8008bfe:	f8ca 4000 	str.w	r4, [sl]
 8008c02:	f8da 3000 	ldr.w	r3, [sl]
 8008c06:	4499      	add	r9, r3
 8008c08:	e7d3      	b.n	8008bb2 <__cvt+0x6a>
 8008c0a:	1c59      	adds	r1, r3, #1
 8008c0c:	9103      	str	r1, [sp, #12]
 8008c0e:	701a      	strb	r2, [r3, #0]
 8008c10:	e7d9      	b.n	8008bc6 <__cvt+0x7e>

08008c12 <__exponent>:
 8008c12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c14:	2900      	cmp	r1, #0
 8008c16:	bfba      	itte	lt
 8008c18:	4249      	neglt	r1, r1
 8008c1a:	232d      	movlt	r3, #45	@ 0x2d
 8008c1c:	232b      	movge	r3, #43	@ 0x2b
 8008c1e:	2909      	cmp	r1, #9
 8008c20:	7002      	strb	r2, [r0, #0]
 8008c22:	7043      	strb	r3, [r0, #1]
 8008c24:	dd29      	ble.n	8008c7a <__exponent+0x68>
 8008c26:	f10d 0307 	add.w	r3, sp, #7
 8008c2a:	461d      	mov	r5, r3
 8008c2c:	270a      	movs	r7, #10
 8008c2e:	461a      	mov	r2, r3
 8008c30:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c34:	fb07 1416 	mls	r4, r7, r6, r1
 8008c38:	3430      	adds	r4, #48	@ 0x30
 8008c3a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c3e:	460c      	mov	r4, r1
 8008c40:	2c63      	cmp	r4, #99	@ 0x63
 8008c42:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008c46:	4631      	mov	r1, r6
 8008c48:	dcf1      	bgt.n	8008c2e <__exponent+0x1c>
 8008c4a:	3130      	adds	r1, #48	@ 0x30
 8008c4c:	1e94      	subs	r4, r2, #2
 8008c4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c52:	1c41      	adds	r1, r0, #1
 8008c54:	4623      	mov	r3, r4
 8008c56:	42ab      	cmp	r3, r5
 8008c58:	d30a      	bcc.n	8008c70 <__exponent+0x5e>
 8008c5a:	f10d 0309 	add.w	r3, sp, #9
 8008c5e:	1a9b      	subs	r3, r3, r2
 8008c60:	42ac      	cmp	r4, r5
 8008c62:	bf88      	it	hi
 8008c64:	2300      	movhi	r3, #0
 8008c66:	3302      	adds	r3, #2
 8008c68:	4403      	add	r3, r0
 8008c6a:	1a18      	subs	r0, r3, r0
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c70:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c74:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c78:	e7ed      	b.n	8008c56 <__exponent+0x44>
 8008c7a:	2330      	movs	r3, #48	@ 0x30
 8008c7c:	3130      	adds	r1, #48	@ 0x30
 8008c7e:	7083      	strb	r3, [r0, #2]
 8008c80:	70c1      	strb	r1, [r0, #3]
 8008c82:	1d03      	adds	r3, r0, #4
 8008c84:	e7f1      	b.n	8008c6a <__exponent+0x58>
	...

08008c88 <_printf_float>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	b08d      	sub	sp, #52	@ 0x34
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c94:	4616      	mov	r6, r2
 8008c96:	461f      	mov	r7, r3
 8008c98:	4605      	mov	r5, r0
 8008c9a:	f000 fe17 	bl	80098cc <_localeconv_r>
 8008c9e:	6803      	ldr	r3, [r0, #0]
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f7 fb14 	bl	80002d0 <strlen>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cac:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb0:	9005      	str	r0, [sp, #20]
 8008cb2:	3307      	adds	r3, #7
 8008cb4:	f023 0307 	bic.w	r3, r3, #7
 8008cb8:	f103 0208 	add.w	r2, r3, #8
 8008cbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8008cc4:	f8c8 2000 	str.w	r2, [r8]
 8008cc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ccc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008cd0:	9307      	str	r3, [sp, #28]
 8008cd2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cd6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cde:	4b9c      	ldr	r3, [pc, #624]	@ (8008f50 <_printf_float+0x2c8>)
 8008ce0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008ce4:	f7f7 ff52 	bl	8000b8c <__aeabi_dcmpun>
 8008ce8:	bb70      	cbnz	r0, 8008d48 <_printf_float+0xc0>
 8008cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cee:	4b98      	ldr	r3, [pc, #608]	@ (8008f50 <_printf_float+0x2c8>)
 8008cf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cf4:	f7f7 ff2c 	bl	8000b50 <__aeabi_dcmple>
 8008cf8:	bb30      	cbnz	r0, 8008d48 <_printf_float+0xc0>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 ff1b 	bl	8000b3c <__aeabi_dcmplt>
 8008d06:	b110      	cbz	r0, 8008d0e <_printf_float+0x86>
 8008d08:	232d      	movs	r3, #45	@ 0x2d
 8008d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d0e:	4a91      	ldr	r2, [pc, #580]	@ (8008f54 <_printf_float+0x2cc>)
 8008d10:	4b91      	ldr	r3, [pc, #580]	@ (8008f58 <_printf_float+0x2d0>)
 8008d12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d16:	bf8c      	ite	hi
 8008d18:	4690      	movhi	r8, r2
 8008d1a:	4698      	movls	r8, r3
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	f02b 0304 	bic.w	r3, fp, #4
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	f04f 0900 	mov.w	r9, #0
 8008d2a:	9700      	str	r7, [sp, #0]
 8008d2c:	4633      	mov	r3, r6
 8008d2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d30:	4621      	mov	r1, r4
 8008d32:	4628      	mov	r0, r5
 8008d34:	f000 f9d2 	bl	80090dc <_printf_common>
 8008d38:	3001      	adds	r0, #1
 8008d3a:	f040 808d 	bne.w	8008e58 <_printf_float+0x1d0>
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d42:	b00d      	add	sp, #52	@ 0x34
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4649      	mov	r1, r9
 8008d50:	f7f7 ff1c 	bl	8000b8c <__aeabi_dcmpun>
 8008d54:	b140      	cbz	r0, 8008d68 <_printf_float+0xe0>
 8008d56:	464b      	mov	r3, r9
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	bfbc      	itt	lt
 8008d5c:	232d      	movlt	r3, #45	@ 0x2d
 8008d5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d62:	4a7e      	ldr	r2, [pc, #504]	@ (8008f5c <_printf_float+0x2d4>)
 8008d64:	4b7e      	ldr	r3, [pc, #504]	@ (8008f60 <_printf_float+0x2d8>)
 8008d66:	e7d4      	b.n	8008d12 <_printf_float+0x8a>
 8008d68:	6863      	ldr	r3, [r4, #4]
 8008d6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008d6e:	9206      	str	r2, [sp, #24]
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	d13b      	bne.n	8008dec <_printf_float+0x164>
 8008d74:	2306      	movs	r3, #6
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d84:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d88:	ab09      	add	r3, sp, #36	@ 0x24
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	6861      	ldr	r1, [r4, #4]
 8008d8e:	ec49 8b10 	vmov	d0, r8, r9
 8008d92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d96:	4628      	mov	r0, r5
 8008d98:	f7ff fed6 	bl	8008b48 <__cvt>
 8008d9c:	9b06      	ldr	r3, [sp, #24]
 8008d9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008da0:	2b47      	cmp	r3, #71	@ 0x47
 8008da2:	4680      	mov	r8, r0
 8008da4:	d129      	bne.n	8008dfa <_printf_float+0x172>
 8008da6:	1cc8      	adds	r0, r1, #3
 8008da8:	db02      	blt.n	8008db0 <_printf_float+0x128>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	4299      	cmp	r1, r3
 8008dae:	dd41      	ble.n	8008e34 <_printf_float+0x1ac>
 8008db0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008db4:	fa5f fa8a 	uxtb.w	sl, sl
 8008db8:	3901      	subs	r1, #1
 8008dba:	4652      	mov	r2, sl
 8008dbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008dc0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dc2:	f7ff ff26 	bl	8008c12 <__exponent>
 8008dc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dc8:	1813      	adds	r3, r2, r0
 8008dca:	2a01      	cmp	r2, #1
 8008dcc:	4681      	mov	r9, r0
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	dc02      	bgt.n	8008dd8 <_printf_float+0x150>
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	07d2      	lsls	r2, r2, #31
 8008dd6:	d501      	bpl.n	8008ddc <_printf_float+0x154>
 8008dd8:	3301      	adds	r3, #1
 8008dda:	6123      	str	r3, [r4, #16]
 8008ddc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d0a2      	beq.n	8008d2a <_printf_float+0xa2>
 8008de4:	232d      	movs	r3, #45	@ 0x2d
 8008de6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dea:	e79e      	b.n	8008d2a <_printf_float+0xa2>
 8008dec:	9a06      	ldr	r2, [sp, #24]
 8008dee:	2a47      	cmp	r2, #71	@ 0x47
 8008df0:	d1c2      	bne.n	8008d78 <_printf_float+0xf0>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1c0      	bne.n	8008d78 <_printf_float+0xf0>
 8008df6:	2301      	movs	r3, #1
 8008df8:	e7bd      	b.n	8008d76 <_printf_float+0xee>
 8008dfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dfe:	d9db      	bls.n	8008db8 <_printf_float+0x130>
 8008e00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e04:	d118      	bne.n	8008e38 <_printf_float+0x1b0>
 8008e06:	2900      	cmp	r1, #0
 8008e08:	6863      	ldr	r3, [r4, #4]
 8008e0a:	dd0b      	ble.n	8008e24 <_printf_float+0x19c>
 8008e0c:	6121      	str	r1, [r4, #16]
 8008e0e:	b913      	cbnz	r3, 8008e16 <_printf_float+0x18e>
 8008e10:	6822      	ldr	r2, [r4, #0]
 8008e12:	07d0      	lsls	r0, r2, #31
 8008e14:	d502      	bpl.n	8008e1c <_printf_float+0x194>
 8008e16:	3301      	adds	r3, #1
 8008e18:	440b      	add	r3, r1
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e1e:	f04f 0900 	mov.w	r9, #0
 8008e22:	e7db      	b.n	8008ddc <_printf_float+0x154>
 8008e24:	b913      	cbnz	r3, 8008e2c <_printf_float+0x1a4>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	07d2      	lsls	r2, r2, #31
 8008e2a:	d501      	bpl.n	8008e30 <_printf_float+0x1a8>
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	e7f4      	b.n	8008e1a <_printf_float+0x192>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e7f2      	b.n	8008e1a <_printf_float+0x192>
 8008e34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	db05      	blt.n	8008e4a <_printf_float+0x1c2>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	6121      	str	r1, [r4, #16]
 8008e42:	07d8      	lsls	r0, r3, #31
 8008e44:	d5ea      	bpl.n	8008e1c <_printf_float+0x194>
 8008e46:	1c4b      	adds	r3, r1, #1
 8008e48:	e7e7      	b.n	8008e1a <_printf_float+0x192>
 8008e4a:	2900      	cmp	r1, #0
 8008e4c:	bfd4      	ite	le
 8008e4e:	f1c1 0202 	rsble	r2, r1, #2
 8008e52:	2201      	movgt	r2, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	e7e0      	b.n	8008e1a <_printf_float+0x192>
 8008e58:	6823      	ldr	r3, [r4, #0]
 8008e5a:	055a      	lsls	r2, r3, #21
 8008e5c:	d407      	bmi.n	8008e6e <_printf_float+0x1e6>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	4642      	mov	r2, r8
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d12b      	bne.n	8008ec4 <_printf_float+0x23c>
 8008e6c:	e767      	b.n	8008d3e <_printf_float+0xb6>
 8008e6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e72:	f240 80dd 	bls.w	8009030 <_printf_float+0x3a8>
 8008e76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f7f7 fe53 	bl	8000b28 <__aeabi_dcmpeq>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d033      	beq.n	8008eee <_printf_float+0x266>
 8008e86:	4a37      	ldr	r2, [pc, #220]	@ (8008f64 <_printf_float+0x2dc>)
 8008e88:	2301      	movs	r3, #1
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f af54 	beq.w	8008d3e <_printf_float+0xb6>
 8008e96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e9a:	4543      	cmp	r3, r8
 8008e9c:	db02      	blt.n	8008ea4 <_printf_float+0x21c>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	07d8      	lsls	r0, r3, #31
 8008ea2:	d50f      	bpl.n	8008ec4 <_printf_float+0x23c>
 8008ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af45 	beq.w	8008d3e <_printf_float+0xb6>
 8008eb4:	f04f 0900 	mov.w	r9, #0
 8008eb8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ebc:	f104 0a1a 	add.w	sl, r4, #26
 8008ec0:	45c8      	cmp	r8, r9
 8008ec2:	dc09      	bgt.n	8008ed8 <_printf_float+0x250>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	079b      	lsls	r3, r3, #30
 8008ec8:	f100 8103 	bmi.w	80090d2 <_printf_float+0x44a>
 8008ecc:	68e0      	ldr	r0, [r4, #12]
 8008ece:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed0:	4298      	cmp	r0, r3
 8008ed2:	bfb8      	it	lt
 8008ed4:	4618      	movlt	r0, r3
 8008ed6:	e734      	b.n	8008d42 <_printf_float+0xba>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4652      	mov	r2, sl
 8008edc:	4631      	mov	r1, r6
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b8      	blx	r7
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f43f af2b 	beq.w	8008d3e <_printf_float+0xb6>
 8008ee8:	f109 0901 	add.w	r9, r9, #1
 8008eec:	e7e8      	b.n	8008ec0 <_printf_float+0x238>
 8008eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dc39      	bgt.n	8008f68 <_printf_float+0x2e0>
 8008ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f64 <_printf_float+0x2dc>)
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	f43f af1d 	beq.w	8008d3e <_printf_float+0xb6>
 8008f04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f08:	ea59 0303 	orrs.w	r3, r9, r3
 8008f0c:	d102      	bne.n	8008f14 <_printf_float+0x28c>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	07d9      	lsls	r1, r3, #31
 8008f12:	d5d7      	bpl.n	8008ec4 <_printf_float+0x23c>
 8008f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af0d 	beq.w	8008d3e <_printf_float+0xb6>
 8008f24:	f04f 0a00 	mov.w	sl, #0
 8008f28:	f104 0b1a 	add.w	fp, r4, #26
 8008f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2e:	425b      	negs	r3, r3
 8008f30:	4553      	cmp	r3, sl
 8008f32:	dc01      	bgt.n	8008f38 <_printf_float+0x2b0>
 8008f34:	464b      	mov	r3, r9
 8008f36:	e793      	b.n	8008e60 <_printf_float+0x1d8>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	465a      	mov	r2, fp
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	4628      	mov	r0, r5
 8008f40:	47b8      	blx	r7
 8008f42:	3001      	adds	r0, #1
 8008f44:	f43f aefb 	beq.w	8008d3e <_printf_float+0xb6>
 8008f48:	f10a 0a01 	add.w	sl, sl, #1
 8008f4c:	e7ee      	b.n	8008f2c <_printf_float+0x2a4>
 8008f4e:	bf00      	nop
 8008f50:	7fefffff 	.word	0x7fefffff
 8008f54:	0800bfa8 	.word	0x0800bfa8
 8008f58:	0800bfa4 	.word	0x0800bfa4
 8008f5c:	0800bfb0 	.word	0x0800bfb0
 8008f60:	0800bfac 	.word	0x0800bfac
 8008f64:	0800bfb4 	.word	0x0800bfb4
 8008f68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008f6e:	4553      	cmp	r3, sl
 8008f70:	bfa8      	it	ge
 8008f72:	4653      	movge	r3, sl
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	4699      	mov	r9, r3
 8008f78:	dc36      	bgt.n	8008fe8 <_printf_float+0x360>
 8008f7a:	f04f 0b00 	mov.w	fp, #0
 8008f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f82:	f104 021a 	add.w	r2, r4, #26
 8008f86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f88:	9306      	str	r3, [sp, #24]
 8008f8a:	eba3 0309 	sub.w	r3, r3, r9
 8008f8e:	455b      	cmp	r3, fp
 8008f90:	dc31      	bgt.n	8008ff6 <_printf_float+0x36e>
 8008f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f94:	459a      	cmp	sl, r3
 8008f96:	dc3a      	bgt.n	800900e <_printf_float+0x386>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	07da      	lsls	r2, r3, #31
 8008f9c:	d437      	bmi.n	800900e <_printf_float+0x386>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa0:	ebaa 0903 	sub.w	r9, sl, r3
 8008fa4:	9b06      	ldr	r3, [sp, #24]
 8008fa6:	ebaa 0303 	sub.w	r3, sl, r3
 8008faa:	4599      	cmp	r9, r3
 8008fac:	bfa8      	it	ge
 8008fae:	4699      	movge	r9, r3
 8008fb0:	f1b9 0f00 	cmp.w	r9, #0
 8008fb4:	dc33      	bgt.n	800901e <_printf_float+0x396>
 8008fb6:	f04f 0800 	mov.w	r8, #0
 8008fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fbe:	f104 0b1a 	add.w	fp, r4, #26
 8008fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc4:	ebaa 0303 	sub.w	r3, sl, r3
 8008fc8:	eba3 0309 	sub.w	r3, r3, r9
 8008fcc:	4543      	cmp	r3, r8
 8008fce:	f77f af79 	ble.w	8008ec4 <_printf_float+0x23c>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	465a      	mov	r2, fp
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b8      	blx	r7
 8008fdc:	3001      	adds	r0, #1
 8008fde:	f43f aeae 	beq.w	8008d3e <_printf_float+0xb6>
 8008fe2:	f108 0801 	add.w	r8, r8, #1
 8008fe6:	e7ec      	b.n	8008fc2 <_printf_float+0x33a>
 8008fe8:	4642      	mov	r2, r8
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d1c2      	bne.n	8008f7a <_printf_float+0x2f2>
 8008ff4:	e6a3      	b.n	8008d3e <_printf_float+0xb6>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4631      	mov	r1, r6
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	9206      	str	r2, [sp, #24]
 8008ffe:	47b8      	blx	r7
 8009000:	3001      	adds	r0, #1
 8009002:	f43f ae9c 	beq.w	8008d3e <_printf_float+0xb6>
 8009006:	9a06      	ldr	r2, [sp, #24]
 8009008:	f10b 0b01 	add.w	fp, fp, #1
 800900c:	e7bb      	b.n	8008f86 <_printf_float+0x2fe>
 800900e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	47b8      	blx	r7
 8009018:	3001      	adds	r0, #1
 800901a:	d1c0      	bne.n	8008f9e <_printf_float+0x316>
 800901c:	e68f      	b.n	8008d3e <_printf_float+0xb6>
 800901e:	9a06      	ldr	r2, [sp, #24]
 8009020:	464b      	mov	r3, r9
 8009022:	4442      	add	r2, r8
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d1c3      	bne.n	8008fb6 <_printf_float+0x32e>
 800902e:	e686      	b.n	8008d3e <_printf_float+0xb6>
 8009030:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009034:	f1ba 0f01 	cmp.w	sl, #1
 8009038:	dc01      	bgt.n	800903e <_printf_float+0x3b6>
 800903a:	07db      	lsls	r3, r3, #31
 800903c:	d536      	bpl.n	80090ac <_printf_float+0x424>
 800903e:	2301      	movs	r3, #1
 8009040:	4642      	mov	r2, r8
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	f43f ae78 	beq.w	8008d3e <_printf_float+0xb6>
 800904e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	f43f ae70 	beq.w	8008d3e <_printf_float+0xb6>
 800905e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009062:	2200      	movs	r2, #0
 8009064:	2300      	movs	r3, #0
 8009066:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800906a:	f7f7 fd5d 	bl	8000b28 <__aeabi_dcmpeq>
 800906e:	b9c0      	cbnz	r0, 80090a2 <_printf_float+0x41a>
 8009070:	4653      	mov	r3, sl
 8009072:	f108 0201 	add.w	r2, r8, #1
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	d10c      	bne.n	800909a <_printf_float+0x412>
 8009080:	e65d      	b.n	8008d3e <_printf_float+0xb6>
 8009082:	2301      	movs	r3, #1
 8009084:	465a      	mov	r2, fp
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae56 	beq.w	8008d3e <_printf_float+0xb6>
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	45d0      	cmp	r8, sl
 8009098:	dbf3      	blt.n	8009082 <_printf_float+0x3fa>
 800909a:	464b      	mov	r3, r9
 800909c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090a0:	e6df      	b.n	8008e62 <_printf_float+0x1da>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	f104 0b1a 	add.w	fp, r4, #26
 80090aa:	e7f4      	b.n	8009096 <_printf_float+0x40e>
 80090ac:	2301      	movs	r3, #1
 80090ae:	4642      	mov	r2, r8
 80090b0:	e7e1      	b.n	8009076 <_printf_float+0x3ee>
 80090b2:	2301      	movs	r3, #1
 80090b4:	464a      	mov	r2, r9
 80090b6:	4631      	mov	r1, r6
 80090b8:	4628      	mov	r0, r5
 80090ba:	47b8      	blx	r7
 80090bc:	3001      	adds	r0, #1
 80090be:	f43f ae3e 	beq.w	8008d3e <_printf_float+0xb6>
 80090c2:	f108 0801 	add.w	r8, r8, #1
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090ca:	1a5b      	subs	r3, r3, r1
 80090cc:	4543      	cmp	r3, r8
 80090ce:	dcf0      	bgt.n	80090b2 <_printf_float+0x42a>
 80090d0:	e6fc      	b.n	8008ecc <_printf_float+0x244>
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	f104 0919 	add.w	r9, r4, #25
 80090da:	e7f4      	b.n	80090c6 <_printf_float+0x43e>

080090dc <_printf_common>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	4616      	mov	r6, r2
 80090e2:	4698      	mov	r8, r3
 80090e4:	688a      	ldr	r2, [r1, #8]
 80090e6:	690b      	ldr	r3, [r1, #16]
 80090e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bfb8      	it	lt
 80090f0:	4613      	movlt	r3, r2
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090f8:	4607      	mov	r7, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	b10a      	cbz	r2, 8009102 <_printf_common+0x26>
 80090fe:	3301      	adds	r3, #1
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	0699      	lsls	r1, r3, #26
 8009106:	bf42      	ittt	mi
 8009108:	6833      	ldrmi	r3, [r6, #0]
 800910a:	3302      	addmi	r3, #2
 800910c:	6033      	strmi	r3, [r6, #0]
 800910e:	6825      	ldr	r5, [r4, #0]
 8009110:	f015 0506 	ands.w	r5, r5, #6
 8009114:	d106      	bne.n	8009124 <_printf_common+0x48>
 8009116:	f104 0a19 	add.w	sl, r4, #25
 800911a:	68e3      	ldr	r3, [r4, #12]
 800911c:	6832      	ldr	r2, [r6, #0]
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	42ab      	cmp	r3, r5
 8009122:	dc26      	bgt.n	8009172 <_printf_common+0x96>
 8009124:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	3b00      	subs	r3, #0
 800912c:	bf18      	it	ne
 800912e:	2301      	movne	r3, #1
 8009130:	0692      	lsls	r2, r2, #26
 8009132:	d42b      	bmi.n	800918c <_printf_common+0xb0>
 8009134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009138:	4641      	mov	r1, r8
 800913a:	4638      	mov	r0, r7
 800913c:	47c8      	blx	r9
 800913e:	3001      	adds	r0, #1
 8009140:	d01e      	beq.n	8009180 <_printf_common+0xa4>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	6922      	ldr	r2, [r4, #16]
 8009146:	f003 0306 	and.w	r3, r3, #6
 800914a:	2b04      	cmp	r3, #4
 800914c:	bf02      	ittt	eq
 800914e:	68e5      	ldreq	r5, [r4, #12]
 8009150:	6833      	ldreq	r3, [r6, #0]
 8009152:	1aed      	subeq	r5, r5, r3
 8009154:	68a3      	ldr	r3, [r4, #8]
 8009156:	bf0c      	ite	eq
 8009158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800915c:	2500      	movne	r5, #0
 800915e:	4293      	cmp	r3, r2
 8009160:	bfc4      	itt	gt
 8009162:	1a9b      	subgt	r3, r3, r2
 8009164:	18ed      	addgt	r5, r5, r3
 8009166:	2600      	movs	r6, #0
 8009168:	341a      	adds	r4, #26
 800916a:	42b5      	cmp	r5, r6
 800916c:	d11a      	bne.n	80091a4 <_printf_common+0xc8>
 800916e:	2000      	movs	r0, #0
 8009170:	e008      	b.n	8009184 <_printf_common+0xa8>
 8009172:	2301      	movs	r3, #1
 8009174:	4652      	mov	r2, sl
 8009176:	4641      	mov	r1, r8
 8009178:	4638      	mov	r0, r7
 800917a:	47c8      	blx	r9
 800917c:	3001      	adds	r0, #1
 800917e:	d103      	bne.n	8009188 <_printf_common+0xac>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	3501      	adds	r5, #1
 800918a:	e7c6      	b.n	800911a <_printf_common+0x3e>
 800918c:	18e1      	adds	r1, r4, r3
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	2030      	movs	r0, #48	@ 0x30
 8009192:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009196:	4422      	add	r2, r4
 8009198:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800919c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091a0:	3302      	adds	r3, #2
 80091a2:	e7c7      	b.n	8009134 <_printf_common+0x58>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4622      	mov	r2, r4
 80091a8:	4641      	mov	r1, r8
 80091aa:	4638      	mov	r0, r7
 80091ac:	47c8      	blx	r9
 80091ae:	3001      	adds	r0, #1
 80091b0:	d0e6      	beq.n	8009180 <_printf_common+0xa4>
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7d9      	b.n	800916a <_printf_common+0x8e>
	...

080091b8 <_printf_i>:
 80091b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	7e0f      	ldrb	r7, [r1, #24]
 80091be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80091c0:	2f78      	cmp	r7, #120	@ 0x78
 80091c2:	4691      	mov	r9, r2
 80091c4:	4680      	mov	r8, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	469a      	mov	sl, r3
 80091ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80091ce:	d807      	bhi.n	80091e0 <_printf_i+0x28>
 80091d0:	2f62      	cmp	r7, #98	@ 0x62
 80091d2:	d80a      	bhi.n	80091ea <_printf_i+0x32>
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	f000 80d1 	beq.w	800937c <_printf_i+0x1c4>
 80091da:	2f58      	cmp	r7, #88	@ 0x58
 80091dc:	f000 80b8 	beq.w	8009350 <_printf_i+0x198>
 80091e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091e8:	e03a      	b.n	8009260 <_printf_i+0xa8>
 80091ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091ee:	2b15      	cmp	r3, #21
 80091f0:	d8f6      	bhi.n	80091e0 <_printf_i+0x28>
 80091f2:	a101      	add	r1, pc, #4	@ (adr r1, 80091f8 <_printf_i+0x40>)
 80091f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009265 	.word	0x08009265
 8009200:	080091e1 	.word	0x080091e1
 8009204:	080091e1 	.word	0x080091e1
 8009208:	080091e1 	.word	0x080091e1
 800920c:	080091e1 	.word	0x080091e1
 8009210:	08009265 	.word	0x08009265
 8009214:	080091e1 	.word	0x080091e1
 8009218:	080091e1 	.word	0x080091e1
 800921c:	080091e1 	.word	0x080091e1
 8009220:	080091e1 	.word	0x080091e1
 8009224:	08009363 	.word	0x08009363
 8009228:	0800928f 	.word	0x0800928f
 800922c:	0800931d 	.word	0x0800931d
 8009230:	080091e1 	.word	0x080091e1
 8009234:	080091e1 	.word	0x080091e1
 8009238:	08009385 	.word	0x08009385
 800923c:	080091e1 	.word	0x080091e1
 8009240:	0800928f 	.word	0x0800928f
 8009244:	080091e1 	.word	0x080091e1
 8009248:	080091e1 	.word	0x080091e1
 800924c:	08009325 	.word	0x08009325
 8009250:	6833      	ldr	r3, [r6, #0]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6032      	str	r2, [r6, #0]
 8009258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800925c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009260:	2301      	movs	r3, #1
 8009262:	e09c      	b.n	800939e <_printf_i+0x1e6>
 8009264:	6833      	ldr	r3, [r6, #0]
 8009266:	6820      	ldr	r0, [r4, #0]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	6031      	str	r1, [r6, #0]
 800926c:	0606      	lsls	r6, r0, #24
 800926e:	d501      	bpl.n	8009274 <_printf_i+0xbc>
 8009270:	681d      	ldr	r5, [r3, #0]
 8009272:	e003      	b.n	800927c <_printf_i+0xc4>
 8009274:	0645      	lsls	r5, r0, #25
 8009276:	d5fb      	bpl.n	8009270 <_printf_i+0xb8>
 8009278:	f9b3 5000 	ldrsh.w	r5, [r3]
 800927c:	2d00      	cmp	r5, #0
 800927e:	da03      	bge.n	8009288 <_printf_i+0xd0>
 8009280:	232d      	movs	r3, #45	@ 0x2d
 8009282:	426d      	negs	r5, r5
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009288:	4858      	ldr	r0, [pc, #352]	@ (80093ec <_printf_i+0x234>)
 800928a:	230a      	movs	r3, #10
 800928c:	e011      	b.n	80092b2 <_printf_i+0xfa>
 800928e:	6821      	ldr	r1, [r4, #0]
 8009290:	6833      	ldr	r3, [r6, #0]
 8009292:	0608      	lsls	r0, r1, #24
 8009294:	f853 5b04 	ldr.w	r5, [r3], #4
 8009298:	d402      	bmi.n	80092a0 <_printf_i+0xe8>
 800929a:	0649      	lsls	r1, r1, #25
 800929c:	bf48      	it	mi
 800929e:	b2ad      	uxthmi	r5, r5
 80092a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80092a2:	4852      	ldr	r0, [pc, #328]	@ (80093ec <_printf_i+0x234>)
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	bf14      	ite	ne
 80092a8:	230a      	movne	r3, #10
 80092aa:	2308      	moveq	r3, #8
 80092ac:	2100      	movs	r1, #0
 80092ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092b2:	6866      	ldr	r6, [r4, #4]
 80092b4:	60a6      	str	r6, [r4, #8]
 80092b6:	2e00      	cmp	r6, #0
 80092b8:	db05      	blt.n	80092c6 <_printf_i+0x10e>
 80092ba:	6821      	ldr	r1, [r4, #0]
 80092bc:	432e      	orrs	r6, r5
 80092be:	f021 0104 	bic.w	r1, r1, #4
 80092c2:	6021      	str	r1, [r4, #0]
 80092c4:	d04b      	beq.n	800935e <_printf_i+0x1a6>
 80092c6:	4616      	mov	r6, r2
 80092c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80092cc:	fb03 5711 	mls	r7, r3, r1, r5
 80092d0:	5dc7      	ldrb	r7, [r0, r7]
 80092d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092d6:	462f      	mov	r7, r5
 80092d8:	42bb      	cmp	r3, r7
 80092da:	460d      	mov	r5, r1
 80092dc:	d9f4      	bls.n	80092c8 <_printf_i+0x110>
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d10b      	bne.n	80092fa <_printf_i+0x142>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	07df      	lsls	r7, r3, #31
 80092e6:	d508      	bpl.n	80092fa <_printf_i+0x142>
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	6861      	ldr	r1, [r4, #4]
 80092ec:	4299      	cmp	r1, r3
 80092ee:	bfde      	ittt	le
 80092f0:	2330      	movle	r3, #48	@ 0x30
 80092f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80092fa:	1b92      	subs	r2, r2, r6
 80092fc:	6122      	str	r2, [r4, #16]
 80092fe:	f8cd a000 	str.w	sl, [sp]
 8009302:	464b      	mov	r3, r9
 8009304:	aa03      	add	r2, sp, #12
 8009306:	4621      	mov	r1, r4
 8009308:	4640      	mov	r0, r8
 800930a:	f7ff fee7 	bl	80090dc <_printf_common>
 800930e:	3001      	adds	r0, #1
 8009310:	d14a      	bne.n	80093a8 <_printf_i+0x1f0>
 8009312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009316:	b004      	add	sp, #16
 8009318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	f043 0320 	orr.w	r3, r3, #32
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	4832      	ldr	r0, [pc, #200]	@ (80093f0 <_printf_i+0x238>)
 8009326:	2778      	movs	r7, #120	@ 0x78
 8009328:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	6831      	ldr	r1, [r6, #0]
 8009330:	061f      	lsls	r7, r3, #24
 8009332:	f851 5b04 	ldr.w	r5, [r1], #4
 8009336:	d402      	bmi.n	800933e <_printf_i+0x186>
 8009338:	065f      	lsls	r7, r3, #25
 800933a:	bf48      	it	mi
 800933c:	b2ad      	uxthmi	r5, r5
 800933e:	6031      	str	r1, [r6, #0]
 8009340:	07d9      	lsls	r1, r3, #31
 8009342:	bf44      	itt	mi
 8009344:	f043 0320 	orrmi.w	r3, r3, #32
 8009348:	6023      	strmi	r3, [r4, #0]
 800934a:	b11d      	cbz	r5, 8009354 <_printf_i+0x19c>
 800934c:	2310      	movs	r3, #16
 800934e:	e7ad      	b.n	80092ac <_printf_i+0xf4>
 8009350:	4826      	ldr	r0, [pc, #152]	@ (80093ec <_printf_i+0x234>)
 8009352:	e7e9      	b.n	8009328 <_printf_i+0x170>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	f023 0320 	bic.w	r3, r3, #32
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	e7f6      	b.n	800934c <_printf_i+0x194>
 800935e:	4616      	mov	r6, r2
 8009360:	e7bd      	b.n	80092de <_printf_i+0x126>
 8009362:	6833      	ldr	r3, [r6, #0]
 8009364:	6825      	ldr	r5, [r4, #0]
 8009366:	6961      	ldr	r1, [r4, #20]
 8009368:	1d18      	adds	r0, r3, #4
 800936a:	6030      	str	r0, [r6, #0]
 800936c:	062e      	lsls	r6, r5, #24
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	d501      	bpl.n	8009376 <_printf_i+0x1be>
 8009372:	6019      	str	r1, [r3, #0]
 8009374:	e002      	b.n	800937c <_printf_i+0x1c4>
 8009376:	0668      	lsls	r0, r5, #25
 8009378:	d5fb      	bpl.n	8009372 <_printf_i+0x1ba>
 800937a:	8019      	strh	r1, [r3, #0]
 800937c:	2300      	movs	r3, #0
 800937e:	6123      	str	r3, [r4, #16]
 8009380:	4616      	mov	r6, r2
 8009382:	e7bc      	b.n	80092fe <_printf_i+0x146>
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	1d1a      	adds	r2, r3, #4
 8009388:	6032      	str	r2, [r6, #0]
 800938a:	681e      	ldr	r6, [r3, #0]
 800938c:	6862      	ldr	r2, [r4, #4]
 800938e:	2100      	movs	r1, #0
 8009390:	4630      	mov	r0, r6
 8009392:	f7f6 ff4d 	bl	8000230 <memchr>
 8009396:	b108      	cbz	r0, 800939c <_printf_i+0x1e4>
 8009398:	1b80      	subs	r0, r0, r6
 800939a:	6060      	str	r0, [r4, #4]
 800939c:	6863      	ldr	r3, [r4, #4]
 800939e:	6123      	str	r3, [r4, #16]
 80093a0:	2300      	movs	r3, #0
 80093a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a6:	e7aa      	b.n	80092fe <_printf_i+0x146>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	4632      	mov	r2, r6
 80093ac:	4649      	mov	r1, r9
 80093ae:	4640      	mov	r0, r8
 80093b0:	47d0      	blx	sl
 80093b2:	3001      	adds	r0, #1
 80093b4:	d0ad      	beq.n	8009312 <_printf_i+0x15a>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	079b      	lsls	r3, r3, #30
 80093ba:	d413      	bmi.n	80093e4 <_printf_i+0x22c>
 80093bc:	68e0      	ldr	r0, [r4, #12]
 80093be:	9b03      	ldr	r3, [sp, #12]
 80093c0:	4298      	cmp	r0, r3
 80093c2:	bfb8      	it	lt
 80093c4:	4618      	movlt	r0, r3
 80093c6:	e7a6      	b.n	8009316 <_printf_i+0x15e>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4632      	mov	r2, r6
 80093cc:	4649      	mov	r1, r9
 80093ce:	4640      	mov	r0, r8
 80093d0:	47d0      	blx	sl
 80093d2:	3001      	adds	r0, #1
 80093d4:	d09d      	beq.n	8009312 <_printf_i+0x15a>
 80093d6:	3501      	adds	r5, #1
 80093d8:	68e3      	ldr	r3, [r4, #12]
 80093da:	9903      	ldr	r1, [sp, #12]
 80093dc:	1a5b      	subs	r3, r3, r1
 80093de:	42ab      	cmp	r3, r5
 80093e0:	dcf2      	bgt.n	80093c8 <_printf_i+0x210>
 80093e2:	e7eb      	b.n	80093bc <_printf_i+0x204>
 80093e4:	2500      	movs	r5, #0
 80093e6:	f104 0619 	add.w	r6, r4, #25
 80093ea:	e7f5      	b.n	80093d8 <_printf_i+0x220>
 80093ec:	0800bfb6 	.word	0x0800bfb6
 80093f0:	0800bfc7 	.word	0x0800bfc7

080093f4 <std>:
 80093f4:	2300      	movs	r3, #0
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4604      	mov	r4, r0
 80093fa:	e9c0 3300 	strd	r3, r3, [r0]
 80093fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009402:	6083      	str	r3, [r0, #8]
 8009404:	8181      	strh	r1, [r0, #12]
 8009406:	6643      	str	r3, [r0, #100]	@ 0x64
 8009408:	81c2      	strh	r2, [r0, #14]
 800940a:	6183      	str	r3, [r0, #24]
 800940c:	4619      	mov	r1, r3
 800940e:	2208      	movs	r2, #8
 8009410:	305c      	adds	r0, #92	@ 0x5c
 8009412:	f000 fa53 	bl	80098bc <memset>
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <std+0x58>)
 8009418:	6263      	str	r3, [r4, #36]	@ 0x24
 800941a:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <std+0x5c>)
 800941c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800941e:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <std+0x60>)
 8009420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009422:	4b0d      	ldr	r3, [pc, #52]	@ (8009458 <std+0x64>)
 8009424:	6323      	str	r3, [r4, #48]	@ 0x30
 8009426:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <std+0x68>)
 8009428:	6224      	str	r4, [r4, #32]
 800942a:	429c      	cmp	r4, r3
 800942c:	d006      	beq.n	800943c <std+0x48>
 800942e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009432:	4294      	cmp	r4, r2
 8009434:	d002      	beq.n	800943c <std+0x48>
 8009436:	33d0      	adds	r3, #208	@ 0xd0
 8009438:	429c      	cmp	r4, r3
 800943a:	d105      	bne.n	8009448 <std+0x54>
 800943c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009444:	f000 bb14 	b.w	8009a70 <__retarget_lock_init_recursive>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	bf00      	nop
 800944c:	08009695 	.word	0x08009695
 8009450:	080096b7 	.word	0x080096b7
 8009454:	080096ef 	.word	0x080096ef
 8009458:	08009713 	.word	0x08009713
 800945c:	20006244 	.word	0x20006244

08009460 <stdio_exit_handler>:
 8009460:	4a02      	ldr	r2, [pc, #8]	@ (800946c <stdio_exit_handler+0xc>)
 8009462:	4903      	ldr	r1, [pc, #12]	@ (8009470 <stdio_exit_handler+0x10>)
 8009464:	4803      	ldr	r0, [pc, #12]	@ (8009474 <stdio_exit_handler+0x14>)
 8009466:	f000 b8c1 	b.w	80095ec <_fwalk_sglue>
 800946a:	bf00      	nop
 800946c:	20000064 	.word	0x20000064
 8009470:	0800b3f5 	.word	0x0800b3f5
 8009474:	20000074 	.word	0x20000074

08009478 <cleanup_stdio>:
 8009478:	6841      	ldr	r1, [r0, #4]
 800947a:	4b0c      	ldr	r3, [pc, #48]	@ (80094ac <cleanup_stdio+0x34>)
 800947c:	4299      	cmp	r1, r3
 800947e:	b510      	push	{r4, lr}
 8009480:	4604      	mov	r4, r0
 8009482:	d001      	beq.n	8009488 <cleanup_stdio+0x10>
 8009484:	f001 ffb6 	bl	800b3f4 <_fflush_r>
 8009488:	68a1      	ldr	r1, [r4, #8]
 800948a:	4b09      	ldr	r3, [pc, #36]	@ (80094b0 <cleanup_stdio+0x38>)
 800948c:	4299      	cmp	r1, r3
 800948e:	d002      	beq.n	8009496 <cleanup_stdio+0x1e>
 8009490:	4620      	mov	r0, r4
 8009492:	f001 ffaf 	bl	800b3f4 <_fflush_r>
 8009496:	68e1      	ldr	r1, [r4, #12]
 8009498:	4b06      	ldr	r3, [pc, #24]	@ (80094b4 <cleanup_stdio+0x3c>)
 800949a:	4299      	cmp	r1, r3
 800949c:	d004      	beq.n	80094a8 <cleanup_stdio+0x30>
 800949e:	4620      	mov	r0, r4
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094a4:	f001 bfa6 	b.w	800b3f4 <_fflush_r>
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	bf00      	nop
 80094ac:	20006244 	.word	0x20006244
 80094b0:	200062ac 	.word	0x200062ac
 80094b4:	20006314 	.word	0x20006314

080094b8 <global_stdio_init.part.0>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4b0b      	ldr	r3, [pc, #44]	@ (80094e8 <global_stdio_init.part.0+0x30>)
 80094bc:	4c0b      	ldr	r4, [pc, #44]	@ (80094ec <global_stdio_init.part.0+0x34>)
 80094be:	4a0c      	ldr	r2, [pc, #48]	@ (80094f0 <global_stdio_init.part.0+0x38>)
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	4620      	mov	r0, r4
 80094c4:	2200      	movs	r2, #0
 80094c6:	2104      	movs	r1, #4
 80094c8:	f7ff ff94 	bl	80093f4 <std>
 80094cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80094d0:	2201      	movs	r2, #1
 80094d2:	2109      	movs	r1, #9
 80094d4:	f7ff ff8e 	bl	80093f4 <std>
 80094d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80094dc:	2202      	movs	r2, #2
 80094de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e2:	2112      	movs	r1, #18
 80094e4:	f7ff bf86 	b.w	80093f4 <std>
 80094e8:	2000637c 	.word	0x2000637c
 80094ec:	20006244 	.word	0x20006244
 80094f0:	08009461 	.word	0x08009461

080094f4 <__sfp_lock_acquire>:
 80094f4:	4801      	ldr	r0, [pc, #4]	@ (80094fc <__sfp_lock_acquire+0x8>)
 80094f6:	f000 babc 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 80094fa:	bf00      	nop
 80094fc:	20006385 	.word	0x20006385

08009500 <__sfp_lock_release>:
 8009500:	4801      	ldr	r0, [pc, #4]	@ (8009508 <__sfp_lock_release+0x8>)
 8009502:	f000 bab7 	b.w	8009a74 <__retarget_lock_release_recursive>
 8009506:	bf00      	nop
 8009508:	20006385 	.word	0x20006385

0800950c <__sinit>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	f7ff fff0 	bl	80094f4 <__sfp_lock_acquire>
 8009514:	6a23      	ldr	r3, [r4, #32]
 8009516:	b11b      	cbz	r3, 8009520 <__sinit+0x14>
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f7ff bff0 	b.w	8009500 <__sfp_lock_release>
 8009520:	4b04      	ldr	r3, [pc, #16]	@ (8009534 <__sinit+0x28>)
 8009522:	6223      	str	r3, [r4, #32]
 8009524:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <__sinit+0x2c>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1f5      	bne.n	8009518 <__sinit+0xc>
 800952c:	f7ff ffc4 	bl	80094b8 <global_stdio_init.part.0>
 8009530:	e7f2      	b.n	8009518 <__sinit+0xc>
 8009532:	bf00      	nop
 8009534:	08009479 	.word	0x08009479
 8009538:	2000637c 	.word	0x2000637c

0800953c <_fputs_r>:
 800953c:	b570      	push	{r4, r5, r6, lr}
 800953e:	460d      	mov	r5, r1
 8009540:	4614      	mov	r4, r2
 8009542:	4606      	mov	r6, r0
 8009544:	b118      	cbz	r0, 800954e <_fputs_r+0x12>
 8009546:	6a03      	ldr	r3, [r0, #32]
 8009548:	b90b      	cbnz	r3, 800954e <_fputs_r+0x12>
 800954a:	f7ff ffdf 	bl	800950c <__sinit>
 800954e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009550:	07d9      	lsls	r1, r3, #31
 8009552:	d405      	bmi.n	8009560 <_fputs_r+0x24>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	059a      	lsls	r2, r3, #22
 8009558:	d402      	bmi.n	8009560 <_fputs_r+0x24>
 800955a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800955c:	f000 fa89 	bl	8009a72 <__retarget_lock_acquire_recursive>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	071b      	lsls	r3, r3, #28
 8009564:	d501      	bpl.n	800956a <_fputs_r+0x2e>
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	bb73      	cbnz	r3, 80095c8 <_fputs_r+0x8c>
 800956a:	4621      	mov	r1, r4
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f94f 	bl	8009810 <__swsetup_r>
 8009572:	b348      	cbz	r0, 80095c8 <_fputs_r+0x8c>
 8009574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009576:	07da      	lsls	r2, r3, #31
 8009578:	d402      	bmi.n	8009580 <_fputs_r+0x44>
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	059b      	lsls	r3, r3, #22
 800957e:	d529      	bpl.n	80095d4 <_fputs_r+0x98>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009584:	e018      	b.n	80095b8 <_fputs_r+0x7c>
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	3b01      	subs	r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	da04      	bge.n	800959a <_fputs_r+0x5e>
 8009590:	69a2      	ldr	r2, [r4, #24]
 8009592:	4293      	cmp	r3, r2
 8009594:	db11      	blt.n	80095ba <_fputs_r+0x7e>
 8009596:	290a      	cmp	r1, #10
 8009598:	d00f      	beq.n	80095ba <_fputs_r+0x7e>
 800959a:	6823      	ldr	r3, [r4, #0]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	6022      	str	r2, [r4, #0]
 80095a0:	7019      	strb	r1, [r3, #0]
 80095a2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80095a6:	2900      	cmp	r1, #0
 80095a8:	d1ed      	bne.n	8009586 <_fputs_r+0x4a>
 80095aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095ac:	07d8      	lsls	r0, r3, #31
 80095ae:	d402      	bmi.n	80095b6 <_fputs_r+0x7a>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	0599      	lsls	r1, r3, #22
 80095b4:	d50a      	bpl.n	80095cc <_fputs_r+0x90>
 80095b6:	2000      	movs	r0, #0
 80095b8:	bd70      	pop	{r4, r5, r6, pc}
 80095ba:	4622      	mov	r2, r4
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 f8e9 	bl	8009794 <__swbuf_r>
 80095c2:	3001      	adds	r0, #1
 80095c4:	d1ed      	bne.n	80095a2 <_fputs_r+0x66>
 80095c6:	e7d5      	b.n	8009574 <_fputs_r+0x38>
 80095c8:	3d01      	subs	r5, #1
 80095ca:	e7ea      	b.n	80095a2 <_fputs_r+0x66>
 80095cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095ce:	f000 fa51 	bl	8009a74 <__retarget_lock_release_recursive>
 80095d2:	e7f0      	b.n	80095b6 <_fputs_r+0x7a>
 80095d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095d6:	f000 fa4d 	bl	8009a74 <__retarget_lock_release_recursive>
 80095da:	e7d1      	b.n	8009580 <_fputs_r+0x44>

080095dc <fputs>:
 80095dc:	4b02      	ldr	r3, [pc, #8]	@ (80095e8 <fputs+0xc>)
 80095de:	460a      	mov	r2, r1
 80095e0:	4601      	mov	r1, r0
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	f7ff bfaa 	b.w	800953c <_fputs_r>
 80095e8:	20000070 	.word	0x20000070

080095ec <_fwalk_sglue>:
 80095ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f0:	4607      	mov	r7, r0
 80095f2:	4688      	mov	r8, r1
 80095f4:	4614      	mov	r4, r2
 80095f6:	2600      	movs	r6, #0
 80095f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009600:	d505      	bpl.n	800960e <_fwalk_sglue+0x22>
 8009602:	6824      	ldr	r4, [r4, #0]
 8009604:	2c00      	cmp	r4, #0
 8009606:	d1f7      	bne.n	80095f8 <_fwalk_sglue+0xc>
 8009608:	4630      	mov	r0, r6
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d907      	bls.n	8009624 <_fwalk_sglue+0x38>
 8009614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009618:	3301      	adds	r3, #1
 800961a:	d003      	beq.n	8009624 <_fwalk_sglue+0x38>
 800961c:	4629      	mov	r1, r5
 800961e:	4638      	mov	r0, r7
 8009620:	47c0      	blx	r8
 8009622:	4306      	orrs	r6, r0
 8009624:	3568      	adds	r5, #104	@ 0x68
 8009626:	e7e9      	b.n	80095fc <_fwalk_sglue+0x10>

08009628 <sniprintf>:
 8009628:	b40c      	push	{r2, r3}
 800962a:	b530      	push	{r4, r5, lr}
 800962c:	4b18      	ldr	r3, [pc, #96]	@ (8009690 <sniprintf+0x68>)
 800962e:	1e0c      	subs	r4, r1, #0
 8009630:	681d      	ldr	r5, [r3, #0]
 8009632:	b09d      	sub	sp, #116	@ 0x74
 8009634:	da08      	bge.n	8009648 <sniprintf+0x20>
 8009636:	238b      	movs	r3, #139	@ 0x8b
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800963e:	b01d      	add	sp, #116	@ 0x74
 8009640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009644:	b002      	add	sp, #8
 8009646:	4770      	bx	lr
 8009648:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800964c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009650:	f04f 0300 	mov.w	r3, #0
 8009654:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009656:	bf14      	ite	ne
 8009658:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800965c:	4623      	moveq	r3, r4
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	9307      	str	r3, [sp, #28]
 8009662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009666:	9002      	str	r0, [sp, #8]
 8009668:	9006      	str	r0, [sp, #24]
 800966a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800966e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009670:	ab21      	add	r3, sp, #132	@ 0x84
 8009672:	a902      	add	r1, sp, #8
 8009674:	4628      	mov	r0, r5
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	f001 fd3c 	bl	800b0f4 <_svfiprintf_r>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	bfbc      	itt	lt
 8009680:	238b      	movlt	r3, #139	@ 0x8b
 8009682:	602b      	strlt	r3, [r5, #0]
 8009684:	2c00      	cmp	r4, #0
 8009686:	d0da      	beq.n	800963e <sniprintf+0x16>
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]
 800968e:	e7d6      	b.n	800963e <sniprintf+0x16>
 8009690:	20000070 	.word	0x20000070

08009694 <__sread>:
 8009694:	b510      	push	{r4, lr}
 8009696:	460c      	mov	r4, r1
 8009698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800969c:	f000 f99a 	bl	80099d4 <_read_r>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	bfab      	itete	ge
 80096a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80096a6:	89a3      	ldrhlt	r3, [r4, #12]
 80096a8:	181b      	addge	r3, r3, r0
 80096aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80096ae:	bfac      	ite	ge
 80096b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80096b2:	81a3      	strhlt	r3, [r4, #12]
 80096b4:	bd10      	pop	{r4, pc}

080096b6 <__swrite>:
 80096b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ba:	461f      	mov	r7, r3
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	05db      	lsls	r3, r3, #23
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	4616      	mov	r6, r2
 80096c6:	d505      	bpl.n	80096d4 <__swrite+0x1e>
 80096c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096cc:	2302      	movs	r3, #2
 80096ce:	2200      	movs	r2, #0
 80096d0:	f000 f96e 	bl	80099b0 <_lseek_r>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80096de:	81a3      	strh	r3, [r4, #12]
 80096e0:	4632      	mov	r2, r6
 80096e2:	463b      	mov	r3, r7
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ea:	f000 b985 	b.w	80099f8 <_write_r>

080096ee <__sseek>:
 80096ee:	b510      	push	{r4, lr}
 80096f0:	460c      	mov	r4, r1
 80096f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f6:	f000 f95b 	bl	80099b0 <_lseek_r>
 80096fa:	1c43      	adds	r3, r0, #1
 80096fc:	89a3      	ldrh	r3, [r4, #12]
 80096fe:	bf15      	itete	ne
 8009700:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009702:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009706:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800970a:	81a3      	strheq	r3, [r4, #12]
 800970c:	bf18      	it	ne
 800970e:	81a3      	strhne	r3, [r4, #12]
 8009710:	bd10      	pop	{r4, pc}

08009712 <__sclose>:
 8009712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009716:	f000 b8dd 	b.w	80098d4 <_close_r>

0800971a <_vsniprintf_r>:
 800971a:	b530      	push	{r4, r5, lr}
 800971c:	4614      	mov	r4, r2
 800971e:	2c00      	cmp	r4, #0
 8009720:	b09b      	sub	sp, #108	@ 0x6c
 8009722:	4605      	mov	r5, r0
 8009724:	461a      	mov	r2, r3
 8009726:	da05      	bge.n	8009734 <_vsniprintf_r+0x1a>
 8009728:	238b      	movs	r3, #139	@ 0x8b
 800972a:	6003      	str	r3, [r0, #0]
 800972c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009730:	b01b      	add	sp, #108	@ 0x6c
 8009732:	bd30      	pop	{r4, r5, pc}
 8009734:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009738:	f8ad 300c 	strh.w	r3, [sp, #12]
 800973c:	f04f 0300 	mov.w	r3, #0
 8009740:	9319      	str	r3, [sp, #100]	@ 0x64
 8009742:	bf14      	ite	ne
 8009744:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009748:	4623      	moveq	r3, r4
 800974a:	9302      	str	r3, [sp, #8]
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009752:	9100      	str	r1, [sp, #0]
 8009754:	9104      	str	r1, [sp, #16]
 8009756:	f8ad 300e 	strh.w	r3, [sp, #14]
 800975a:	4669      	mov	r1, sp
 800975c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800975e:	f001 fcc9 	bl	800b0f4 <_svfiprintf_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	bfbc      	itt	lt
 8009766:	238b      	movlt	r3, #139	@ 0x8b
 8009768:	602b      	strlt	r3, [r5, #0]
 800976a:	2c00      	cmp	r4, #0
 800976c:	d0e0      	beq.n	8009730 <_vsniprintf_r+0x16>
 800976e:	9b00      	ldr	r3, [sp, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e7dc      	b.n	8009730 <_vsniprintf_r+0x16>
	...

08009778 <vsniprintf>:
 8009778:	b507      	push	{r0, r1, r2, lr}
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	4613      	mov	r3, r2
 800977e:	460a      	mov	r2, r1
 8009780:	4601      	mov	r1, r0
 8009782:	4803      	ldr	r0, [pc, #12]	@ (8009790 <vsniprintf+0x18>)
 8009784:	6800      	ldr	r0, [r0, #0]
 8009786:	f7ff ffc8 	bl	800971a <_vsniprintf_r>
 800978a:	b003      	add	sp, #12
 800978c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009790:	20000070 	.word	0x20000070

08009794 <__swbuf_r>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	460e      	mov	r6, r1
 8009798:	4614      	mov	r4, r2
 800979a:	4605      	mov	r5, r0
 800979c:	b118      	cbz	r0, 80097a6 <__swbuf_r+0x12>
 800979e:	6a03      	ldr	r3, [r0, #32]
 80097a0:	b90b      	cbnz	r3, 80097a6 <__swbuf_r+0x12>
 80097a2:	f7ff feb3 	bl	800950c <__sinit>
 80097a6:	69a3      	ldr	r3, [r4, #24]
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	071a      	lsls	r2, r3, #28
 80097ae:	d501      	bpl.n	80097b4 <__swbuf_r+0x20>
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swbuf_r+0x32>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4628      	mov	r0, r5
 80097b8:	f000 f82a 	bl	8009810 <__swsetup_r>
 80097bc:	b118      	cbz	r0, 80097c6 <__swbuf_r+0x32>
 80097be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80097c2:	4638      	mov	r0, r7
 80097c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	6922      	ldr	r2, [r4, #16]
 80097ca:	1a98      	subs	r0, r3, r2
 80097cc:	6963      	ldr	r3, [r4, #20]
 80097ce:	b2f6      	uxtb	r6, r6
 80097d0:	4283      	cmp	r3, r0
 80097d2:	4637      	mov	r7, r6
 80097d4:	dc05      	bgt.n	80097e2 <__swbuf_r+0x4e>
 80097d6:	4621      	mov	r1, r4
 80097d8:	4628      	mov	r0, r5
 80097da:	f001 fe0b 	bl	800b3f4 <_fflush_r>
 80097de:	2800      	cmp	r0, #0
 80097e0:	d1ed      	bne.n	80097be <__swbuf_r+0x2a>
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	60a3      	str	r3, [r4, #8]
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	6022      	str	r2, [r4, #0]
 80097ee:	701e      	strb	r6, [r3, #0]
 80097f0:	6962      	ldr	r2, [r4, #20]
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d004      	beq.n	8009802 <__swbuf_r+0x6e>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	07db      	lsls	r3, r3, #31
 80097fc:	d5e1      	bpl.n	80097c2 <__swbuf_r+0x2e>
 80097fe:	2e0a      	cmp	r6, #10
 8009800:	d1df      	bne.n	80097c2 <__swbuf_r+0x2e>
 8009802:	4621      	mov	r1, r4
 8009804:	4628      	mov	r0, r5
 8009806:	f001 fdf5 	bl	800b3f4 <_fflush_r>
 800980a:	2800      	cmp	r0, #0
 800980c:	d0d9      	beq.n	80097c2 <__swbuf_r+0x2e>
 800980e:	e7d6      	b.n	80097be <__swbuf_r+0x2a>

08009810 <__swsetup_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4b29      	ldr	r3, [pc, #164]	@ (80098b8 <__swsetup_r+0xa8>)
 8009814:	4605      	mov	r5, r0
 8009816:	6818      	ldr	r0, [r3, #0]
 8009818:	460c      	mov	r4, r1
 800981a:	b118      	cbz	r0, 8009824 <__swsetup_r+0x14>
 800981c:	6a03      	ldr	r3, [r0, #32]
 800981e:	b90b      	cbnz	r3, 8009824 <__swsetup_r+0x14>
 8009820:	f7ff fe74 	bl	800950c <__sinit>
 8009824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009828:	0719      	lsls	r1, r3, #28
 800982a:	d422      	bmi.n	8009872 <__swsetup_r+0x62>
 800982c:	06da      	lsls	r2, r3, #27
 800982e:	d407      	bmi.n	8009840 <__swsetup_r+0x30>
 8009830:	2209      	movs	r2, #9
 8009832:	602a      	str	r2, [r5, #0]
 8009834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800983e:	e033      	b.n	80098a8 <__swsetup_r+0x98>
 8009840:	0758      	lsls	r0, r3, #29
 8009842:	d512      	bpl.n	800986a <__swsetup_r+0x5a>
 8009844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009846:	b141      	cbz	r1, 800985a <__swsetup_r+0x4a>
 8009848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800984c:	4299      	cmp	r1, r3
 800984e:	d002      	beq.n	8009856 <__swsetup_r+0x46>
 8009850:	4628      	mov	r0, r5
 8009852:	f000 ff79 	bl	800a748 <_free_r>
 8009856:	2300      	movs	r3, #0
 8009858:	6363      	str	r3, [r4, #52]	@ 0x34
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	2300      	movs	r3, #0
 8009864:	6063      	str	r3, [r4, #4]
 8009866:	6923      	ldr	r3, [r4, #16]
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	f043 0308 	orr.w	r3, r3, #8
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	b94b      	cbnz	r3, 800988a <__swsetup_r+0x7a>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800987c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009880:	d003      	beq.n	800988a <__swsetup_r+0x7a>
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	f001 fe03 	bl	800b490 <__smakebuf_r>
 800988a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988e:	f013 0201 	ands.w	r2, r3, #1
 8009892:	d00a      	beq.n	80098aa <__swsetup_r+0x9a>
 8009894:	2200      	movs	r2, #0
 8009896:	60a2      	str	r2, [r4, #8]
 8009898:	6962      	ldr	r2, [r4, #20]
 800989a:	4252      	negs	r2, r2
 800989c:	61a2      	str	r2, [r4, #24]
 800989e:	6922      	ldr	r2, [r4, #16]
 80098a0:	b942      	cbnz	r2, 80098b4 <__swsetup_r+0xa4>
 80098a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80098a6:	d1c5      	bne.n	8009834 <__swsetup_r+0x24>
 80098a8:	bd38      	pop	{r3, r4, r5, pc}
 80098aa:	0799      	lsls	r1, r3, #30
 80098ac:	bf58      	it	pl
 80098ae:	6962      	ldrpl	r2, [r4, #20]
 80098b0:	60a2      	str	r2, [r4, #8]
 80098b2:	e7f4      	b.n	800989e <__swsetup_r+0x8e>
 80098b4:	2000      	movs	r0, #0
 80098b6:	e7f7      	b.n	80098a8 <__swsetup_r+0x98>
 80098b8:	20000070 	.word	0x20000070

080098bc <memset>:
 80098bc:	4402      	add	r2, r0
 80098be:	4603      	mov	r3, r0
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d100      	bne.n	80098c6 <memset+0xa>
 80098c4:	4770      	bx	lr
 80098c6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ca:	e7f9      	b.n	80098c0 <memset+0x4>

080098cc <_localeconv_r>:
 80098cc:	4800      	ldr	r0, [pc, #0]	@ (80098d0 <_localeconv_r+0x4>)
 80098ce:	4770      	bx	lr
 80098d0:	200001b0 	.word	0x200001b0

080098d4 <_close_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d06      	ldr	r5, [pc, #24]	@ (80098f0 <_close_r+0x1c>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f8 fcaa 	bl	8002238 <_close>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_close_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_close_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20006380 	.word	0x20006380

080098f4 <_reclaim_reent>:
 80098f4:	4b2d      	ldr	r3, [pc, #180]	@ (80099ac <_reclaim_reent+0xb8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4283      	cmp	r3, r0
 80098fa:	b570      	push	{r4, r5, r6, lr}
 80098fc:	4604      	mov	r4, r0
 80098fe:	d053      	beq.n	80099a8 <_reclaim_reent+0xb4>
 8009900:	69c3      	ldr	r3, [r0, #28]
 8009902:	b31b      	cbz	r3, 800994c <_reclaim_reent+0x58>
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	b163      	cbz	r3, 8009922 <_reclaim_reent+0x2e>
 8009908:	2500      	movs	r5, #0
 800990a:	69e3      	ldr	r3, [r4, #28]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	5959      	ldr	r1, [r3, r5]
 8009910:	b9b1      	cbnz	r1, 8009940 <_reclaim_reent+0x4c>
 8009912:	3504      	adds	r5, #4
 8009914:	2d80      	cmp	r5, #128	@ 0x80
 8009916:	d1f8      	bne.n	800990a <_reclaim_reent+0x16>
 8009918:	69e3      	ldr	r3, [r4, #28]
 800991a:	4620      	mov	r0, r4
 800991c:	68d9      	ldr	r1, [r3, #12]
 800991e:	f000 ff13 	bl	800a748 <_free_r>
 8009922:	69e3      	ldr	r3, [r4, #28]
 8009924:	6819      	ldr	r1, [r3, #0]
 8009926:	b111      	cbz	r1, 800992e <_reclaim_reent+0x3a>
 8009928:	4620      	mov	r0, r4
 800992a:	f000 ff0d 	bl	800a748 <_free_r>
 800992e:	69e3      	ldr	r3, [r4, #28]
 8009930:	689d      	ldr	r5, [r3, #8]
 8009932:	b15d      	cbz	r5, 800994c <_reclaim_reent+0x58>
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	682d      	ldr	r5, [r5, #0]
 800993a:	f000 ff05 	bl	800a748 <_free_r>
 800993e:	e7f8      	b.n	8009932 <_reclaim_reent+0x3e>
 8009940:	680e      	ldr	r6, [r1, #0]
 8009942:	4620      	mov	r0, r4
 8009944:	f000 ff00 	bl	800a748 <_free_r>
 8009948:	4631      	mov	r1, r6
 800994a:	e7e1      	b.n	8009910 <_reclaim_reent+0x1c>
 800994c:	6961      	ldr	r1, [r4, #20]
 800994e:	b111      	cbz	r1, 8009956 <_reclaim_reent+0x62>
 8009950:	4620      	mov	r0, r4
 8009952:	f000 fef9 	bl	800a748 <_free_r>
 8009956:	69e1      	ldr	r1, [r4, #28]
 8009958:	b111      	cbz	r1, 8009960 <_reclaim_reent+0x6c>
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fef4 	bl	800a748 <_free_r>
 8009960:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009962:	b111      	cbz	r1, 800996a <_reclaim_reent+0x76>
 8009964:	4620      	mov	r0, r4
 8009966:	f000 feef 	bl	800a748 <_free_r>
 800996a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800996c:	b111      	cbz	r1, 8009974 <_reclaim_reent+0x80>
 800996e:	4620      	mov	r0, r4
 8009970:	f000 feea 	bl	800a748 <_free_r>
 8009974:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009976:	b111      	cbz	r1, 800997e <_reclaim_reent+0x8a>
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fee5 	bl	800a748 <_free_r>
 800997e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009980:	b111      	cbz	r1, 8009988 <_reclaim_reent+0x94>
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fee0 	bl	800a748 <_free_r>
 8009988:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800998a:	b111      	cbz	r1, 8009992 <_reclaim_reent+0x9e>
 800998c:	4620      	mov	r0, r4
 800998e:	f000 fedb 	bl	800a748 <_free_r>
 8009992:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009994:	b111      	cbz	r1, 800999c <_reclaim_reent+0xa8>
 8009996:	4620      	mov	r0, r4
 8009998:	f000 fed6 	bl	800a748 <_free_r>
 800999c:	6a23      	ldr	r3, [r4, #32]
 800999e:	b11b      	cbz	r3, 80099a8 <_reclaim_reent+0xb4>
 80099a0:	4620      	mov	r0, r4
 80099a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099a6:	4718      	bx	r3
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
 80099aa:	bf00      	nop
 80099ac:	20000070 	.word	0x20000070

080099b0 <_lseek_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	@ (80099d0 <_lseek_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f8 fc61 	bl	8002286 <_lseek>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_lseek_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_lseek_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20006380 	.word	0x20006380

080099d4 <_read_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	@ (80099f4 <_read_r+0x20>)
 80099d8:	4604      	mov	r4, r0
 80099da:	4608      	mov	r0, r1
 80099dc:	4611      	mov	r1, r2
 80099de:	2200      	movs	r2, #0
 80099e0:	602a      	str	r2, [r5, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	f7f8 fc0b 	bl	80021fe <_read>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_read_r+0x1e>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_read_r+0x1e>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20006380 	.word	0x20006380

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	@ (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f7 fbca 	bl	80011a0 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20006380 	.word	0x20006380

08009a1c <__errno>:
 8009a1c:	4b01      	ldr	r3, [pc, #4]	@ (8009a24 <__errno+0x8>)
 8009a1e:	6818      	ldr	r0, [r3, #0]
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	20000070 	.word	0x20000070

08009a28 <__libc_init_array>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8009a60 <__libc_init_array+0x38>)
 8009a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a64 <__libc_init_array+0x3c>)
 8009a2e:	1b64      	subs	r4, r4, r5
 8009a30:	10a4      	asrs	r4, r4, #2
 8009a32:	2600      	movs	r6, #0
 8009a34:	42a6      	cmp	r6, r4
 8009a36:	d109      	bne.n	8009a4c <__libc_init_array+0x24>
 8009a38:	4d0b      	ldr	r5, [pc, #44]	@ (8009a68 <__libc_init_array+0x40>)
 8009a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a6c <__libc_init_array+0x44>)
 8009a3c:	f002 f8ce 	bl	800bbdc <_init>
 8009a40:	1b64      	subs	r4, r4, r5
 8009a42:	10a4      	asrs	r4, r4, #2
 8009a44:	2600      	movs	r6, #0
 8009a46:	42a6      	cmp	r6, r4
 8009a48:	d105      	bne.n	8009a56 <__libc_init_array+0x2e>
 8009a4a:	bd70      	pop	{r4, r5, r6, pc}
 8009a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a50:	4798      	blx	r3
 8009a52:	3601      	adds	r6, #1
 8009a54:	e7ee      	b.n	8009a34 <__libc_init_array+0xc>
 8009a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a5a:	4798      	blx	r3
 8009a5c:	3601      	adds	r6, #1
 8009a5e:	e7f2      	b.n	8009a46 <__libc_init_array+0x1e>
 8009a60:	0800c32c 	.word	0x0800c32c
 8009a64:	0800c32c 	.word	0x0800c32c
 8009a68:	0800c32c 	.word	0x0800c32c
 8009a6c:	0800c330 	.word	0x0800c330

08009a70 <__retarget_lock_init_recursive>:
 8009a70:	4770      	bx	lr

08009a72 <__retarget_lock_acquire_recursive>:
 8009a72:	4770      	bx	lr

08009a74 <__retarget_lock_release_recursive>:
 8009a74:	4770      	bx	lr

08009a76 <memcpy>:
 8009a76:	440a      	add	r2, r1
 8009a78:	4291      	cmp	r1, r2
 8009a7a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a7e:	d100      	bne.n	8009a82 <memcpy+0xc>
 8009a80:	4770      	bx	lr
 8009a82:	b510      	push	{r4, lr}
 8009a84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a8c:	4291      	cmp	r1, r2
 8009a8e:	d1f9      	bne.n	8009a84 <memcpy+0xe>
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <quorem>:
 8009a92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a96:	6903      	ldr	r3, [r0, #16]
 8009a98:	690c      	ldr	r4, [r1, #16]
 8009a9a:	42a3      	cmp	r3, r4
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	db7e      	blt.n	8009b9e <quorem+0x10c>
 8009aa0:	3c01      	subs	r4, #1
 8009aa2:	f101 0814 	add.w	r8, r1, #20
 8009aa6:	00a3      	lsls	r3, r4, #2
 8009aa8:	f100 0514 	add.w	r5, r0, #20
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009abc:	3301      	adds	r3, #1
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ac4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ac8:	d32e      	bcc.n	8009b28 <quorem+0x96>
 8009aca:	f04f 0a00 	mov.w	sl, #0
 8009ace:	46c4      	mov	ip, r8
 8009ad0:	46ae      	mov	lr, r5
 8009ad2:	46d3      	mov	fp, sl
 8009ad4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ad8:	b298      	uxth	r0, r3
 8009ada:	fb06 a000 	mla	r0, r6, r0, sl
 8009ade:	0c02      	lsrs	r2, r0, #16
 8009ae0:	0c1b      	lsrs	r3, r3, #16
 8009ae2:	fb06 2303 	mla	r3, r6, r3, r2
 8009ae6:	f8de 2000 	ldr.w	r2, [lr]
 8009aea:	b280      	uxth	r0, r0
 8009aec:	b292      	uxth	r2, r2
 8009aee:	1a12      	subs	r2, r2, r0
 8009af0:	445a      	add	r2, fp
 8009af2:	f8de 0000 	ldr.w	r0, [lr]
 8009af6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009b00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009b04:	b292      	uxth	r2, r2
 8009b06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b0a:	45e1      	cmp	r9, ip
 8009b0c:	f84e 2b04 	str.w	r2, [lr], #4
 8009b10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b14:	d2de      	bcs.n	8009ad4 <quorem+0x42>
 8009b16:	9b00      	ldr	r3, [sp, #0]
 8009b18:	58eb      	ldr	r3, [r5, r3]
 8009b1a:	b92b      	cbnz	r3, 8009b28 <quorem+0x96>
 8009b1c:	9b01      	ldr	r3, [sp, #4]
 8009b1e:	3b04      	subs	r3, #4
 8009b20:	429d      	cmp	r5, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	d32f      	bcc.n	8009b86 <quorem+0xf4>
 8009b26:	613c      	str	r4, [r7, #16]
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f001 f97f 	bl	800ae2c <__mcmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	db25      	blt.n	8009b7e <quorem+0xec>
 8009b32:	4629      	mov	r1, r5
 8009b34:	2000      	movs	r0, #0
 8009b36:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b3a:	f8d1 c000 	ldr.w	ip, [r1]
 8009b3e:	fa1f fe82 	uxth.w	lr, r2
 8009b42:	fa1f f38c 	uxth.w	r3, ip
 8009b46:	eba3 030e 	sub.w	r3, r3, lr
 8009b4a:	4403      	add	r3, r0
 8009b4c:	0c12      	lsrs	r2, r2, #16
 8009b4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b5c:	45c1      	cmp	r9, r8
 8009b5e:	f841 3b04 	str.w	r3, [r1], #4
 8009b62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b66:	d2e6      	bcs.n	8009b36 <quorem+0xa4>
 8009b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b70:	b922      	cbnz	r2, 8009b7c <quorem+0xea>
 8009b72:	3b04      	subs	r3, #4
 8009b74:	429d      	cmp	r5, r3
 8009b76:	461a      	mov	r2, r3
 8009b78:	d30b      	bcc.n	8009b92 <quorem+0x100>
 8009b7a:	613c      	str	r4, [r7, #16]
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	4630      	mov	r0, r6
 8009b80:	b003      	add	sp, #12
 8009b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	3b04      	subs	r3, #4
 8009b8a:	2a00      	cmp	r2, #0
 8009b8c:	d1cb      	bne.n	8009b26 <quorem+0x94>
 8009b8e:	3c01      	subs	r4, #1
 8009b90:	e7c6      	b.n	8009b20 <quorem+0x8e>
 8009b92:	6812      	ldr	r2, [r2, #0]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	2a00      	cmp	r2, #0
 8009b98:	d1ef      	bne.n	8009b7a <quorem+0xe8>
 8009b9a:	3c01      	subs	r4, #1
 8009b9c:	e7ea      	b.n	8009b74 <quorem+0xe2>
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	e7ee      	b.n	8009b80 <quorem+0xee>
 8009ba2:	0000      	movs	r0, r0
 8009ba4:	0000      	movs	r0, r0
	...

08009ba8 <_dtoa_r>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	69c7      	ldr	r7, [r0, #28]
 8009bae:	b097      	sub	sp, #92	@ 0x5c
 8009bb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009bb4:	ec55 4b10 	vmov	r4, r5, d0
 8009bb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009bba:	9107      	str	r1, [sp, #28]
 8009bbc:	4681      	mov	r9, r0
 8009bbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009bc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009bc2:	b97f      	cbnz	r7, 8009be4 <_dtoa_r+0x3c>
 8009bc4:	2010      	movs	r0, #16
 8009bc6:	f000 fe09 	bl	800a7dc <malloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009bd0:	b920      	cbnz	r0, 8009bdc <_dtoa_r+0x34>
 8009bd2:	4ba9      	ldr	r3, [pc, #676]	@ (8009e78 <_dtoa_r+0x2d0>)
 8009bd4:	21ef      	movs	r1, #239	@ 0xef
 8009bd6:	48a9      	ldr	r0, [pc, #676]	@ (8009e7c <_dtoa_r+0x2d4>)
 8009bd8:	f001 fce2 	bl	800b5a0 <__assert_func>
 8009bdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009be0:	6007      	str	r7, [r0, #0]
 8009be2:	60c7      	str	r7, [r0, #12]
 8009be4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009be8:	6819      	ldr	r1, [r3, #0]
 8009bea:	b159      	cbz	r1, 8009c04 <_dtoa_r+0x5c>
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	604a      	str	r2, [r1, #4]
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4093      	lsls	r3, r2
 8009bf4:	608b      	str	r3, [r1, #8]
 8009bf6:	4648      	mov	r0, r9
 8009bf8:	f000 fee6 	bl	800a9c8 <_Bfree>
 8009bfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	1e2b      	subs	r3, r5, #0
 8009c06:	bfb9      	ittee	lt
 8009c08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009c0c:	9305      	strlt	r3, [sp, #20]
 8009c0e:	2300      	movge	r3, #0
 8009c10:	6033      	strge	r3, [r6, #0]
 8009c12:	9f05      	ldr	r7, [sp, #20]
 8009c14:	4b9a      	ldr	r3, [pc, #616]	@ (8009e80 <_dtoa_r+0x2d8>)
 8009c16:	bfbc      	itt	lt
 8009c18:	2201      	movlt	r2, #1
 8009c1a:	6032      	strlt	r2, [r6, #0]
 8009c1c:	43bb      	bics	r3, r7
 8009c1e:	d112      	bne.n	8009c46 <_dtoa_r+0x9e>
 8009c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c2c:	4323      	orrs	r3, r4
 8009c2e:	f000 855a 	beq.w	800a6e6 <_dtoa_r+0xb3e>
 8009c32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009e94 <_dtoa_r+0x2ec>
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 855c 	beq.w	800a6f6 <_dtoa_r+0xb4e>
 8009c3e:	f10a 0303 	add.w	r3, sl, #3
 8009c42:	f000 bd56 	b.w	800a6f2 <_dtoa_r+0xb4a>
 8009c46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	ec51 0b17 	vmov	r0, r1, d7
 8009c50:	2300      	movs	r3, #0
 8009c52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009c56:	f7f6 ff67 	bl	8000b28 <__aeabi_dcmpeq>
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	b158      	cbz	r0, 8009c76 <_dtoa_r+0xce>
 8009c5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c60:	2301      	movs	r3, #1
 8009c62:	6013      	str	r3, [r2, #0]
 8009c64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c66:	b113      	cbz	r3, 8009c6e <_dtoa_r+0xc6>
 8009c68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c6a:	4b86      	ldr	r3, [pc, #536]	@ (8009e84 <_dtoa_r+0x2dc>)
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009e98 <_dtoa_r+0x2f0>
 8009c72:	f000 bd40 	b.w	800a6f6 <_dtoa_r+0xb4e>
 8009c76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009c7a:	aa14      	add	r2, sp, #80	@ 0x50
 8009c7c:	a915      	add	r1, sp, #84	@ 0x54
 8009c7e:	4648      	mov	r0, r9
 8009c80:	f001 f984 	bl	800af8c <__d2b>
 8009c84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c88:	9002      	str	r0, [sp, #8]
 8009c8a:	2e00      	cmp	r6, #0
 8009c8c:	d078      	beq.n	8009d80 <_dtoa_r+0x1d8>
 8009c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ca0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ca4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ca8:	4619      	mov	r1, r3
 8009caa:	2200      	movs	r2, #0
 8009cac:	4b76      	ldr	r3, [pc, #472]	@ (8009e88 <_dtoa_r+0x2e0>)
 8009cae:	f7f6 fb1b 	bl	80002e8 <__aeabi_dsub>
 8009cb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009e60 <_dtoa_r+0x2b8>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fcce 	bl	8000658 <__aeabi_dmul>
 8009cbc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009e68 <_dtoa_r+0x2c0>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fb13 	bl	80002ec <__adddf3>
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	4630      	mov	r0, r6
 8009cca:	460d      	mov	r5, r1
 8009ccc:	f7f6 fc5a 	bl	8000584 <__aeabi_i2d>
 8009cd0:	a367      	add	r3, pc, #412	@ (adr r3, 8009e70 <_dtoa_r+0x2c8>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fcbf 	bl	8000658 <__aeabi_dmul>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fb03 	bl	80002ec <__adddf3>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	f7f6 ff65 	bl	8000bb8 <__aeabi_d2iz>
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4607      	mov	r7, r0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f7f6 ff20 	bl	8000b3c <__aeabi_dcmplt>
 8009cfc:	b140      	cbz	r0, 8009d10 <_dtoa_r+0x168>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f7f6 fc40 	bl	8000584 <__aeabi_i2d>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	f7f6 ff0e 	bl	8000b28 <__aeabi_dcmpeq>
 8009d0c:	b900      	cbnz	r0, 8009d10 <_dtoa_r+0x168>
 8009d0e:	3f01      	subs	r7, #1
 8009d10:	2f16      	cmp	r7, #22
 8009d12:	d852      	bhi.n	8009dba <_dtoa_r+0x212>
 8009d14:	4b5d      	ldr	r3, [pc, #372]	@ (8009e8c <_dtoa_r+0x2e4>)
 8009d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d22:	f7f6 ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d049      	beq.n	8009dbe <_dtoa_r+0x216>
 8009d2a:	3f01      	subs	r7, #1
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d32:	1b9b      	subs	r3, r3, r6
 8009d34:	1e5a      	subs	r2, r3, #1
 8009d36:	bf45      	ittet	mi
 8009d38:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d3c:	9300      	strmi	r3, [sp, #0]
 8009d3e:	2300      	movpl	r3, #0
 8009d40:	2300      	movmi	r3, #0
 8009d42:	9206      	str	r2, [sp, #24]
 8009d44:	bf54      	ite	pl
 8009d46:	9300      	strpl	r3, [sp, #0]
 8009d48:	9306      	strmi	r3, [sp, #24]
 8009d4a:	2f00      	cmp	r7, #0
 8009d4c:	db39      	blt.n	8009dc2 <_dtoa_r+0x21a>
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	970d      	str	r7, [sp, #52]	@ 0x34
 8009d52:	443b      	add	r3, r7
 8009d54:	9306      	str	r3, [sp, #24]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9308      	str	r3, [sp, #32]
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d863      	bhi.n	8009e28 <_dtoa_r+0x280>
 8009d60:	2b05      	cmp	r3, #5
 8009d62:	bfc4      	itt	gt
 8009d64:	3b04      	subgt	r3, #4
 8009d66:	9307      	strgt	r3, [sp, #28]
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d6e:	bfcc      	ite	gt
 8009d70:	2400      	movgt	r4, #0
 8009d72:	2401      	movle	r4, #1
 8009d74:	2b03      	cmp	r3, #3
 8009d76:	d863      	bhi.n	8009e40 <_dtoa_r+0x298>
 8009d78:	e8df f003 	tbb	[pc, r3]
 8009d7c:	2b375452 	.word	0x2b375452
 8009d80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009d84:	441e      	add	r6, r3
 8009d86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	bfc1      	itttt	gt
 8009d8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d92:	409f      	lslgt	r7, r3
 8009d94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d9c:	bfd6      	itet	le
 8009d9e:	f1c3 0320 	rsble	r3, r3, #32
 8009da2:	ea47 0003 	orrgt.w	r0, r7, r3
 8009da6:	fa04 f003 	lslle.w	r0, r4, r3
 8009daa:	f7f6 fbdb 	bl	8000564 <__aeabi_ui2d>
 8009dae:	2201      	movs	r2, #1
 8009db0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009db4:	3e01      	subs	r6, #1
 8009db6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009db8:	e776      	b.n	8009ca8 <_dtoa_r+0x100>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e7b7      	b.n	8009d2e <_dtoa_r+0x186>
 8009dbe:	9010      	str	r0, [sp, #64]	@ 0x40
 8009dc0:	e7b6      	b.n	8009d30 <_dtoa_r+0x188>
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	1bdb      	subs	r3, r3, r7
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	427b      	negs	r3, r7
 8009dca:	9308      	str	r3, [sp, #32]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	930d      	str	r3, [sp, #52]	@ 0x34
 8009dd0:	e7c3      	b.n	8009d5a <_dtoa_r+0x1b2>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dd8:	eb07 0b03 	add.w	fp, r7, r3
 8009ddc:	f10b 0301 	add.w	r3, fp, #1
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	bfb8      	it	lt
 8009de6:	2301      	movlt	r3, #1
 8009de8:	e006      	b.n	8009df8 <_dtoa_r+0x250>
 8009dea:	2301      	movs	r3, #1
 8009dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dd28      	ble.n	8009e46 <_dtoa_r+0x29e>
 8009df4:	469b      	mov	fp, r3
 8009df6:	9303      	str	r3, [sp, #12]
 8009df8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	2204      	movs	r2, #4
 8009e00:	f102 0514 	add.w	r5, r2, #20
 8009e04:	429d      	cmp	r5, r3
 8009e06:	d926      	bls.n	8009e56 <_dtoa_r+0x2ae>
 8009e08:	6041      	str	r1, [r0, #4]
 8009e0a:	4648      	mov	r0, r9
 8009e0c:	f000 fd9c 	bl	800a948 <_Balloc>
 8009e10:	4682      	mov	sl, r0
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d142      	bne.n	8009e9c <_dtoa_r+0x2f4>
 8009e16:	4b1e      	ldr	r3, [pc, #120]	@ (8009e90 <_dtoa_r+0x2e8>)
 8009e18:	4602      	mov	r2, r0
 8009e1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e1e:	e6da      	b.n	8009bd6 <_dtoa_r+0x2e>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e7e3      	b.n	8009dec <_dtoa_r+0x244>
 8009e24:	2300      	movs	r3, #0
 8009e26:	e7d5      	b.n	8009dd4 <_dtoa_r+0x22c>
 8009e28:	2401      	movs	r4, #1
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9307      	str	r3, [sp, #28]
 8009e2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009e30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009e34:	2200      	movs	r2, #0
 8009e36:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e3a:	2312      	movs	r3, #18
 8009e3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e3e:	e7db      	b.n	8009df8 <_dtoa_r+0x250>
 8009e40:	2301      	movs	r3, #1
 8009e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e44:	e7f4      	b.n	8009e30 <_dtoa_r+0x288>
 8009e46:	f04f 0b01 	mov.w	fp, #1
 8009e4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e4e:	465b      	mov	r3, fp
 8009e50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009e54:	e7d0      	b.n	8009df8 <_dtoa_r+0x250>
 8009e56:	3101      	adds	r1, #1
 8009e58:	0052      	lsls	r2, r2, #1
 8009e5a:	e7d1      	b.n	8009e00 <_dtoa_r+0x258>
 8009e5c:	f3af 8000 	nop.w
 8009e60:	636f4361 	.word	0x636f4361
 8009e64:	3fd287a7 	.word	0x3fd287a7
 8009e68:	8b60c8b3 	.word	0x8b60c8b3
 8009e6c:	3fc68a28 	.word	0x3fc68a28
 8009e70:	509f79fb 	.word	0x509f79fb
 8009e74:	3fd34413 	.word	0x3fd34413
 8009e78:	0800bfe5 	.word	0x0800bfe5
 8009e7c:	0800bffc 	.word	0x0800bffc
 8009e80:	7ff00000 	.word	0x7ff00000
 8009e84:	0800bfb5 	.word	0x0800bfb5
 8009e88:	3ff80000 	.word	0x3ff80000
 8009e8c:	0800c150 	.word	0x0800c150
 8009e90:	0800c054 	.word	0x0800c054
 8009e94:	0800bfe1 	.word	0x0800bfe1
 8009e98:	0800bfb4 	.word	0x0800bfb4
 8009e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ea0:	6018      	str	r0, [r3, #0]
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	2b0e      	cmp	r3, #14
 8009ea6:	f200 80a1 	bhi.w	8009fec <_dtoa_r+0x444>
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	f000 809e 	beq.w	8009fec <_dtoa_r+0x444>
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	dd33      	ble.n	8009f1c <_dtoa_r+0x374>
 8009eb4:	4b9c      	ldr	r3, [pc, #624]	@ (800a128 <_dtoa_r+0x580>)
 8009eb6:	f007 020f 	and.w	r2, r7, #15
 8009eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ebe:	ed93 7b00 	vldr	d7, [r3]
 8009ec2:	05f8      	lsls	r0, r7, #23
 8009ec4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ecc:	d516      	bpl.n	8009efc <_dtoa_r+0x354>
 8009ece:	4b97      	ldr	r3, [pc, #604]	@ (800a12c <_dtoa_r+0x584>)
 8009ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed8:	f7f6 fce8 	bl	80008ac <__aeabi_ddiv>
 8009edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee0:	f004 040f 	and.w	r4, r4, #15
 8009ee4:	2603      	movs	r6, #3
 8009ee6:	4d91      	ldr	r5, [pc, #580]	@ (800a12c <_dtoa_r+0x584>)
 8009ee8:	b954      	cbnz	r4, 8009f00 <_dtoa_r+0x358>
 8009eea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef2:	f7f6 fcdb 	bl	80008ac <__aeabi_ddiv>
 8009ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009efa:	e028      	b.n	8009f4e <_dtoa_r+0x3a6>
 8009efc:	2602      	movs	r6, #2
 8009efe:	e7f2      	b.n	8009ee6 <_dtoa_r+0x33e>
 8009f00:	07e1      	lsls	r1, r4, #31
 8009f02:	d508      	bpl.n	8009f16 <_dtoa_r+0x36e>
 8009f04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f0c:	f7f6 fba4 	bl	8000658 <__aeabi_dmul>
 8009f10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f14:	3601      	adds	r6, #1
 8009f16:	1064      	asrs	r4, r4, #1
 8009f18:	3508      	adds	r5, #8
 8009f1a:	e7e5      	b.n	8009ee8 <_dtoa_r+0x340>
 8009f1c:	f000 80af 	beq.w	800a07e <_dtoa_r+0x4d6>
 8009f20:	427c      	negs	r4, r7
 8009f22:	4b81      	ldr	r3, [pc, #516]	@ (800a128 <_dtoa_r+0x580>)
 8009f24:	4d81      	ldr	r5, [pc, #516]	@ (800a12c <_dtoa_r+0x584>)
 8009f26:	f004 020f 	and.w	r2, r4, #15
 8009f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f36:	f7f6 fb8f 	bl	8000658 <__aeabi_dmul>
 8009f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f3e:	1124      	asrs	r4, r4, #4
 8009f40:	2300      	movs	r3, #0
 8009f42:	2602      	movs	r6, #2
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	f040 808f 	bne.w	800a068 <_dtoa_r+0x4c0>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1d3      	bne.n	8009ef6 <_dtoa_r+0x34e>
 8009f4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8094 	beq.w	800a082 <_dtoa_r+0x4da>
 8009f5a:	4b75      	ldr	r3, [pc, #468]	@ (800a130 <_dtoa_r+0x588>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 fdeb 	bl	8000b3c <__aeabi_dcmplt>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f000 808b 	beq.w	800a082 <_dtoa_r+0x4da>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 8087 	beq.w	800a082 <_dtoa_r+0x4da>
 8009f74:	f1bb 0f00 	cmp.w	fp, #0
 8009f78:	dd34      	ble.n	8009fe4 <_dtoa_r+0x43c>
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4b6d      	ldr	r3, [pc, #436]	@ (800a134 <_dtoa_r+0x58c>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7f6 fb69 	bl	8000658 <__aeabi_dmul>
 8009f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f8a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009f8e:	3601      	adds	r6, #1
 8009f90:	465c      	mov	r4, fp
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7f6 faf6 	bl	8000584 <__aeabi_i2d>
 8009f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f9c:	f7f6 fb5c 	bl	8000658 <__aeabi_dmul>
 8009fa0:	4b65      	ldr	r3, [pc, #404]	@ (800a138 <_dtoa_r+0x590>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f7f6 f9a2 	bl	80002ec <__adddf3>
 8009fa8:	4605      	mov	r5, r0
 8009faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	d16a      	bne.n	800a088 <_dtoa_r+0x4e0>
 8009fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fb6:	4b61      	ldr	r3, [pc, #388]	@ (800a13c <_dtoa_r+0x594>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f7f6 f995 	bl	80002e8 <__aeabi_dsub>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	4633      	mov	r3, r6
 8009fca:	f7f6 fdd5 	bl	8000b78 <__aeabi_dcmpgt>
 8009fce:	2800      	cmp	r0, #0
 8009fd0:	f040 8298 	bne.w	800a504 <_dtoa_r+0x95c>
 8009fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fd8:	462a      	mov	r2, r5
 8009fda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fde:	f7f6 fdad 	bl	8000b3c <__aeabi_dcmplt>
 8009fe2:	bb38      	cbnz	r0, 800a034 <_dtoa_r+0x48c>
 8009fe4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009fe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009fec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f2c0 8157 	blt.w	800a2a2 <_dtoa_r+0x6fa>
 8009ff4:	2f0e      	cmp	r7, #14
 8009ff6:	f300 8154 	bgt.w	800a2a2 <_dtoa_r+0x6fa>
 8009ffa:	4b4b      	ldr	r3, [pc, #300]	@ (800a128 <_dtoa_r+0x580>)
 8009ffc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a000:	ed93 7b00 	vldr	d7, [r3]
 800a004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a006:	2b00      	cmp	r3, #0
 800a008:	ed8d 7b00 	vstr	d7, [sp]
 800a00c:	f280 80e5 	bge.w	800a1da <_dtoa_r+0x632>
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f300 80e1 	bgt.w	800a1da <_dtoa_r+0x632>
 800a018:	d10c      	bne.n	800a034 <_dtoa_r+0x48c>
 800a01a:	4b48      	ldr	r3, [pc, #288]	@ (800a13c <_dtoa_r+0x594>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	ec51 0b17 	vmov	r0, r1, d7
 800a022:	f7f6 fb19 	bl	8000658 <__aeabi_dmul>
 800a026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a02a:	f7f6 fd9b 	bl	8000b64 <__aeabi_dcmpge>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f000 8266 	beq.w	800a500 <_dtoa_r+0x958>
 800a034:	2400      	movs	r4, #0
 800a036:	4625      	mov	r5, r4
 800a038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a03a:	4656      	mov	r6, sl
 800a03c:	ea6f 0803 	mvn.w	r8, r3
 800a040:	2700      	movs	r7, #0
 800a042:	4621      	mov	r1, r4
 800a044:	4648      	mov	r0, r9
 800a046:	f000 fcbf 	bl	800a9c8 <_Bfree>
 800a04a:	2d00      	cmp	r5, #0
 800a04c:	f000 80bd 	beq.w	800a1ca <_dtoa_r+0x622>
 800a050:	b12f      	cbz	r7, 800a05e <_dtoa_r+0x4b6>
 800a052:	42af      	cmp	r7, r5
 800a054:	d003      	beq.n	800a05e <_dtoa_r+0x4b6>
 800a056:	4639      	mov	r1, r7
 800a058:	4648      	mov	r0, r9
 800a05a:	f000 fcb5 	bl	800a9c8 <_Bfree>
 800a05e:	4629      	mov	r1, r5
 800a060:	4648      	mov	r0, r9
 800a062:	f000 fcb1 	bl	800a9c8 <_Bfree>
 800a066:	e0b0      	b.n	800a1ca <_dtoa_r+0x622>
 800a068:	07e2      	lsls	r2, r4, #31
 800a06a:	d505      	bpl.n	800a078 <_dtoa_r+0x4d0>
 800a06c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a070:	f7f6 faf2 	bl	8000658 <__aeabi_dmul>
 800a074:	3601      	adds	r6, #1
 800a076:	2301      	movs	r3, #1
 800a078:	1064      	asrs	r4, r4, #1
 800a07a:	3508      	adds	r5, #8
 800a07c:	e762      	b.n	8009f44 <_dtoa_r+0x39c>
 800a07e:	2602      	movs	r6, #2
 800a080:	e765      	b.n	8009f4e <_dtoa_r+0x3a6>
 800a082:	9c03      	ldr	r4, [sp, #12]
 800a084:	46b8      	mov	r8, r7
 800a086:	e784      	b.n	8009f92 <_dtoa_r+0x3ea>
 800a088:	4b27      	ldr	r3, [pc, #156]	@ (800a128 <_dtoa_r+0x580>)
 800a08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a08c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a094:	4454      	add	r4, sl
 800a096:	2900      	cmp	r1, #0
 800a098:	d054      	beq.n	800a144 <_dtoa_r+0x59c>
 800a09a:	4929      	ldr	r1, [pc, #164]	@ (800a140 <_dtoa_r+0x598>)
 800a09c:	2000      	movs	r0, #0
 800a09e:	f7f6 fc05 	bl	80008ac <__aeabi_ddiv>
 800a0a2:	4633      	mov	r3, r6
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	f7f6 f91f 	bl	80002e8 <__aeabi_dsub>
 800a0aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0ae:	4656      	mov	r6, sl
 800a0b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0b4:	f7f6 fd80 	bl	8000bb8 <__aeabi_d2iz>
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	f7f6 fa63 	bl	8000584 <__aeabi_i2d>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0c6:	f7f6 f90f 	bl	80002e8 <__aeabi_dsub>
 800a0ca:	3530      	adds	r5, #48	@ 0x30
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a0d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0dc:	f7f6 fd2e 	bl	8000b3c <__aeabi_dcmplt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d172      	bne.n	800a1ca <_dtoa_r+0x622>
 800a0e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e8:	4911      	ldr	r1, [pc, #68]	@ (800a130 <_dtoa_r+0x588>)
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f7f6 f8fc 	bl	80002e8 <__aeabi_dsub>
 800a0f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0f4:	f7f6 fd22 	bl	8000b3c <__aeabi_dcmplt>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	f040 80b4 	bne.w	800a266 <_dtoa_r+0x6be>
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	f43f af70 	beq.w	8009fe4 <_dtoa_r+0x43c>
 800a104:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a108:	4b0a      	ldr	r3, [pc, #40]	@ (800a134 <_dtoa_r+0x58c>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	f7f6 faa4 	bl	8000658 <__aeabi_dmul>
 800a110:	4b08      	ldr	r3, [pc, #32]	@ (800a134 <_dtoa_r+0x58c>)
 800a112:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a116:	2200      	movs	r2, #0
 800a118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a11c:	f7f6 fa9c 	bl	8000658 <__aeabi_dmul>
 800a120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a124:	e7c4      	b.n	800a0b0 <_dtoa_r+0x508>
 800a126:	bf00      	nop
 800a128:	0800c150 	.word	0x0800c150
 800a12c:	0800c128 	.word	0x0800c128
 800a130:	3ff00000 	.word	0x3ff00000
 800a134:	40240000 	.word	0x40240000
 800a138:	401c0000 	.word	0x401c0000
 800a13c:	40140000 	.word	0x40140000
 800a140:	3fe00000 	.word	0x3fe00000
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	f7f6 fa86 	bl	8000658 <__aeabi_dmul>
 800a14c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a150:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a152:	4656      	mov	r6, sl
 800a154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a158:	f7f6 fd2e 	bl	8000bb8 <__aeabi_d2iz>
 800a15c:	4605      	mov	r5, r0
 800a15e:	f7f6 fa11 	bl	8000584 <__aeabi_i2d>
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a16a:	f7f6 f8bd 	bl	80002e8 <__aeabi_dsub>
 800a16e:	3530      	adds	r5, #48	@ 0x30
 800a170:	f806 5b01 	strb.w	r5, [r6], #1
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	42a6      	cmp	r6, r4
 800a17a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	d124      	bne.n	800a1ce <_dtoa_r+0x626>
 800a184:	4baf      	ldr	r3, [pc, #700]	@ (800a444 <_dtoa_r+0x89c>)
 800a186:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a18a:	f7f6 f8af 	bl	80002ec <__adddf3>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a196:	f7f6 fcef 	bl	8000b78 <__aeabi_dcmpgt>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d163      	bne.n	800a266 <_dtoa_r+0x6be>
 800a19e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a1a2:	49a8      	ldr	r1, [pc, #672]	@ (800a444 <_dtoa_r+0x89c>)
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	f7f6 f89f 	bl	80002e8 <__aeabi_dsub>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1b2:	f7f6 fcc3 	bl	8000b3c <__aeabi_dcmplt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	f43f af14 	beq.w	8009fe4 <_dtoa_r+0x43c>
 800a1bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a1be:	1e73      	subs	r3, r6, #1
 800a1c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1c6:	2b30      	cmp	r3, #48	@ 0x30
 800a1c8:	d0f8      	beq.n	800a1bc <_dtoa_r+0x614>
 800a1ca:	4647      	mov	r7, r8
 800a1cc:	e03b      	b.n	800a246 <_dtoa_r+0x69e>
 800a1ce:	4b9e      	ldr	r3, [pc, #632]	@ (800a448 <_dtoa_r+0x8a0>)
 800a1d0:	f7f6 fa42 	bl	8000658 <__aeabi_dmul>
 800a1d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1d8:	e7bc      	b.n	800a154 <_dtoa_r+0x5ac>
 800a1da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a1de:	4656      	mov	r6, sl
 800a1e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	f7f6 fb60 	bl	80008ac <__aeabi_ddiv>
 800a1ec:	f7f6 fce4 	bl	8000bb8 <__aeabi_d2iz>
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	f7f6 f9c7 	bl	8000584 <__aeabi_i2d>
 800a1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fa:	f7f6 fa2d 	bl	8000658 <__aeabi_dmul>
 800a1fe:	4602      	mov	r2, r0
 800a200:	460b      	mov	r3, r1
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a20a:	f7f6 f86d 	bl	80002e8 <__aeabi_dsub>
 800a20e:	f806 4b01 	strb.w	r4, [r6], #1
 800a212:	9d03      	ldr	r5, [sp, #12]
 800a214:	eba6 040a 	sub.w	r4, r6, sl
 800a218:	42a5      	cmp	r5, r4
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	d133      	bne.n	800a288 <_dtoa_r+0x6e0>
 800a220:	f7f6 f864 	bl	80002ec <__adddf3>
 800a224:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a228:	4604      	mov	r4, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	f7f6 fca4 	bl	8000b78 <__aeabi_dcmpgt>
 800a230:	b9c0      	cbnz	r0, 800a264 <_dtoa_r+0x6bc>
 800a232:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 fc75 	bl	8000b28 <__aeabi_dcmpeq>
 800a23e:	b110      	cbz	r0, 800a246 <_dtoa_r+0x69e>
 800a240:	f018 0f01 	tst.w	r8, #1
 800a244:	d10e      	bne.n	800a264 <_dtoa_r+0x6bc>
 800a246:	9902      	ldr	r1, [sp, #8]
 800a248:	4648      	mov	r0, r9
 800a24a:	f000 fbbd 	bl	800a9c8 <_Bfree>
 800a24e:	2300      	movs	r3, #0
 800a250:	7033      	strb	r3, [r6, #0]
 800a252:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a254:	3701      	adds	r7, #1
 800a256:	601f      	str	r7, [r3, #0]
 800a258:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 824b 	beq.w	800a6f6 <_dtoa_r+0xb4e>
 800a260:	601e      	str	r6, [r3, #0]
 800a262:	e248      	b.n	800a6f6 <_dtoa_r+0xb4e>
 800a264:	46b8      	mov	r8, r7
 800a266:	4633      	mov	r3, r6
 800a268:	461e      	mov	r6, r3
 800a26a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a26e:	2a39      	cmp	r2, #57	@ 0x39
 800a270:	d106      	bne.n	800a280 <_dtoa_r+0x6d8>
 800a272:	459a      	cmp	sl, r3
 800a274:	d1f8      	bne.n	800a268 <_dtoa_r+0x6c0>
 800a276:	2230      	movs	r2, #48	@ 0x30
 800a278:	f108 0801 	add.w	r8, r8, #1
 800a27c:	f88a 2000 	strb.w	r2, [sl]
 800a280:	781a      	ldrb	r2, [r3, #0]
 800a282:	3201      	adds	r2, #1
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e7a0      	b.n	800a1ca <_dtoa_r+0x622>
 800a288:	4b6f      	ldr	r3, [pc, #444]	@ (800a448 <_dtoa_r+0x8a0>)
 800a28a:	2200      	movs	r2, #0
 800a28c:	f7f6 f9e4 	bl	8000658 <__aeabi_dmul>
 800a290:	2200      	movs	r2, #0
 800a292:	2300      	movs	r3, #0
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	f7f6 fc46 	bl	8000b28 <__aeabi_dcmpeq>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d09f      	beq.n	800a1e0 <_dtoa_r+0x638>
 800a2a0:	e7d1      	b.n	800a246 <_dtoa_r+0x69e>
 800a2a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	f000 80ea 	beq.w	800a47e <_dtoa_r+0x8d6>
 800a2aa:	9a07      	ldr	r2, [sp, #28]
 800a2ac:	2a01      	cmp	r2, #1
 800a2ae:	f300 80cd 	bgt.w	800a44c <_dtoa_r+0x8a4>
 800a2b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	f000 80c1 	beq.w	800a43c <_dtoa_r+0x894>
 800a2ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2be:	9c08      	ldr	r4, [sp, #32]
 800a2c0:	9e00      	ldr	r6, [sp, #0]
 800a2c2:	9a00      	ldr	r2, [sp, #0]
 800a2c4:	441a      	add	r2, r3
 800a2c6:	9200      	str	r2, [sp, #0]
 800a2c8:	9a06      	ldr	r2, [sp, #24]
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	441a      	add	r2, r3
 800a2ce:	4648      	mov	r0, r9
 800a2d0:	9206      	str	r2, [sp, #24]
 800a2d2:	f000 fc2d 	bl	800ab30 <__i2b>
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	b166      	cbz	r6, 800a2f4 <_dtoa_r+0x74c>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	dd09      	ble.n	800a2f4 <_dtoa_r+0x74c>
 800a2e0:	42b3      	cmp	r3, r6
 800a2e2:	9a00      	ldr	r2, [sp, #0]
 800a2e4:	bfa8      	it	ge
 800a2e6:	4633      	movge	r3, r6
 800a2e8:	1ad2      	subs	r2, r2, r3
 800a2ea:	9200      	str	r2, [sp, #0]
 800a2ec:	9a06      	ldr	r2, [sp, #24]
 800a2ee:	1af6      	subs	r6, r6, r3
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	9306      	str	r3, [sp, #24]
 800a2f4:	9b08      	ldr	r3, [sp, #32]
 800a2f6:	b30b      	cbz	r3, 800a33c <_dtoa_r+0x794>
 800a2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80c6 	beq.w	800a48c <_dtoa_r+0x8e4>
 800a300:	2c00      	cmp	r4, #0
 800a302:	f000 80c0 	beq.w	800a486 <_dtoa_r+0x8de>
 800a306:	4629      	mov	r1, r5
 800a308:	4622      	mov	r2, r4
 800a30a:	4648      	mov	r0, r9
 800a30c:	f000 fcc8 	bl	800aca0 <__pow5mult>
 800a310:	9a02      	ldr	r2, [sp, #8]
 800a312:	4601      	mov	r1, r0
 800a314:	4605      	mov	r5, r0
 800a316:	4648      	mov	r0, r9
 800a318:	f000 fc20 	bl	800ab5c <__multiply>
 800a31c:	9902      	ldr	r1, [sp, #8]
 800a31e:	4680      	mov	r8, r0
 800a320:	4648      	mov	r0, r9
 800a322:	f000 fb51 	bl	800a9c8 <_Bfree>
 800a326:	9b08      	ldr	r3, [sp, #32]
 800a328:	1b1b      	subs	r3, r3, r4
 800a32a:	9308      	str	r3, [sp, #32]
 800a32c:	f000 80b1 	beq.w	800a492 <_dtoa_r+0x8ea>
 800a330:	9a08      	ldr	r2, [sp, #32]
 800a332:	4641      	mov	r1, r8
 800a334:	4648      	mov	r0, r9
 800a336:	f000 fcb3 	bl	800aca0 <__pow5mult>
 800a33a:	9002      	str	r0, [sp, #8]
 800a33c:	2101      	movs	r1, #1
 800a33e:	4648      	mov	r0, r9
 800a340:	f000 fbf6 	bl	800ab30 <__i2b>
 800a344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a346:	4604      	mov	r4, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 81d8 	beq.w	800a6fe <_dtoa_r+0xb56>
 800a34e:	461a      	mov	r2, r3
 800a350:	4601      	mov	r1, r0
 800a352:	4648      	mov	r0, r9
 800a354:	f000 fca4 	bl	800aca0 <__pow5mult>
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	4604      	mov	r4, r0
 800a35e:	f300 809f 	bgt.w	800a4a0 <_dtoa_r+0x8f8>
 800a362:	9b04      	ldr	r3, [sp, #16]
 800a364:	2b00      	cmp	r3, #0
 800a366:	f040 8097 	bne.w	800a498 <_dtoa_r+0x8f0>
 800a36a:	9b05      	ldr	r3, [sp, #20]
 800a36c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a370:	2b00      	cmp	r3, #0
 800a372:	f040 8093 	bne.w	800a49c <_dtoa_r+0x8f4>
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a37c:	0d1b      	lsrs	r3, r3, #20
 800a37e:	051b      	lsls	r3, r3, #20
 800a380:	b133      	cbz	r3, 800a390 <_dtoa_r+0x7e8>
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	9b06      	ldr	r3, [sp, #24]
 800a38a:	3301      	adds	r3, #1
 800a38c:	9306      	str	r3, [sp, #24]
 800a38e:	2301      	movs	r3, #1
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 81b8 	beq.w	800a70a <_dtoa_r+0xb62>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a3a0:	6918      	ldr	r0, [r3, #16]
 800a3a2:	f000 fb79 	bl	800aa98 <__hi0bits>
 800a3a6:	f1c0 0020 	rsb	r0, r0, #32
 800a3aa:	9b06      	ldr	r3, [sp, #24]
 800a3ac:	4418      	add	r0, r3
 800a3ae:	f010 001f 	ands.w	r0, r0, #31
 800a3b2:	f000 8082 	beq.w	800a4ba <_dtoa_r+0x912>
 800a3b6:	f1c0 0320 	rsb	r3, r0, #32
 800a3ba:	2b04      	cmp	r3, #4
 800a3bc:	dd73      	ble.n	800a4a6 <_dtoa_r+0x8fe>
 800a3be:	9b00      	ldr	r3, [sp, #0]
 800a3c0:	f1c0 001c 	rsb	r0, r0, #28
 800a3c4:	4403      	add	r3, r0
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	9b06      	ldr	r3, [sp, #24]
 800a3ca:	4403      	add	r3, r0
 800a3cc:	4406      	add	r6, r0
 800a3ce:	9306      	str	r3, [sp, #24]
 800a3d0:	9b00      	ldr	r3, [sp, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dd05      	ble.n	800a3e2 <_dtoa_r+0x83a>
 800a3d6:	9902      	ldr	r1, [sp, #8]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	4648      	mov	r0, r9
 800a3dc:	f000 fcba 	bl	800ad54 <__lshift>
 800a3e0:	9002      	str	r0, [sp, #8]
 800a3e2:	9b06      	ldr	r3, [sp, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd05      	ble.n	800a3f4 <_dtoa_r+0x84c>
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	4648      	mov	r0, r9
 800a3ee:	f000 fcb1 	bl	800ad54 <__lshift>
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d061      	beq.n	800a4be <_dtoa_r+0x916>
 800a3fa:	9802      	ldr	r0, [sp, #8]
 800a3fc:	4621      	mov	r1, r4
 800a3fe:	f000 fd15 	bl	800ae2c <__mcmp>
 800a402:	2800      	cmp	r0, #0
 800a404:	da5b      	bge.n	800a4be <_dtoa_r+0x916>
 800a406:	2300      	movs	r3, #0
 800a408:	9902      	ldr	r1, [sp, #8]
 800a40a:	220a      	movs	r2, #10
 800a40c:	4648      	mov	r0, r9
 800a40e:	f000 fafd 	bl	800aa0c <__multadd>
 800a412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a414:	9002      	str	r0, [sp, #8]
 800a416:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 8177 	beq.w	800a70e <_dtoa_r+0xb66>
 800a420:	4629      	mov	r1, r5
 800a422:	2300      	movs	r3, #0
 800a424:	220a      	movs	r2, #10
 800a426:	4648      	mov	r0, r9
 800a428:	f000 faf0 	bl	800aa0c <__multadd>
 800a42c:	f1bb 0f00 	cmp.w	fp, #0
 800a430:	4605      	mov	r5, r0
 800a432:	dc6f      	bgt.n	800a514 <_dtoa_r+0x96c>
 800a434:	9b07      	ldr	r3, [sp, #28]
 800a436:	2b02      	cmp	r3, #2
 800a438:	dc49      	bgt.n	800a4ce <_dtoa_r+0x926>
 800a43a:	e06b      	b.n	800a514 <_dtoa_r+0x96c>
 800a43c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a43e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a442:	e73c      	b.n	800a2be <_dtoa_r+0x716>
 800a444:	3fe00000 	.word	0x3fe00000
 800a448:	40240000 	.word	0x40240000
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	1e5c      	subs	r4, r3, #1
 800a450:	9b08      	ldr	r3, [sp, #32]
 800a452:	42a3      	cmp	r3, r4
 800a454:	db09      	blt.n	800a46a <_dtoa_r+0x8c2>
 800a456:	1b1c      	subs	r4, r3, r4
 800a458:	9b03      	ldr	r3, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f6bf af30 	bge.w	800a2c0 <_dtoa_r+0x718>
 800a460:	9b00      	ldr	r3, [sp, #0]
 800a462:	9a03      	ldr	r2, [sp, #12]
 800a464:	1a9e      	subs	r6, r3, r2
 800a466:	2300      	movs	r3, #0
 800a468:	e72b      	b.n	800a2c2 <_dtoa_r+0x71a>
 800a46a:	9b08      	ldr	r3, [sp, #32]
 800a46c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a46e:	9408      	str	r4, [sp, #32]
 800a470:	1ae3      	subs	r3, r4, r3
 800a472:	441a      	add	r2, r3
 800a474:	9e00      	ldr	r6, [sp, #0]
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	920d      	str	r2, [sp, #52]	@ 0x34
 800a47a:	2400      	movs	r4, #0
 800a47c:	e721      	b.n	800a2c2 <_dtoa_r+0x71a>
 800a47e:	9c08      	ldr	r4, [sp, #32]
 800a480:	9e00      	ldr	r6, [sp, #0]
 800a482:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a484:	e728      	b.n	800a2d8 <_dtoa_r+0x730>
 800a486:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a48a:	e751      	b.n	800a330 <_dtoa_r+0x788>
 800a48c:	9a08      	ldr	r2, [sp, #32]
 800a48e:	9902      	ldr	r1, [sp, #8]
 800a490:	e750      	b.n	800a334 <_dtoa_r+0x78c>
 800a492:	f8cd 8008 	str.w	r8, [sp, #8]
 800a496:	e751      	b.n	800a33c <_dtoa_r+0x794>
 800a498:	2300      	movs	r3, #0
 800a49a:	e779      	b.n	800a390 <_dtoa_r+0x7e8>
 800a49c:	9b04      	ldr	r3, [sp, #16]
 800a49e:	e777      	b.n	800a390 <_dtoa_r+0x7e8>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9308      	str	r3, [sp, #32]
 800a4a4:	e779      	b.n	800a39a <_dtoa_r+0x7f2>
 800a4a6:	d093      	beq.n	800a3d0 <_dtoa_r+0x828>
 800a4a8:	9a00      	ldr	r2, [sp, #0]
 800a4aa:	331c      	adds	r3, #28
 800a4ac:	441a      	add	r2, r3
 800a4ae:	9200      	str	r2, [sp, #0]
 800a4b0:	9a06      	ldr	r2, [sp, #24]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	441e      	add	r6, r3
 800a4b6:	9206      	str	r2, [sp, #24]
 800a4b8:	e78a      	b.n	800a3d0 <_dtoa_r+0x828>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	e7f4      	b.n	800a4a8 <_dtoa_r+0x900>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	46b8      	mov	r8, r7
 800a4c4:	dc20      	bgt.n	800a508 <_dtoa_r+0x960>
 800a4c6:	469b      	mov	fp, r3
 800a4c8:	9b07      	ldr	r3, [sp, #28]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	dd1e      	ble.n	800a50c <_dtoa_r+0x964>
 800a4ce:	f1bb 0f00 	cmp.w	fp, #0
 800a4d2:	f47f adb1 	bne.w	800a038 <_dtoa_r+0x490>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	465b      	mov	r3, fp
 800a4da:	2205      	movs	r2, #5
 800a4dc:	4648      	mov	r0, r9
 800a4de:	f000 fa95 	bl	800aa0c <__multadd>
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	9802      	ldr	r0, [sp, #8]
 800a4e8:	f000 fca0 	bl	800ae2c <__mcmp>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f77f ada3 	ble.w	800a038 <_dtoa_r+0x490>
 800a4f2:	4656      	mov	r6, sl
 800a4f4:	2331      	movs	r3, #49	@ 0x31
 800a4f6:	f806 3b01 	strb.w	r3, [r6], #1
 800a4fa:	f108 0801 	add.w	r8, r8, #1
 800a4fe:	e59f      	b.n	800a040 <_dtoa_r+0x498>
 800a500:	9c03      	ldr	r4, [sp, #12]
 800a502:	46b8      	mov	r8, r7
 800a504:	4625      	mov	r5, r4
 800a506:	e7f4      	b.n	800a4f2 <_dtoa_r+0x94a>
 800a508:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8101 	beq.w	800a716 <_dtoa_r+0xb6e>
 800a514:	2e00      	cmp	r6, #0
 800a516:	dd05      	ble.n	800a524 <_dtoa_r+0x97c>
 800a518:	4629      	mov	r1, r5
 800a51a:	4632      	mov	r2, r6
 800a51c:	4648      	mov	r0, r9
 800a51e:	f000 fc19 	bl	800ad54 <__lshift>
 800a522:	4605      	mov	r5, r0
 800a524:	9b08      	ldr	r3, [sp, #32]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d05c      	beq.n	800a5e4 <_dtoa_r+0xa3c>
 800a52a:	6869      	ldr	r1, [r5, #4]
 800a52c:	4648      	mov	r0, r9
 800a52e:	f000 fa0b 	bl	800a948 <_Balloc>
 800a532:	4606      	mov	r6, r0
 800a534:	b928      	cbnz	r0, 800a542 <_dtoa_r+0x99a>
 800a536:	4b82      	ldr	r3, [pc, #520]	@ (800a740 <_dtoa_r+0xb98>)
 800a538:	4602      	mov	r2, r0
 800a53a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a53e:	f7ff bb4a 	b.w	8009bd6 <_dtoa_r+0x2e>
 800a542:	692a      	ldr	r2, [r5, #16]
 800a544:	3202      	adds	r2, #2
 800a546:	0092      	lsls	r2, r2, #2
 800a548:	f105 010c 	add.w	r1, r5, #12
 800a54c:	300c      	adds	r0, #12
 800a54e:	f7ff fa92 	bl	8009a76 <memcpy>
 800a552:	2201      	movs	r2, #1
 800a554:	4631      	mov	r1, r6
 800a556:	4648      	mov	r0, r9
 800a558:	f000 fbfc 	bl	800ad54 <__lshift>
 800a55c:	f10a 0301 	add.w	r3, sl, #1
 800a560:	9300      	str	r3, [sp, #0]
 800a562:	eb0a 030b 	add.w	r3, sl, fp
 800a566:	9308      	str	r3, [sp, #32]
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	462f      	mov	r7, r5
 800a570:	9306      	str	r3, [sp, #24]
 800a572:	4605      	mov	r5, r0
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	9802      	ldr	r0, [sp, #8]
 800a578:	4621      	mov	r1, r4
 800a57a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a57e:	f7ff fa88 	bl	8009a92 <quorem>
 800a582:	4603      	mov	r3, r0
 800a584:	3330      	adds	r3, #48	@ 0x30
 800a586:	9003      	str	r0, [sp, #12]
 800a588:	4639      	mov	r1, r7
 800a58a:	9802      	ldr	r0, [sp, #8]
 800a58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a58e:	f000 fc4d 	bl	800ae2c <__mcmp>
 800a592:	462a      	mov	r2, r5
 800a594:	9004      	str	r0, [sp, #16]
 800a596:	4621      	mov	r1, r4
 800a598:	4648      	mov	r0, r9
 800a59a:	f000 fc63 	bl	800ae64 <__mdiff>
 800a59e:	68c2      	ldr	r2, [r0, #12]
 800a5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a2:	4606      	mov	r6, r0
 800a5a4:	bb02      	cbnz	r2, 800a5e8 <_dtoa_r+0xa40>
 800a5a6:	4601      	mov	r1, r0
 800a5a8:	9802      	ldr	r0, [sp, #8]
 800a5aa:	f000 fc3f 	bl	800ae2c <__mcmp>
 800a5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4648      	mov	r0, r9
 800a5b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ba:	f000 fa05 	bl	800a9c8 <_Bfree>
 800a5be:	9b07      	ldr	r3, [sp, #28]
 800a5c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5c2:	9e00      	ldr	r6, [sp, #0]
 800a5c4:	ea42 0103 	orr.w	r1, r2, r3
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	4319      	orrs	r1, r3
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	d10d      	bne.n	800a5ec <_dtoa_r+0xa44>
 800a5d0:	2b39      	cmp	r3, #57	@ 0x39
 800a5d2:	d027      	beq.n	800a624 <_dtoa_r+0xa7c>
 800a5d4:	9a04      	ldr	r2, [sp, #16]
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	dd01      	ble.n	800a5de <_dtoa_r+0xa36>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	3331      	adds	r3, #49	@ 0x31
 800a5de:	f88b 3000 	strb.w	r3, [fp]
 800a5e2:	e52e      	b.n	800a042 <_dtoa_r+0x49a>
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	e7b9      	b.n	800a55c <_dtoa_r+0x9b4>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	e7e2      	b.n	800a5b2 <_dtoa_r+0xa0a>
 800a5ec:	9904      	ldr	r1, [sp, #16]
 800a5ee:	2900      	cmp	r1, #0
 800a5f0:	db04      	blt.n	800a5fc <_dtoa_r+0xa54>
 800a5f2:	9807      	ldr	r0, [sp, #28]
 800a5f4:	4301      	orrs	r1, r0
 800a5f6:	9806      	ldr	r0, [sp, #24]
 800a5f8:	4301      	orrs	r1, r0
 800a5fa:	d120      	bne.n	800a63e <_dtoa_r+0xa96>
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	ddee      	ble.n	800a5de <_dtoa_r+0xa36>
 800a600:	9902      	ldr	r1, [sp, #8]
 800a602:	9300      	str	r3, [sp, #0]
 800a604:	2201      	movs	r2, #1
 800a606:	4648      	mov	r0, r9
 800a608:	f000 fba4 	bl	800ad54 <__lshift>
 800a60c:	4621      	mov	r1, r4
 800a60e:	9002      	str	r0, [sp, #8]
 800a610:	f000 fc0c 	bl	800ae2c <__mcmp>
 800a614:	2800      	cmp	r0, #0
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	dc02      	bgt.n	800a620 <_dtoa_r+0xa78>
 800a61a:	d1e0      	bne.n	800a5de <_dtoa_r+0xa36>
 800a61c:	07da      	lsls	r2, r3, #31
 800a61e:	d5de      	bpl.n	800a5de <_dtoa_r+0xa36>
 800a620:	2b39      	cmp	r3, #57	@ 0x39
 800a622:	d1da      	bne.n	800a5da <_dtoa_r+0xa32>
 800a624:	2339      	movs	r3, #57	@ 0x39
 800a626:	f88b 3000 	strb.w	r3, [fp]
 800a62a:	4633      	mov	r3, r6
 800a62c:	461e      	mov	r6, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a634:	2a39      	cmp	r2, #57	@ 0x39
 800a636:	d04e      	beq.n	800a6d6 <_dtoa_r+0xb2e>
 800a638:	3201      	adds	r2, #1
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	e501      	b.n	800a042 <_dtoa_r+0x49a>
 800a63e:	2a00      	cmp	r2, #0
 800a640:	dd03      	ble.n	800a64a <_dtoa_r+0xaa2>
 800a642:	2b39      	cmp	r3, #57	@ 0x39
 800a644:	d0ee      	beq.n	800a624 <_dtoa_r+0xa7c>
 800a646:	3301      	adds	r3, #1
 800a648:	e7c9      	b.n	800a5de <_dtoa_r+0xa36>
 800a64a:	9a00      	ldr	r2, [sp, #0]
 800a64c:	9908      	ldr	r1, [sp, #32]
 800a64e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a652:	428a      	cmp	r2, r1
 800a654:	d028      	beq.n	800a6a8 <_dtoa_r+0xb00>
 800a656:	9902      	ldr	r1, [sp, #8]
 800a658:	2300      	movs	r3, #0
 800a65a:	220a      	movs	r2, #10
 800a65c:	4648      	mov	r0, r9
 800a65e:	f000 f9d5 	bl	800aa0c <__multadd>
 800a662:	42af      	cmp	r7, r5
 800a664:	9002      	str	r0, [sp, #8]
 800a666:	f04f 0300 	mov.w	r3, #0
 800a66a:	f04f 020a 	mov.w	r2, #10
 800a66e:	4639      	mov	r1, r7
 800a670:	4648      	mov	r0, r9
 800a672:	d107      	bne.n	800a684 <_dtoa_r+0xadc>
 800a674:	f000 f9ca 	bl	800aa0c <__multadd>
 800a678:	4607      	mov	r7, r0
 800a67a:	4605      	mov	r5, r0
 800a67c:	9b00      	ldr	r3, [sp, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	e777      	b.n	800a574 <_dtoa_r+0x9cc>
 800a684:	f000 f9c2 	bl	800aa0c <__multadd>
 800a688:	4629      	mov	r1, r5
 800a68a:	4607      	mov	r7, r0
 800a68c:	2300      	movs	r3, #0
 800a68e:	220a      	movs	r2, #10
 800a690:	4648      	mov	r0, r9
 800a692:	f000 f9bb 	bl	800aa0c <__multadd>
 800a696:	4605      	mov	r5, r0
 800a698:	e7f0      	b.n	800a67c <_dtoa_r+0xad4>
 800a69a:	f1bb 0f00 	cmp.w	fp, #0
 800a69e:	bfcc      	ite	gt
 800a6a0:	465e      	movgt	r6, fp
 800a6a2:	2601      	movle	r6, #1
 800a6a4:	4456      	add	r6, sl
 800a6a6:	2700      	movs	r7, #0
 800a6a8:	9902      	ldr	r1, [sp, #8]
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	f000 fb50 	bl	800ad54 <__lshift>
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	9002      	str	r0, [sp, #8]
 800a6b8:	f000 fbb8 	bl	800ae2c <__mcmp>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	dcb4      	bgt.n	800a62a <_dtoa_r+0xa82>
 800a6c0:	d102      	bne.n	800a6c8 <_dtoa_r+0xb20>
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	07db      	lsls	r3, r3, #31
 800a6c6:	d4b0      	bmi.n	800a62a <_dtoa_r+0xa82>
 800a6c8:	4633      	mov	r3, r6
 800a6ca:	461e      	mov	r6, r3
 800a6cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6d0:	2a30      	cmp	r2, #48	@ 0x30
 800a6d2:	d0fa      	beq.n	800a6ca <_dtoa_r+0xb22>
 800a6d4:	e4b5      	b.n	800a042 <_dtoa_r+0x49a>
 800a6d6:	459a      	cmp	sl, r3
 800a6d8:	d1a8      	bne.n	800a62c <_dtoa_r+0xa84>
 800a6da:	2331      	movs	r3, #49	@ 0x31
 800a6dc:	f108 0801 	add.w	r8, r8, #1
 800a6e0:	f88a 3000 	strb.w	r3, [sl]
 800a6e4:	e4ad      	b.n	800a042 <_dtoa_r+0x49a>
 800a6e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a744 <_dtoa_r+0xb9c>
 800a6ec:	b11b      	cbz	r3, 800a6f6 <_dtoa_r+0xb4e>
 800a6ee:	f10a 0308 	add.w	r3, sl, #8
 800a6f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	b017      	add	sp, #92	@ 0x5c
 800a6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fe:	9b07      	ldr	r3, [sp, #28]
 800a700:	2b01      	cmp	r3, #1
 800a702:	f77f ae2e 	ble.w	800a362 <_dtoa_r+0x7ba>
 800a706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a708:	9308      	str	r3, [sp, #32]
 800a70a:	2001      	movs	r0, #1
 800a70c:	e64d      	b.n	800a3aa <_dtoa_r+0x802>
 800a70e:	f1bb 0f00 	cmp.w	fp, #0
 800a712:	f77f aed9 	ble.w	800a4c8 <_dtoa_r+0x920>
 800a716:	4656      	mov	r6, sl
 800a718:	9802      	ldr	r0, [sp, #8]
 800a71a:	4621      	mov	r1, r4
 800a71c:	f7ff f9b9 	bl	8009a92 <quorem>
 800a720:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a724:	f806 3b01 	strb.w	r3, [r6], #1
 800a728:	eba6 020a 	sub.w	r2, r6, sl
 800a72c:	4593      	cmp	fp, r2
 800a72e:	ddb4      	ble.n	800a69a <_dtoa_r+0xaf2>
 800a730:	9902      	ldr	r1, [sp, #8]
 800a732:	2300      	movs	r3, #0
 800a734:	220a      	movs	r2, #10
 800a736:	4648      	mov	r0, r9
 800a738:	f000 f968 	bl	800aa0c <__multadd>
 800a73c:	9002      	str	r0, [sp, #8]
 800a73e:	e7eb      	b.n	800a718 <_dtoa_r+0xb70>
 800a740:	0800c054 	.word	0x0800c054
 800a744:	0800bfd8 	.word	0x0800bfd8

0800a748 <_free_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4605      	mov	r5, r0
 800a74c:	2900      	cmp	r1, #0
 800a74e:	d041      	beq.n	800a7d4 <_free_r+0x8c>
 800a750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a754:	1f0c      	subs	r4, r1, #4
 800a756:	2b00      	cmp	r3, #0
 800a758:	bfb8      	it	lt
 800a75a:	18e4      	addlt	r4, r4, r3
 800a75c:	f000 f8e8 	bl	800a930 <__malloc_lock>
 800a760:	4a1d      	ldr	r2, [pc, #116]	@ (800a7d8 <_free_r+0x90>)
 800a762:	6813      	ldr	r3, [r2, #0]
 800a764:	b933      	cbnz	r3, 800a774 <_free_r+0x2c>
 800a766:	6063      	str	r3, [r4, #4]
 800a768:	6014      	str	r4, [r2, #0]
 800a76a:	4628      	mov	r0, r5
 800a76c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a770:	f000 b8e4 	b.w	800a93c <__malloc_unlock>
 800a774:	42a3      	cmp	r3, r4
 800a776:	d908      	bls.n	800a78a <_free_r+0x42>
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	1821      	adds	r1, r4, r0
 800a77c:	428b      	cmp	r3, r1
 800a77e:	bf01      	itttt	eq
 800a780:	6819      	ldreq	r1, [r3, #0]
 800a782:	685b      	ldreq	r3, [r3, #4]
 800a784:	1809      	addeq	r1, r1, r0
 800a786:	6021      	streq	r1, [r4, #0]
 800a788:	e7ed      	b.n	800a766 <_free_r+0x1e>
 800a78a:	461a      	mov	r2, r3
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b10b      	cbz	r3, 800a794 <_free_r+0x4c>
 800a790:	42a3      	cmp	r3, r4
 800a792:	d9fa      	bls.n	800a78a <_free_r+0x42>
 800a794:	6811      	ldr	r1, [r2, #0]
 800a796:	1850      	adds	r0, r2, r1
 800a798:	42a0      	cmp	r0, r4
 800a79a:	d10b      	bne.n	800a7b4 <_free_r+0x6c>
 800a79c:	6820      	ldr	r0, [r4, #0]
 800a79e:	4401      	add	r1, r0
 800a7a0:	1850      	adds	r0, r2, r1
 800a7a2:	4283      	cmp	r3, r0
 800a7a4:	6011      	str	r1, [r2, #0]
 800a7a6:	d1e0      	bne.n	800a76a <_free_r+0x22>
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	6053      	str	r3, [r2, #4]
 800a7ae:	4408      	add	r0, r1
 800a7b0:	6010      	str	r0, [r2, #0]
 800a7b2:	e7da      	b.n	800a76a <_free_r+0x22>
 800a7b4:	d902      	bls.n	800a7bc <_free_r+0x74>
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	e7d6      	b.n	800a76a <_free_r+0x22>
 800a7bc:	6820      	ldr	r0, [r4, #0]
 800a7be:	1821      	adds	r1, r4, r0
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	bf04      	itt	eq
 800a7c4:	6819      	ldreq	r1, [r3, #0]
 800a7c6:	685b      	ldreq	r3, [r3, #4]
 800a7c8:	6063      	str	r3, [r4, #4]
 800a7ca:	bf04      	itt	eq
 800a7cc:	1809      	addeq	r1, r1, r0
 800a7ce:	6021      	streq	r1, [r4, #0]
 800a7d0:	6054      	str	r4, [r2, #4]
 800a7d2:	e7ca      	b.n	800a76a <_free_r+0x22>
 800a7d4:	bd38      	pop	{r3, r4, r5, pc}
 800a7d6:	bf00      	nop
 800a7d8:	2000638c 	.word	0x2000638c

0800a7dc <malloc>:
 800a7dc:	4b02      	ldr	r3, [pc, #8]	@ (800a7e8 <malloc+0xc>)
 800a7de:	4601      	mov	r1, r0
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	f000 b825 	b.w	800a830 <_malloc_r>
 800a7e6:	bf00      	nop
 800a7e8:	20000070 	.word	0x20000070

0800a7ec <sbrk_aligned>:
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	4e0f      	ldr	r6, [pc, #60]	@ (800a82c <sbrk_aligned+0x40>)
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	6831      	ldr	r1, [r6, #0]
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	b911      	cbnz	r1, 800a7fe <sbrk_aligned+0x12>
 800a7f8:	f000 fec2 	bl	800b580 <_sbrk_r>
 800a7fc:	6030      	str	r0, [r6, #0]
 800a7fe:	4621      	mov	r1, r4
 800a800:	4628      	mov	r0, r5
 800a802:	f000 febd 	bl	800b580 <_sbrk_r>
 800a806:	1c43      	adds	r3, r0, #1
 800a808:	d103      	bne.n	800a812 <sbrk_aligned+0x26>
 800a80a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a80e:	4620      	mov	r0, r4
 800a810:	bd70      	pop	{r4, r5, r6, pc}
 800a812:	1cc4      	adds	r4, r0, #3
 800a814:	f024 0403 	bic.w	r4, r4, #3
 800a818:	42a0      	cmp	r0, r4
 800a81a:	d0f8      	beq.n	800a80e <sbrk_aligned+0x22>
 800a81c:	1a21      	subs	r1, r4, r0
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 feae 	bl	800b580 <_sbrk_r>
 800a824:	3001      	adds	r0, #1
 800a826:	d1f2      	bne.n	800a80e <sbrk_aligned+0x22>
 800a828:	e7ef      	b.n	800a80a <sbrk_aligned+0x1e>
 800a82a:	bf00      	nop
 800a82c:	20006388 	.word	0x20006388

0800a830 <_malloc_r>:
 800a830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a834:	1ccd      	adds	r5, r1, #3
 800a836:	f025 0503 	bic.w	r5, r5, #3
 800a83a:	3508      	adds	r5, #8
 800a83c:	2d0c      	cmp	r5, #12
 800a83e:	bf38      	it	cc
 800a840:	250c      	movcc	r5, #12
 800a842:	2d00      	cmp	r5, #0
 800a844:	4606      	mov	r6, r0
 800a846:	db01      	blt.n	800a84c <_malloc_r+0x1c>
 800a848:	42a9      	cmp	r1, r5
 800a84a:	d904      	bls.n	800a856 <_malloc_r+0x26>
 800a84c:	230c      	movs	r3, #12
 800a84e:	6033      	str	r3, [r6, #0]
 800a850:	2000      	movs	r0, #0
 800a852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a92c <_malloc_r+0xfc>
 800a85a:	f000 f869 	bl	800a930 <__malloc_lock>
 800a85e:	f8d8 3000 	ldr.w	r3, [r8]
 800a862:	461c      	mov	r4, r3
 800a864:	bb44      	cbnz	r4, 800a8b8 <_malloc_r+0x88>
 800a866:	4629      	mov	r1, r5
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff ffbf 	bl	800a7ec <sbrk_aligned>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	4604      	mov	r4, r0
 800a872:	d158      	bne.n	800a926 <_malloc_r+0xf6>
 800a874:	f8d8 4000 	ldr.w	r4, [r8]
 800a878:	4627      	mov	r7, r4
 800a87a:	2f00      	cmp	r7, #0
 800a87c:	d143      	bne.n	800a906 <_malloc_r+0xd6>
 800a87e:	2c00      	cmp	r4, #0
 800a880:	d04b      	beq.n	800a91a <_malloc_r+0xea>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	4639      	mov	r1, r7
 800a886:	4630      	mov	r0, r6
 800a888:	eb04 0903 	add.w	r9, r4, r3
 800a88c:	f000 fe78 	bl	800b580 <_sbrk_r>
 800a890:	4581      	cmp	r9, r0
 800a892:	d142      	bne.n	800a91a <_malloc_r+0xea>
 800a894:	6821      	ldr	r1, [r4, #0]
 800a896:	1a6d      	subs	r5, r5, r1
 800a898:	4629      	mov	r1, r5
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffa6 	bl	800a7ec <sbrk_aligned>
 800a8a0:	3001      	adds	r0, #1
 800a8a2:	d03a      	beq.n	800a91a <_malloc_r+0xea>
 800a8a4:	6823      	ldr	r3, [r4, #0]
 800a8a6:	442b      	add	r3, r5
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	bb62      	cbnz	r2, 800a90c <_malloc_r+0xdc>
 800a8b2:	f8c8 7000 	str.w	r7, [r8]
 800a8b6:	e00f      	b.n	800a8d8 <_malloc_r+0xa8>
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	1b52      	subs	r2, r2, r5
 800a8bc:	d420      	bmi.n	800a900 <_malloc_r+0xd0>
 800a8be:	2a0b      	cmp	r2, #11
 800a8c0:	d917      	bls.n	800a8f2 <_malloc_r+0xc2>
 800a8c2:	1961      	adds	r1, r4, r5
 800a8c4:	42a3      	cmp	r3, r4
 800a8c6:	6025      	str	r5, [r4, #0]
 800a8c8:	bf18      	it	ne
 800a8ca:	6059      	strne	r1, [r3, #4]
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	bf08      	it	eq
 800a8d0:	f8c8 1000 	streq.w	r1, [r8]
 800a8d4:	5162      	str	r2, [r4, r5]
 800a8d6:	604b      	str	r3, [r1, #4]
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f000 f82f 	bl	800a93c <__malloc_unlock>
 800a8de:	f104 000b 	add.w	r0, r4, #11
 800a8e2:	1d23      	adds	r3, r4, #4
 800a8e4:	f020 0007 	bic.w	r0, r0, #7
 800a8e8:	1ac2      	subs	r2, r0, r3
 800a8ea:	bf1c      	itt	ne
 800a8ec:	1a1b      	subne	r3, r3, r0
 800a8ee:	50a3      	strne	r3, [r4, r2]
 800a8f0:	e7af      	b.n	800a852 <_malloc_r+0x22>
 800a8f2:	6862      	ldr	r2, [r4, #4]
 800a8f4:	42a3      	cmp	r3, r4
 800a8f6:	bf0c      	ite	eq
 800a8f8:	f8c8 2000 	streq.w	r2, [r8]
 800a8fc:	605a      	strne	r2, [r3, #4]
 800a8fe:	e7eb      	b.n	800a8d8 <_malloc_r+0xa8>
 800a900:	4623      	mov	r3, r4
 800a902:	6864      	ldr	r4, [r4, #4]
 800a904:	e7ae      	b.n	800a864 <_malloc_r+0x34>
 800a906:	463c      	mov	r4, r7
 800a908:	687f      	ldr	r7, [r7, #4]
 800a90a:	e7b6      	b.n	800a87a <_malloc_r+0x4a>
 800a90c:	461a      	mov	r2, r3
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	42a3      	cmp	r3, r4
 800a912:	d1fb      	bne.n	800a90c <_malloc_r+0xdc>
 800a914:	2300      	movs	r3, #0
 800a916:	6053      	str	r3, [r2, #4]
 800a918:	e7de      	b.n	800a8d8 <_malloc_r+0xa8>
 800a91a:	230c      	movs	r3, #12
 800a91c:	6033      	str	r3, [r6, #0]
 800a91e:	4630      	mov	r0, r6
 800a920:	f000 f80c 	bl	800a93c <__malloc_unlock>
 800a924:	e794      	b.n	800a850 <_malloc_r+0x20>
 800a926:	6005      	str	r5, [r0, #0]
 800a928:	e7d6      	b.n	800a8d8 <_malloc_r+0xa8>
 800a92a:	bf00      	nop
 800a92c:	2000638c 	.word	0x2000638c

0800a930 <__malloc_lock>:
 800a930:	4801      	ldr	r0, [pc, #4]	@ (800a938 <__malloc_lock+0x8>)
 800a932:	f7ff b89e 	b.w	8009a72 <__retarget_lock_acquire_recursive>
 800a936:	bf00      	nop
 800a938:	20006384 	.word	0x20006384

0800a93c <__malloc_unlock>:
 800a93c:	4801      	ldr	r0, [pc, #4]	@ (800a944 <__malloc_unlock+0x8>)
 800a93e:	f7ff b899 	b.w	8009a74 <__retarget_lock_release_recursive>
 800a942:	bf00      	nop
 800a944:	20006384 	.word	0x20006384

0800a948 <_Balloc>:
 800a948:	b570      	push	{r4, r5, r6, lr}
 800a94a:	69c6      	ldr	r6, [r0, #28]
 800a94c:	4604      	mov	r4, r0
 800a94e:	460d      	mov	r5, r1
 800a950:	b976      	cbnz	r6, 800a970 <_Balloc+0x28>
 800a952:	2010      	movs	r0, #16
 800a954:	f7ff ff42 	bl	800a7dc <malloc>
 800a958:	4602      	mov	r2, r0
 800a95a:	61e0      	str	r0, [r4, #28]
 800a95c:	b920      	cbnz	r0, 800a968 <_Balloc+0x20>
 800a95e:	4b18      	ldr	r3, [pc, #96]	@ (800a9c0 <_Balloc+0x78>)
 800a960:	4818      	ldr	r0, [pc, #96]	@ (800a9c4 <_Balloc+0x7c>)
 800a962:	216b      	movs	r1, #107	@ 0x6b
 800a964:	f000 fe1c 	bl	800b5a0 <__assert_func>
 800a968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a96c:	6006      	str	r6, [r0, #0]
 800a96e:	60c6      	str	r6, [r0, #12]
 800a970:	69e6      	ldr	r6, [r4, #28]
 800a972:	68f3      	ldr	r3, [r6, #12]
 800a974:	b183      	cbz	r3, 800a998 <_Balloc+0x50>
 800a976:	69e3      	ldr	r3, [r4, #28]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a97e:	b9b8      	cbnz	r0, 800a9b0 <_Balloc+0x68>
 800a980:	2101      	movs	r1, #1
 800a982:	fa01 f605 	lsl.w	r6, r1, r5
 800a986:	1d72      	adds	r2, r6, #5
 800a988:	0092      	lsls	r2, r2, #2
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 fe26 	bl	800b5dc <_calloc_r>
 800a990:	b160      	cbz	r0, 800a9ac <_Balloc+0x64>
 800a992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a996:	e00e      	b.n	800a9b6 <_Balloc+0x6e>
 800a998:	2221      	movs	r2, #33	@ 0x21
 800a99a:	2104      	movs	r1, #4
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 fe1d 	bl	800b5dc <_calloc_r>
 800a9a2:	69e3      	ldr	r3, [r4, #28]
 800a9a4:	60f0      	str	r0, [r6, #12]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e4      	bne.n	800a976 <_Balloc+0x2e>
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	6802      	ldr	r2, [r0, #0]
 800a9b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9bc:	e7f7      	b.n	800a9ae <_Balloc+0x66>
 800a9be:	bf00      	nop
 800a9c0:	0800bfe5 	.word	0x0800bfe5
 800a9c4:	0800c065 	.word	0x0800c065

0800a9c8 <_Bfree>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	69c6      	ldr	r6, [r0, #28]
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b976      	cbnz	r6, 800a9f0 <_Bfree+0x28>
 800a9d2:	2010      	movs	r0, #16
 800a9d4:	f7ff ff02 	bl	800a7dc <malloc>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	61e8      	str	r0, [r5, #28]
 800a9dc:	b920      	cbnz	r0, 800a9e8 <_Bfree+0x20>
 800a9de:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <_Bfree+0x3c>)
 800a9e0:	4809      	ldr	r0, [pc, #36]	@ (800aa08 <_Bfree+0x40>)
 800a9e2:	218f      	movs	r1, #143	@ 0x8f
 800a9e4:	f000 fddc 	bl	800b5a0 <__assert_func>
 800a9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9ec:	6006      	str	r6, [r0, #0]
 800a9ee:	60c6      	str	r6, [r0, #12]
 800a9f0:	b13c      	cbz	r4, 800aa02 <_Bfree+0x3a>
 800a9f2:	69eb      	ldr	r3, [r5, #28]
 800a9f4:	6862      	ldr	r2, [r4, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9fc:	6021      	str	r1, [r4, #0]
 800a9fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	0800bfe5 	.word	0x0800bfe5
 800aa08:	0800c065 	.word	0x0800c065

0800aa0c <__multadd>:
 800aa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa10:	690d      	ldr	r5, [r1, #16]
 800aa12:	4607      	mov	r7, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	461e      	mov	r6, r3
 800aa18:	f101 0c14 	add.w	ip, r1, #20
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	f8dc 3000 	ldr.w	r3, [ip]
 800aa22:	b299      	uxth	r1, r3
 800aa24:	fb02 6101 	mla	r1, r2, r1, r6
 800aa28:	0c1e      	lsrs	r6, r3, #16
 800aa2a:	0c0b      	lsrs	r3, r1, #16
 800aa2c:	fb02 3306 	mla	r3, r2, r6, r3
 800aa30:	b289      	uxth	r1, r1
 800aa32:	3001      	adds	r0, #1
 800aa34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa38:	4285      	cmp	r5, r0
 800aa3a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa42:	dcec      	bgt.n	800aa1e <__multadd+0x12>
 800aa44:	b30e      	cbz	r6, 800aa8a <__multadd+0x7e>
 800aa46:	68a3      	ldr	r3, [r4, #8]
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	dc19      	bgt.n	800aa80 <__multadd+0x74>
 800aa4c:	6861      	ldr	r1, [r4, #4]
 800aa4e:	4638      	mov	r0, r7
 800aa50:	3101      	adds	r1, #1
 800aa52:	f7ff ff79 	bl	800a948 <_Balloc>
 800aa56:	4680      	mov	r8, r0
 800aa58:	b928      	cbnz	r0, 800aa66 <__multadd+0x5a>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b0c      	ldr	r3, [pc, #48]	@ (800aa90 <__multadd+0x84>)
 800aa5e:	480d      	ldr	r0, [pc, #52]	@ (800aa94 <__multadd+0x88>)
 800aa60:	21ba      	movs	r1, #186	@ 0xba
 800aa62:	f000 fd9d 	bl	800b5a0 <__assert_func>
 800aa66:	6922      	ldr	r2, [r4, #16]
 800aa68:	3202      	adds	r2, #2
 800aa6a:	f104 010c 	add.w	r1, r4, #12
 800aa6e:	0092      	lsls	r2, r2, #2
 800aa70:	300c      	adds	r0, #12
 800aa72:	f7ff f800 	bl	8009a76 <memcpy>
 800aa76:	4621      	mov	r1, r4
 800aa78:	4638      	mov	r0, r7
 800aa7a:	f7ff ffa5 	bl	800a9c8 <_Bfree>
 800aa7e:	4644      	mov	r4, r8
 800aa80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa84:	3501      	adds	r5, #1
 800aa86:	615e      	str	r6, [r3, #20]
 800aa88:	6125      	str	r5, [r4, #16]
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa90:	0800c054 	.word	0x0800c054
 800aa94:	0800c065 	.word	0x0800c065

0800aa98 <__hi0bits>:
 800aa98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	bf36      	itet	cc
 800aaa0:	0403      	lslcc	r3, r0, #16
 800aaa2:	2000      	movcs	r0, #0
 800aaa4:	2010      	movcc	r0, #16
 800aaa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaaa:	bf3c      	itt	cc
 800aaac:	021b      	lslcc	r3, r3, #8
 800aaae:	3008      	addcc	r0, #8
 800aab0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aab4:	bf3c      	itt	cc
 800aab6:	011b      	lslcc	r3, r3, #4
 800aab8:	3004      	addcc	r0, #4
 800aaba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabe:	bf3c      	itt	cc
 800aac0:	009b      	lslcc	r3, r3, #2
 800aac2:	3002      	addcc	r0, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	db05      	blt.n	800aad4 <__hi0bits+0x3c>
 800aac8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aacc:	f100 0001 	add.w	r0, r0, #1
 800aad0:	bf08      	it	eq
 800aad2:	2020      	moveq	r0, #32
 800aad4:	4770      	bx	lr

0800aad6 <__lo0bits>:
 800aad6:	6803      	ldr	r3, [r0, #0]
 800aad8:	4602      	mov	r2, r0
 800aada:	f013 0007 	ands.w	r0, r3, #7
 800aade:	d00b      	beq.n	800aaf8 <__lo0bits+0x22>
 800aae0:	07d9      	lsls	r1, r3, #31
 800aae2:	d421      	bmi.n	800ab28 <__lo0bits+0x52>
 800aae4:	0798      	lsls	r0, r3, #30
 800aae6:	bf49      	itett	mi
 800aae8:	085b      	lsrmi	r3, r3, #1
 800aaea:	089b      	lsrpl	r3, r3, #2
 800aaec:	2001      	movmi	r0, #1
 800aaee:	6013      	strmi	r3, [r2, #0]
 800aaf0:	bf5c      	itt	pl
 800aaf2:	6013      	strpl	r3, [r2, #0]
 800aaf4:	2002      	movpl	r0, #2
 800aaf6:	4770      	bx	lr
 800aaf8:	b299      	uxth	r1, r3
 800aafa:	b909      	cbnz	r1, 800ab00 <__lo0bits+0x2a>
 800aafc:	0c1b      	lsrs	r3, r3, #16
 800aafe:	2010      	movs	r0, #16
 800ab00:	b2d9      	uxtb	r1, r3
 800ab02:	b909      	cbnz	r1, 800ab08 <__lo0bits+0x32>
 800ab04:	3008      	adds	r0, #8
 800ab06:	0a1b      	lsrs	r3, r3, #8
 800ab08:	0719      	lsls	r1, r3, #28
 800ab0a:	bf04      	itt	eq
 800ab0c:	091b      	lsreq	r3, r3, #4
 800ab0e:	3004      	addeq	r0, #4
 800ab10:	0799      	lsls	r1, r3, #30
 800ab12:	bf04      	itt	eq
 800ab14:	089b      	lsreq	r3, r3, #2
 800ab16:	3002      	addeq	r0, #2
 800ab18:	07d9      	lsls	r1, r3, #31
 800ab1a:	d403      	bmi.n	800ab24 <__lo0bits+0x4e>
 800ab1c:	085b      	lsrs	r3, r3, #1
 800ab1e:	f100 0001 	add.w	r0, r0, #1
 800ab22:	d003      	beq.n	800ab2c <__lo0bits+0x56>
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	4770      	bx	lr
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4770      	bx	lr
 800ab2c:	2020      	movs	r0, #32
 800ab2e:	4770      	bx	lr

0800ab30 <__i2b>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	460c      	mov	r4, r1
 800ab34:	2101      	movs	r1, #1
 800ab36:	f7ff ff07 	bl	800a948 <_Balloc>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	b928      	cbnz	r0, 800ab4a <__i2b+0x1a>
 800ab3e:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <__i2b+0x24>)
 800ab40:	4805      	ldr	r0, [pc, #20]	@ (800ab58 <__i2b+0x28>)
 800ab42:	f240 1145 	movw	r1, #325	@ 0x145
 800ab46:	f000 fd2b 	bl	800b5a0 <__assert_func>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	6144      	str	r4, [r0, #20]
 800ab4e:	6103      	str	r3, [r0, #16]
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop
 800ab54:	0800c054 	.word	0x0800c054
 800ab58:	0800c065 	.word	0x0800c065

0800ab5c <__multiply>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	4617      	mov	r7, r2
 800ab62:	690a      	ldr	r2, [r1, #16]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	bfa8      	it	ge
 800ab6a:	463b      	movge	r3, r7
 800ab6c:	4689      	mov	r9, r1
 800ab6e:	bfa4      	itt	ge
 800ab70:	460f      	movge	r7, r1
 800ab72:	4699      	movge	r9, r3
 800ab74:	693d      	ldr	r5, [r7, #16]
 800ab76:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	eb05 060a 	add.w	r6, r5, sl
 800ab82:	42b3      	cmp	r3, r6
 800ab84:	b085      	sub	sp, #20
 800ab86:	bfb8      	it	lt
 800ab88:	3101      	addlt	r1, #1
 800ab8a:	f7ff fedd 	bl	800a948 <_Balloc>
 800ab8e:	b930      	cbnz	r0, 800ab9e <__multiply+0x42>
 800ab90:	4602      	mov	r2, r0
 800ab92:	4b41      	ldr	r3, [pc, #260]	@ (800ac98 <__multiply+0x13c>)
 800ab94:	4841      	ldr	r0, [pc, #260]	@ (800ac9c <__multiply+0x140>)
 800ab96:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab9a:	f000 fd01 	bl	800b5a0 <__assert_func>
 800ab9e:	f100 0414 	add.w	r4, r0, #20
 800aba2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800aba6:	4623      	mov	r3, r4
 800aba8:	2200      	movs	r2, #0
 800abaa:	4573      	cmp	r3, lr
 800abac:	d320      	bcc.n	800abf0 <__multiply+0x94>
 800abae:	f107 0814 	add.w	r8, r7, #20
 800abb2:	f109 0114 	add.w	r1, r9, #20
 800abb6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800abba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800abbe:	9302      	str	r3, [sp, #8]
 800abc0:	1beb      	subs	r3, r5, r7
 800abc2:	3b15      	subs	r3, #21
 800abc4:	f023 0303 	bic.w	r3, r3, #3
 800abc8:	3304      	adds	r3, #4
 800abca:	3715      	adds	r7, #21
 800abcc:	42bd      	cmp	r5, r7
 800abce:	bf38      	it	cc
 800abd0:	2304      	movcc	r3, #4
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	9103      	str	r1, [sp, #12]
 800abd8:	428b      	cmp	r3, r1
 800abda:	d80c      	bhi.n	800abf6 <__multiply+0x9a>
 800abdc:	2e00      	cmp	r6, #0
 800abde:	dd03      	ble.n	800abe8 <__multiply+0x8c>
 800abe0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d055      	beq.n	800ac94 <__multiply+0x138>
 800abe8:	6106      	str	r6, [r0, #16]
 800abea:	b005      	add	sp, #20
 800abec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf0:	f843 2b04 	str.w	r2, [r3], #4
 800abf4:	e7d9      	b.n	800abaa <__multiply+0x4e>
 800abf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800abfa:	f1ba 0f00 	cmp.w	sl, #0
 800abfe:	d01f      	beq.n	800ac40 <__multiply+0xe4>
 800ac00:	46c4      	mov	ip, r8
 800ac02:	46a1      	mov	r9, r4
 800ac04:	2700      	movs	r7, #0
 800ac06:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac0a:	f8d9 3000 	ldr.w	r3, [r9]
 800ac0e:	fa1f fb82 	uxth.w	fp, r2
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac18:	443b      	add	r3, r7
 800ac1a:	f8d9 7000 	ldr.w	r7, [r9]
 800ac1e:	0c12      	lsrs	r2, r2, #16
 800ac20:	0c3f      	lsrs	r7, r7, #16
 800ac22:	fb0a 7202 	mla	r2, sl, r2, r7
 800ac26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac30:	4565      	cmp	r5, ip
 800ac32:	f849 3b04 	str.w	r3, [r9], #4
 800ac36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ac3a:	d8e4      	bhi.n	800ac06 <__multiply+0xaa>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	50e7      	str	r7, [r4, r3]
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac46:	3104      	adds	r1, #4
 800ac48:	f1b9 0f00 	cmp.w	r9, #0
 800ac4c:	d020      	beq.n	800ac90 <__multiply+0x134>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	4647      	mov	r7, r8
 800ac52:	46a4      	mov	ip, r4
 800ac54:	f04f 0a00 	mov.w	sl, #0
 800ac58:	f8b7 b000 	ldrh.w	fp, [r7]
 800ac5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ac60:	fb09 220b 	mla	r2, r9, fp, r2
 800ac64:	4452      	add	r2, sl
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac6c:	f84c 3b04 	str.w	r3, [ip], #4
 800ac70:	f857 3b04 	ldr.w	r3, [r7], #4
 800ac74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac78:	f8bc 3000 	ldrh.w	r3, [ip]
 800ac7c:	fb09 330a 	mla	r3, r9, sl, r3
 800ac80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ac84:	42bd      	cmp	r5, r7
 800ac86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac8a:	d8e5      	bhi.n	800ac58 <__multiply+0xfc>
 800ac8c:	9a01      	ldr	r2, [sp, #4]
 800ac8e:	50a3      	str	r3, [r4, r2]
 800ac90:	3404      	adds	r4, #4
 800ac92:	e79f      	b.n	800abd4 <__multiply+0x78>
 800ac94:	3e01      	subs	r6, #1
 800ac96:	e7a1      	b.n	800abdc <__multiply+0x80>
 800ac98:	0800c054 	.word	0x0800c054
 800ac9c:	0800c065 	.word	0x0800c065

0800aca0 <__pow5mult>:
 800aca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aca4:	4615      	mov	r5, r2
 800aca6:	f012 0203 	ands.w	r2, r2, #3
 800acaa:	4607      	mov	r7, r0
 800acac:	460e      	mov	r6, r1
 800acae:	d007      	beq.n	800acc0 <__pow5mult+0x20>
 800acb0:	4c25      	ldr	r4, [pc, #148]	@ (800ad48 <__pow5mult+0xa8>)
 800acb2:	3a01      	subs	r2, #1
 800acb4:	2300      	movs	r3, #0
 800acb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acba:	f7ff fea7 	bl	800aa0c <__multadd>
 800acbe:	4606      	mov	r6, r0
 800acc0:	10ad      	asrs	r5, r5, #2
 800acc2:	d03d      	beq.n	800ad40 <__pow5mult+0xa0>
 800acc4:	69fc      	ldr	r4, [r7, #28]
 800acc6:	b97c      	cbnz	r4, 800ace8 <__pow5mult+0x48>
 800acc8:	2010      	movs	r0, #16
 800acca:	f7ff fd87 	bl	800a7dc <malloc>
 800acce:	4602      	mov	r2, r0
 800acd0:	61f8      	str	r0, [r7, #28]
 800acd2:	b928      	cbnz	r0, 800ace0 <__pow5mult+0x40>
 800acd4:	4b1d      	ldr	r3, [pc, #116]	@ (800ad4c <__pow5mult+0xac>)
 800acd6:	481e      	ldr	r0, [pc, #120]	@ (800ad50 <__pow5mult+0xb0>)
 800acd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acdc:	f000 fc60 	bl	800b5a0 <__assert_func>
 800ace0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ace4:	6004      	str	r4, [r0, #0]
 800ace6:	60c4      	str	r4, [r0, #12]
 800ace8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800acec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acf0:	b94c      	cbnz	r4, 800ad06 <__pow5mult+0x66>
 800acf2:	f240 2171 	movw	r1, #625	@ 0x271
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff ff1a 	bl	800ab30 <__i2b>
 800acfc:	2300      	movs	r3, #0
 800acfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad02:	4604      	mov	r4, r0
 800ad04:	6003      	str	r3, [r0, #0]
 800ad06:	f04f 0900 	mov.w	r9, #0
 800ad0a:	07eb      	lsls	r3, r5, #31
 800ad0c:	d50a      	bpl.n	800ad24 <__pow5mult+0x84>
 800ad0e:	4631      	mov	r1, r6
 800ad10:	4622      	mov	r2, r4
 800ad12:	4638      	mov	r0, r7
 800ad14:	f7ff ff22 	bl	800ab5c <__multiply>
 800ad18:	4631      	mov	r1, r6
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f7ff fe53 	bl	800a9c8 <_Bfree>
 800ad22:	4646      	mov	r6, r8
 800ad24:	106d      	asrs	r5, r5, #1
 800ad26:	d00b      	beq.n	800ad40 <__pow5mult+0xa0>
 800ad28:	6820      	ldr	r0, [r4, #0]
 800ad2a:	b938      	cbnz	r0, 800ad3c <__pow5mult+0x9c>
 800ad2c:	4622      	mov	r2, r4
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4638      	mov	r0, r7
 800ad32:	f7ff ff13 	bl	800ab5c <__multiply>
 800ad36:	6020      	str	r0, [r4, #0]
 800ad38:	f8c0 9000 	str.w	r9, [r0]
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	e7e4      	b.n	800ad0a <__pow5mult+0x6a>
 800ad40:	4630      	mov	r0, r6
 800ad42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad46:	bf00      	nop
 800ad48:	0800c118 	.word	0x0800c118
 800ad4c:	0800bfe5 	.word	0x0800bfe5
 800ad50:	0800c065 	.word	0x0800c065

0800ad54 <__lshift>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	460c      	mov	r4, r1
 800ad5a:	6849      	ldr	r1, [r1, #4]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad62:	68a3      	ldr	r3, [r4, #8]
 800ad64:	4607      	mov	r7, r0
 800ad66:	4691      	mov	r9, r2
 800ad68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad6c:	f108 0601 	add.w	r6, r8, #1
 800ad70:	42b3      	cmp	r3, r6
 800ad72:	db0b      	blt.n	800ad8c <__lshift+0x38>
 800ad74:	4638      	mov	r0, r7
 800ad76:	f7ff fde7 	bl	800a948 <_Balloc>
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b948      	cbnz	r0, 800ad92 <__lshift+0x3e>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	4b28      	ldr	r3, [pc, #160]	@ (800ae24 <__lshift+0xd0>)
 800ad82:	4829      	ldr	r0, [pc, #164]	@ (800ae28 <__lshift+0xd4>)
 800ad84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad88:	f000 fc0a 	bl	800b5a0 <__assert_func>
 800ad8c:	3101      	adds	r1, #1
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	e7ee      	b.n	800ad70 <__lshift+0x1c>
 800ad92:	2300      	movs	r3, #0
 800ad94:	f100 0114 	add.w	r1, r0, #20
 800ad98:	f100 0210 	add.w	r2, r0, #16
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	4553      	cmp	r3, sl
 800ada0:	db33      	blt.n	800ae0a <__lshift+0xb6>
 800ada2:	6920      	ldr	r0, [r4, #16]
 800ada4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ada8:	f104 0314 	add.w	r3, r4, #20
 800adac:	f019 091f 	ands.w	r9, r9, #31
 800adb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adb8:	d02b      	beq.n	800ae12 <__lshift+0xbe>
 800adba:	f1c9 0e20 	rsb	lr, r9, #32
 800adbe:	468a      	mov	sl, r1
 800adc0:	2200      	movs	r2, #0
 800adc2:	6818      	ldr	r0, [r3, #0]
 800adc4:	fa00 f009 	lsl.w	r0, r0, r9
 800adc8:	4310      	orrs	r0, r2
 800adca:	f84a 0b04 	str.w	r0, [sl], #4
 800adce:	f853 2b04 	ldr.w	r2, [r3], #4
 800add2:	459c      	cmp	ip, r3
 800add4:	fa22 f20e 	lsr.w	r2, r2, lr
 800add8:	d8f3      	bhi.n	800adc2 <__lshift+0x6e>
 800adda:	ebac 0304 	sub.w	r3, ip, r4
 800adde:	3b15      	subs	r3, #21
 800ade0:	f023 0303 	bic.w	r3, r3, #3
 800ade4:	3304      	adds	r3, #4
 800ade6:	f104 0015 	add.w	r0, r4, #21
 800adea:	4560      	cmp	r0, ip
 800adec:	bf88      	it	hi
 800adee:	2304      	movhi	r3, #4
 800adf0:	50ca      	str	r2, [r1, r3]
 800adf2:	b10a      	cbz	r2, 800adf8 <__lshift+0xa4>
 800adf4:	f108 0602 	add.w	r6, r8, #2
 800adf8:	3e01      	subs	r6, #1
 800adfa:	4638      	mov	r0, r7
 800adfc:	612e      	str	r6, [r5, #16]
 800adfe:	4621      	mov	r1, r4
 800ae00:	f7ff fde2 	bl	800a9c8 <_Bfree>
 800ae04:	4628      	mov	r0, r5
 800ae06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae0e:	3301      	adds	r3, #1
 800ae10:	e7c5      	b.n	800ad9e <__lshift+0x4a>
 800ae12:	3904      	subs	r1, #4
 800ae14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae18:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae1c:	459c      	cmp	ip, r3
 800ae1e:	d8f9      	bhi.n	800ae14 <__lshift+0xc0>
 800ae20:	e7ea      	b.n	800adf8 <__lshift+0xa4>
 800ae22:	bf00      	nop
 800ae24:	0800c054 	.word	0x0800c054
 800ae28:	0800c065 	.word	0x0800c065

0800ae2c <__mcmp>:
 800ae2c:	690a      	ldr	r2, [r1, #16]
 800ae2e:	4603      	mov	r3, r0
 800ae30:	6900      	ldr	r0, [r0, #16]
 800ae32:	1a80      	subs	r0, r0, r2
 800ae34:	b530      	push	{r4, r5, lr}
 800ae36:	d10e      	bne.n	800ae56 <__mcmp+0x2a>
 800ae38:	3314      	adds	r3, #20
 800ae3a:	3114      	adds	r1, #20
 800ae3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae4c:	4295      	cmp	r5, r2
 800ae4e:	d003      	beq.n	800ae58 <__mcmp+0x2c>
 800ae50:	d205      	bcs.n	800ae5e <__mcmp+0x32>
 800ae52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae56:	bd30      	pop	{r4, r5, pc}
 800ae58:	42a3      	cmp	r3, r4
 800ae5a:	d3f3      	bcc.n	800ae44 <__mcmp+0x18>
 800ae5c:	e7fb      	b.n	800ae56 <__mcmp+0x2a>
 800ae5e:	2001      	movs	r0, #1
 800ae60:	e7f9      	b.n	800ae56 <__mcmp+0x2a>
	...

0800ae64 <__mdiff>:
 800ae64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae68:	4689      	mov	r9, r1
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4648      	mov	r0, r9
 800ae70:	4614      	mov	r4, r2
 800ae72:	f7ff ffdb 	bl	800ae2c <__mcmp>
 800ae76:	1e05      	subs	r5, r0, #0
 800ae78:	d112      	bne.n	800aea0 <__mdiff+0x3c>
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff fd63 	bl	800a948 <_Balloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <__mdiff+0x2e>
 800ae86:	4b3f      	ldr	r3, [pc, #252]	@ (800af84 <__mdiff+0x120>)
 800ae88:	f240 2137 	movw	r1, #567	@ 0x237
 800ae8c:	483e      	ldr	r0, [pc, #248]	@ (800af88 <__mdiff+0x124>)
 800ae8e:	f000 fb87 	bl	800b5a0 <__assert_func>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae98:	4610      	mov	r0, r2
 800ae9a:	b003      	add	sp, #12
 800ae9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea0:	bfbc      	itt	lt
 800aea2:	464b      	movlt	r3, r9
 800aea4:	46a1      	movlt	r9, r4
 800aea6:	4630      	mov	r0, r6
 800aea8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aeac:	bfba      	itte	lt
 800aeae:	461c      	movlt	r4, r3
 800aeb0:	2501      	movlt	r5, #1
 800aeb2:	2500      	movge	r5, #0
 800aeb4:	f7ff fd48 	bl	800a948 <_Balloc>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	b918      	cbnz	r0, 800aec4 <__mdiff+0x60>
 800aebc:	4b31      	ldr	r3, [pc, #196]	@ (800af84 <__mdiff+0x120>)
 800aebe:	f240 2145 	movw	r1, #581	@ 0x245
 800aec2:	e7e3      	b.n	800ae8c <__mdiff+0x28>
 800aec4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aec8:	6926      	ldr	r6, [r4, #16]
 800aeca:	60c5      	str	r5, [r0, #12]
 800aecc:	f109 0310 	add.w	r3, r9, #16
 800aed0:	f109 0514 	add.w	r5, r9, #20
 800aed4:	f104 0e14 	add.w	lr, r4, #20
 800aed8:	f100 0b14 	add.w	fp, r0, #20
 800aedc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aee0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aee4:	9301      	str	r3, [sp, #4]
 800aee6:	46d9      	mov	r9, fp
 800aee8:	f04f 0c00 	mov.w	ip, #0
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aef2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	fa1f f38a 	uxth.w	r3, sl
 800aefc:	4619      	mov	r1, r3
 800aefe:	b283      	uxth	r3, r0
 800af00:	1acb      	subs	r3, r1, r3
 800af02:	0c00      	lsrs	r0, r0, #16
 800af04:	4463      	add	r3, ip
 800af06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af0e:	b29b      	uxth	r3, r3
 800af10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af14:	4576      	cmp	r6, lr
 800af16:	f849 3b04 	str.w	r3, [r9], #4
 800af1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af1e:	d8e5      	bhi.n	800aeec <__mdiff+0x88>
 800af20:	1b33      	subs	r3, r6, r4
 800af22:	3b15      	subs	r3, #21
 800af24:	f023 0303 	bic.w	r3, r3, #3
 800af28:	3415      	adds	r4, #21
 800af2a:	3304      	adds	r3, #4
 800af2c:	42a6      	cmp	r6, r4
 800af2e:	bf38      	it	cc
 800af30:	2304      	movcc	r3, #4
 800af32:	441d      	add	r5, r3
 800af34:	445b      	add	r3, fp
 800af36:	461e      	mov	r6, r3
 800af38:	462c      	mov	r4, r5
 800af3a:	4544      	cmp	r4, r8
 800af3c:	d30e      	bcc.n	800af5c <__mdiff+0xf8>
 800af3e:	f108 0103 	add.w	r1, r8, #3
 800af42:	1b49      	subs	r1, r1, r5
 800af44:	f021 0103 	bic.w	r1, r1, #3
 800af48:	3d03      	subs	r5, #3
 800af4a:	45a8      	cmp	r8, r5
 800af4c:	bf38      	it	cc
 800af4e:	2100      	movcc	r1, #0
 800af50:	440b      	add	r3, r1
 800af52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af56:	b191      	cbz	r1, 800af7e <__mdiff+0x11a>
 800af58:	6117      	str	r7, [r2, #16]
 800af5a:	e79d      	b.n	800ae98 <__mdiff+0x34>
 800af5c:	f854 1b04 	ldr.w	r1, [r4], #4
 800af60:	46e6      	mov	lr, ip
 800af62:	0c08      	lsrs	r0, r1, #16
 800af64:	fa1c fc81 	uxtah	ip, ip, r1
 800af68:	4471      	add	r1, lr
 800af6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af6e:	b289      	uxth	r1, r1
 800af70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af74:	f846 1b04 	str.w	r1, [r6], #4
 800af78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af7c:	e7dd      	b.n	800af3a <__mdiff+0xd6>
 800af7e:	3f01      	subs	r7, #1
 800af80:	e7e7      	b.n	800af52 <__mdiff+0xee>
 800af82:	bf00      	nop
 800af84:	0800c054 	.word	0x0800c054
 800af88:	0800c065 	.word	0x0800c065

0800af8c <__d2b>:
 800af8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af90:	460f      	mov	r7, r1
 800af92:	2101      	movs	r1, #1
 800af94:	ec59 8b10 	vmov	r8, r9, d0
 800af98:	4616      	mov	r6, r2
 800af9a:	f7ff fcd5 	bl	800a948 <_Balloc>
 800af9e:	4604      	mov	r4, r0
 800afa0:	b930      	cbnz	r0, 800afb0 <__d2b+0x24>
 800afa2:	4602      	mov	r2, r0
 800afa4:	4b23      	ldr	r3, [pc, #140]	@ (800b034 <__d2b+0xa8>)
 800afa6:	4824      	ldr	r0, [pc, #144]	@ (800b038 <__d2b+0xac>)
 800afa8:	f240 310f 	movw	r1, #783	@ 0x30f
 800afac:	f000 faf8 	bl	800b5a0 <__assert_func>
 800afb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afb8:	b10d      	cbz	r5, 800afbe <__d2b+0x32>
 800afba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	f1b8 0300 	subs.w	r3, r8, #0
 800afc4:	d023      	beq.n	800b00e <__d2b+0x82>
 800afc6:	4668      	mov	r0, sp
 800afc8:	9300      	str	r3, [sp, #0]
 800afca:	f7ff fd84 	bl	800aad6 <__lo0bits>
 800afce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afd2:	b1d0      	cbz	r0, 800b00a <__d2b+0x7e>
 800afd4:	f1c0 0320 	rsb	r3, r0, #32
 800afd8:	fa02 f303 	lsl.w	r3, r2, r3
 800afdc:	430b      	orrs	r3, r1
 800afde:	40c2      	lsrs	r2, r0
 800afe0:	6163      	str	r3, [r4, #20]
 800afe2:	9201      	str	r2, [sp, #4]
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	61a3      	str	r3, [r4, #24]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bf0c      	ite	eq
 800afec:	2201      	moveq	r2, #1
 800afee:	2202      	movne	r2, #2
 800aff0:	6122      	str	r2, [r4, #16]
 800aff2:	b1a5      	cbz	r5, 800b01e <__d2b+0x92>
 800aff4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aff8:	4405      	add	r5, r0
 800affa:	603d      	str	r5, [r7, #0]
 800affc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b000:	6030      	str	r0, [r6, #0]
 800b002:	4620      	mov	r0, r4
 800b004:	b003      	add	sp, #12
 800b006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b00a:	6161      	str	r1, [r4, #20]
 800b00c:	e7ea      	b.n	800afe4 <__d2b+0x58>
 800b00e:	a801      	add	r0, sp, #4
 800b010:	f7ff fd61 	bl	800aad6 <__lo0bits>
 800b014:	9b01      	ldr	r3, [sp, #4]
 800b016:	6163      	str	r3, [r4, #20]
 800b018:	3020      	adds	r0, #32
 800b01a:	2201      	movs	r2, #1
 800b01c:	e7e8      	b.n	800aff0 <__d2b+0x64>
 800b01e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b022:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b026:	6038      	str	r0, [r7, #0]
 800b028:	6918      	ldr	r0, [r3, #16]
 800b02a:	f7ff fd35 	bl	800aa98 <__hi0bits>
 800b02e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b032:	e7e5      	b.n	800b000 <__d2b+0x74>
 800b034:	0800c054 	.word	0x0800c054
 800b038:	0800c065 	.word	0x0800c065

0800b03c <__ssputs_r>:
 800b03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	688e      	ldr	r6, [r1, #8]
 800b042:	461f      	mov	r7, r3
 800b044:	42be      	cmp	r6, r7
 800b046:	680b      	ldr	r3, [r1, #0]
 800b048:	4682      	mov	sl, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	4690      	mov	r8, r2
 800b04e:	d82d      	bhi.n	800b0ac <__ssputs_r+0x70>
 800b050:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b054:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b058:	d026      	beq.n	800b0a8 <__ssputs_r+0x6c>
 800b05a:	6965      	ldr	r5, [r4, #20]
 800b05c:	6909      	ldr	r1, [r1, #16]
 800b05e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b062:	eba3 0901 	sub.w	r9, r3, r1
 800b066:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b06a:	1c7b      	adds	r3, r7, #1
 800b06c:	444b      	add	r3, r9
 800b06e:	106d      	asrs	r5, r5, #1
 800b070:	429d      	cmp	r5, r3
 800b072:	bf38      	it	cc
 800b074:	461d      	movcc	r5, r3
 800b076:	0553      	lsls	r3, r2, #21
 800b078:	d527      	bpl.n	800b0ca <__ssputs_r+0x8e>
 800b07a:	4629      	mov	r1, r5
 800b07c:	f7ff fbd8 	bl	800a830 <_malloc_r>
 800b080:	4606      	mov	r6, r0
 800b082:	b360      	cbz	r0, 800b0de <__ssputs_r+0xa2>
 800b084:	6921      	ldr	r1, [r4, #16]
 800b086:	464a      	mov	r2, r9
 800b088:	f7fe fcf5 	bl	8009a76 <memcpy>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b096:	81a3      	strh	r3, [r4, #12]
 800b098:	6126      	str	r6, [r4, #16]
 800b09a:	6165      	str	r5, [r4, #20]
 800b09c:	444e      	add	r6, r9
 800b09e:	eba5 0509 	sub.w	r5, r5, r9
 800b0a2:	6026      	str	r6, [r4, #0]
 800b0a4:	60a5      	str	r5, [r4, #8]
 800b0a6:	463e      	mov	r6, r7
 800b0a8:	42be      	cmp	r6, r7
 800b0aa:	d900      	bls.n	800b0ae <__ssputs_r+0x72>
 800b0ac:	463e      	mov	r6, r7
 800b0ae:	6820      	ldr	r0, [r4, #0]
 800b0b0:	4632      	mov	r2, r6
 800b0b2:	4641      	mov	r1, r8
 800b0b4:	f000 fa28 	bl	800b508 <memmove>
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	1b9b      	subs	r3, r3, r6
 800b0bc:	60a3      	str	r3, [r4, #8]
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	4433      	add	r3, r6
 800b0c2:	6023      	str	r3, [r4, #0]
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ca:	462a      	mov	r2, r5
 800b0cc:	f000 faac 	bl	800b628 <_realloc_r>
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	d1e0      	bne.n	800b098 <__ssputs_r+0x5c>
 800b0d6:	6921      	ldr	r1, [r4, #16]
 800b0d8:	4650      	mov	r0, sl
 800b0da:	f7ff fb35 	bl	800a748 <_free_r>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	f8ca 3000 	str.w	r3, [sl]
 800b0e4:	89a3      	ldrh	r3, [r4, #12]
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ea:	81a3      	strh	r3, [r4, #12]
 800b0ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0f0:	e7e9      	b.n	800b0c6 <__ssputs_r+0x8a>
	...

0800b0f4 <_svfiprintf_r>:
 800b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f8:	4698      	mov	r8, r3
 800b0fa:	898b      	ldrh	r3, [r1, #12]
 800b0fc:	061b      	lsls	r3, r3, #24
 800b0fe:	b09d      	sub	sp, #116	@ 0x74
 800b100:	4607      	mov	r7, r0
 800b102:	460d      	mov	r5, r1
 800b104:	4614      	mov	r4, r2
 800b106:	d510      	bpl.n	800b12a <_svfiprintf_r+0x36>
 800b108:	690b      	ldr	r3, [r1, #16]
 800b10a:	b973      	cbnz	r3, 800b12a <_svfiprintf_r+0x36>
 800b10c:	2140      	movs	r1, #64	@ 0x40
 800b10e:	f7ff fb8f 	bl	800a830 <_malloc_r>
 800b112:	6028      	str	r0, [r5, #0]
 800b114:	6128      	str	r0, [r5, #16]
 800b116:	b930      	cbnz	r0, 800b126 <_svfiprintf_r+0x32>
 800b118:	230c      	movs	r3, #12
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b120:	b01d      	add	sp, #116	@ 0x74
 800b122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b126:	2340      	movs	r3, #64	@ 0x40
 800b128:	616b      	str	r3, [r5, #20]
 800b12a:	2300      	movs	r3, #0
 800b12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b12e:	2320      	movs	r3, #32
 800b130:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b134:	f8cd 800c 	str.w	r8, [sp, #12]
 800b138:	2330      	movs	r3, #48	@ 0x30
 800b13a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b2d8 <_svfiprintf_r+0x1e4>
 800b13e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b142:	f04f 0901 	mov.w	r9, #1
 800b146:	4623      	mov	r3, r4
 800b148:	469a      	mov	sl, r3
 800b14a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14e:	b10a      	cbz	r2, 800b154 <_svfiprintf_r+0x60>
 800b150:	2a25      	cmp	r2, #37	@ 0x25
 800b152:	d1f9      	bne.n	800b148 <_svfiprintf_r+0x54>
 800b154:	ebba 0b04 	subs.w	fp, sl, r4
 800b158:	d00b      	beq.n	800b172 <_svfiprintf_r+0x7e>
 800b15a:	465b      	mov	r3, fp
 800b15c:	4622      	mov	r2, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff ff6b 	bl	800b03c <__ssputs_r>
 800b166:	3001      	adds	r0, #1
 800b168:	f000 80a7 	beq.w	800b2ba <_svfiprintf_r+0x1c6>
 800b16c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b16e:	445a      	add	r2, fp
 800b170:	9209      	str	r2, [sp, #36]	@ 0x24
 800b172:	f89a 3000 	ldrb.w	r3, [sl]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 809f 	beq.w	800b2ba <_svfiprintf_r+0x1c6>
 800b17c:	2300      	movs	r3, #0
 800b17e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b186:	f10a 0a01 	add.w	sl, sl, #1
 800b18a:	9304      	str	r3, [sp, #16]
 800b18c:	9307      	str	r3, [sp, #28]
 800b18e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b192:	931a      	str	r3, [sp, #104]	@ 0x68
 800b194:	4654      	mov	r4, sl
 800b196:	2205      	movs	r2, #5
 800b198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b19c:	484e      	ldr	r0, [pc, #312]	@ (800b2d8 <_svfiprintf_r+0x1e4>)
 800b19e:	f7f5 f847 	bl	8000230 <memchr>
 800b1a2:	9a04      	ldr	r2, [sp, #16]
 800b1a4:	b9d8      	cbnz	r0, 800b1de <_svfiprintf_r+0xea>
 800b1a6:	06d0      	lsls	r0, r2, #27
 800b1a8:	bf44      	itt	mi
 800b1aa:	2320      	movmi	r3, #32
 800b1ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1b0:	0711      	lsls	r1, r2, #28
 800b1b2:	bf44      	itt	mi
 800b1b4:	232b      	movmi	r3, #43	@ 0x2b
 800b1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b1be:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c0:	d015      	beq.n	800b1ee <_svfiprintf_r+0xfa>
 800b1c2:	9a07      	ldr	r2, [sp, #28]
 800b1c4:	4654      	mov	r4, sl
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f04f 0c0a 	mov.w	ip, #10
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d2:	3b30      	subs	r3, #48	@ 0x30
 800b1d4:	2b09      	cmp	r3, #9
 800b1d6:	d94b      	bls.n	800b270 <_svfiprintf_r+0x17c>
 800b1d8:	b1b0      	cbz	r0, 800b208 <_svfiprintf_r+0x114>
 800b1da:	9207      	str	r2, [sp, #28]
 800b1dc:	e014      	b.n	800b208 <_svfiprintf_r+0x114>
 800b1de:	eba0 0308 	sub.w	r3, r0, r8
 800b1e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	9304      	str	r3, [sp, #16]
 800b1ea:	46a2      	mov	sl, r4
 800b1ec:	e7d2      	b.n	800b194 <_svfiprintf_r+0xa0>
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	1d19      	adds	r1, r3, #4
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	9103      	str	r1, [sp, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bfbb      	ittet	lt
 800b1fa:	425b      	neglt	r3, r3
 800b1fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b200:	9307      	strge	r3, [sp, #28]
 800b202:	9307      	strlt	r3, [sp, #28]
 800b204:	bfb8      	it	lt
 800b206:	9204      	strlt	r2, [sp, #16]
 800b208:	7823      	ldrb	r3, [r4, #0]
 800b20a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b20c:	d10a      	bne.n	800b224 <_svfiprintf_r+0x130>
 800b20e:	7863      	ldrb	r3, [r4, #1]
 800b210:	2b2a      	cmp	r3, #42	@ 0x2a
 800b212:	d132      	bne.n	800b27a <_svfiprintf_r+0x186>
 800b214:	9b03      	ldr	r3, [sp, #12]
 800b216:	1d1a      	adds	r2, r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	9203      	str	r2, [sp, #12]
 800b21c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b220:	3402      	adds	r4, #2
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b2e8 <_svfiprintf_r+0x1f4>
 800b228:	7821      	ldrb	r1, [r4, #0]
 800b22a:	2203      	movs	r2, #3
 800b22c:	4650      	mov	r0, sl
 800b22e:	f7f4 ffff 	bl	8000230 <memchr>
 800b232:	b138      	cbz	r0, 800b244 <_svfiprintf_r+0x150>
 800b234:	9b04      	ldr	r3, [sp, #16]
 800b236:	eba0 000a 	sub.w	r0, r0, sl
 800b23a:	2240      	movs	r2, #64	@ 0x40
 800b23c:	4082      	lsls	r2, r0
 800b23e:	4313      	orrs	r3, r2
 800b240:	3401      	adds	r4, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b248:	4824      	ldr	r0, [pc, #144]	@ (800b2dc <_svfiprintf_r+0x1e8>)
 800b24a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b24e:	2206      	movs	r2, #6
 800b250:	f7f4 ffee 	bl	8000230 <memchr>
 800b254:	2800      	cmp	r0, #0
 800b256:	d036      	beq.n	800b2c6 <_svfiprintf_r+0x1d2>
 800b258:	4b21      	ldr	r3, [pc, #132]	@ (800b2e0 <_svfiprintf_r+0x1ec>)
 800b25a:	bb1b      	cbnz	r3, 800b2a4 <_svfiprintf_r+0x1b0>
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	3307      	adds	r3, #7
 800b260:	f023 0307 	bic.w	r3, r3, #7
 800b264:	3308      	adds	r3, #8
 800b266:	9303      	str	r3, [sp, #12]
 800b268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b26a:	4433      	add	r3, r6
 800b26c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b26e:	e76a      	b.n	800b146 <_svfiprintf_r+0x52>
 800b270:	fb0c 3202 	mla	r2, ip, r2, r3
 800b274:	460c      	mov	r4, r1
 800b276:	2001      	movs	r0, #1
 800b278:	e7a8      	b.n	800b1cc <_svfiprintf_r+0xd8>
 800b27a:	2300      	movs	r3, #0
 800b27c:	3401      	adds	r4, #1
 800b27e:	9305      	str	r3, [sp, #20]
 800b280:	4619      	mov	r1, r3
 800b282:	f04f 0c0a 	mov.w	ip, #10
 800b286:	4620      	mov	r0, r4
 800b288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b28c:	3a30      	subs	r2, #48	@ 0x30
 800b28e:	2a09      	cmp	r2, #9
 800b290:	d903      	bls.n	800b29a <_svfiprintf_r+0x1a6>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c6      	beq.n	800b224 <_svfiprintf_r+0x130>
 800b296:	9105      	str	r1, [sp, #20]
 800b298:	e7c4      	b.n	800b224 <_svfiprintf_r+0x130>
 800b29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b29e:	4604      	mov	r4, r0
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e7f0      	b.n	800b286 <_svfiprintf_r+0x192>
 800b2a4:	ab03      	add	r3, sp, #12
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	462a      	mov	r2, r5
 800b2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b2e4 <_svfiprintf_r+0x1f0>)
 800b2ac:	a904      	add	r1, sp, #16
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	f7fd fcea 	bl	8008c88 <_printf_float>
 800b2b4:	1c42      	adds	r2, r0, #1
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	d1d6      	bne.n	800b268 <_svfiprintf_r+0x174>
 800b2ba:	89ab      	ldrh	r3, [r5, #12]
 800b2bc:	065b      	lsls	r3, r3, #25
 800b2be:	f53f af2d 	bmi.w	800b11c <_svfiprintf_r+0x28>
 800b2c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2c4:	e72c      	b.n	800b120 <_svfiprintf_r+0x2c>
 800b2c6:	ab03      	add	r3, sp, #12
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	4b05      	ldr	r3, [pc, #20]	@ (800b2e4 <_svfiprintf_r+0x1f0>)
 800b2ce:	a904      	add	r1, sp, #16
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7fd ff71 	bl	80091b8 <_printf_i>
 800b2d6:	e7ed      	b.n	800b2b4 <_svfiprintf_r+0x1c0>
 800b2d8:	0800c0be 	.word	0x0800c0be
 800b2dc:	0800c0c8 	.word	0x0800c0c8
 800b2e0:	08008c89 	.word	0x08008c89
 800b2e4:	0800b03d 	.word	0x0800b03d
 800b2e8:	0800c0c4 	.word	0x0800c0c4

0800b2ec <__sflush_r>:
 800b2ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f4:	0716      	lsls	r6, r2, #28
 800b2f6:	4605      	mov	r5, r0
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	d454      	bmi.n	800b3a6 <__sflush_r+0xba>
 800b2fc:	684b      	ldr	r3, [r1, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dc02      	bgt.n	800b308 <__sflush_r+0x1c>
 800b302:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd48      	ble.n	800b39a <__sflush_r+0xae>
 800b308:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d045      	beq.n	800b39a <__sflush_r+0xae>
 800b30e:	2300      	movs	r3, #0
 800b310:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b314:	682f      	ldr	r7, [r5, #0]
 800b316:	6a21      	ldr	r1, [r4, #32]
 800b318:	602b      	str	r3, [r5, #0]
 800b31a:	d030      	beq.n	800b37e <__sflush_r+0x92>
 800b31c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b31e:	89a3      	ldrh	r3, [r4, #12]
 800b320:	0759      	lsls	r1, r3, #29
 800b322:	d505      	bpl.n	800b330 <__sflush_r+0x44>
 800b324:	6863      	ldr	r3, [r4, #4]
 800b326:	1ad2      	subs	r2, r2, r3
 800b328:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b32a:	b10b      	cbz	r3, 800b330 <__sflush_r+0x44>
 800b32c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b32e:	1ad2      	subs	r2, r2, r3
 800b330:	2300      	movs	r3, #0
 800b332:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b334:	6a21      	ldr	r1, [r4, #32]
 800b336:	4628      	mov	r0, r5
 800b338:	47b0      	blx	r6
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	d106      	bne.n	800b34e <__sflush_r+0x62>
 800b340:	6829      	ldr	r1, [r5, #0]
 800b342:	291d      	cmp	r1, #29
 800b344:	d82b      	bhi.n	800b39e <__sflush_r+0xb2>
 800b346:	4a2a      	ldr	r2, [pc, #168]	@ (800b3f0 <__sflush_r+0x104>)
 800b348:	40ca      	lsrs	r2, r1
 800b34a:	07d6      	lsls	r6, r2, #31
 800b34c:	d527      	bpl.n	800b39e <__sflush_r+0xb2>
 800b34e:	2200      	movs	r2, #0
 800b350:	6062      	str	r2, [r4, #4]
 800b352:	04d9      	lsls	r1, r3, #19
 800b354:	6922      	ldr	r2, [r4, #16]
 800b356:	6022      	str	r2, [r4, #0]
 800b358:	d504      	bpl.n	800b364 <__sflush_r+0x78>
 800b35a:	1c42      	adds	r2, r0, #1
 800b35c:	d101      	bne.n	800b362 <__sflush_r+0x76>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	b903      	cbnz	r3, 800b364 <__sflush_r+0x78>
 800b362:	6560      	str	r0, [r4, #84]	@ 0x54
 800b364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b366:	602f      	str	r7, [r5, #0]
 800b368:	b1b9      	cbz	r1, 800b39a <__sflush_r+0xae>
 800b36a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b36e:	4299      	cmp	r1, r3
 800b370:	d002      	beq.n	800b378 <__sflush_r+0x8c>
 800b372:	4628      	mov	r0, r5
 800b374:	f7ff f9e8 	bl	800a748 <_free_r>
 800b378:	2300      	movs	r3, #0
 800b37a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b37c:	e00d      	b.n	800b39a <__sflush_r+0xae>
 800b37e:	2301      	movs	r3, #1
 800b380:	4628      	mov	r0, r5
 800b382:	47b0      	blx	r6
 800b384:	4602      	mov	r2, r0
 800b386:	1c50      	adds	r0, r2, #1
 800b388:	d1c9      	bne.n	800b31e <__sflush_r+0x32>
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0c6      	beq.n	800b31e <__sflush_r+0x32>
 800b390:	2b1d      	cmp	r3, #29
 800b392:	d001      	beq.n	800b398 <__sflush_r+0xac>
 800b394:	2b16      	cmp	r3, #22
 800b396:	d11e      	bne.n	800b3d6 <__sflush_r+0xea>
 800b398:	602f      	str	r7, [r5, #0]
 800b39a:	2000      	movs	r0, #0
 800b39c:	e022      	b.n	800b3e4 <__sflush_r+0xf8>
 800b39e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3a2:	b21b      	sxth	r3, r3
 800b3a4:	e01b      	b.n	800b3de <__sflush_r+0xf2>
 800b3a6:	690f      	ldr	r7, [r1, #16]
 800b3a8:	2f00      	cmp	r7, #0
 800b3aa:	d0f6      	beq.n	800b39a <__sflush_r+0xae>
 800b3ac:	0793      	lsls	r3, r2, #30
 800b3ae:	680e      	ldr	r6, [r1, #0]
 800b3b0:	bf08      	it	eq
 800b3b2:	694b      	ldreq	r3, [r1, #20]
 800b3b4:	600f      	str	r7, [r1, #0]
 800b3b6:	bf18      	it	ne
 800b3b8:	2300      	movne	r3, #0
 800b3ba:	eba6 0807 	sub.w	r8, r6, r7
 800b3be:	608b      	str	r3, [r1, #8]
 800b3c0:	f1b8 0f00 	cmp.w	r8, #0
 800b3c4:	dde9      	ble.n	800b39a <__sflush_r+0xae>
 800b3c6:	6a21      	ldr	r1, [r4, #32]
 800b3c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b3ca:	4643      	mov	r3, r8
 800b3cc:	463a      	mov	r2, r7
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	47b0      	blx	r6
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	dc08      	bgt.n	800b3e8 <__sflush_r+0xfc>
 800b3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e8:	4407      	add	r7, r0
 800b3ea:	eba8 0800 	sub.w	r8, r8, r0
 800b3ee:	e7e7      	b.n	800b3c0 <__sflush_r+0xd4>
 800b3f0:	20400001 	.word	0x20400001

0800b3f4 <_fflush_r>:
 800b3f4:	b538      	push	{r3, r4, r5, lr}
 800b3f6:	690b      	ldr	r3, [r1, #16]
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	b913      	cbnz	r3, 800b404 <_fflush_r+0x10>
 800b3fe:	2500      	movs	r5, #0
 800b400:	4628      	mov	r0, r5
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	b118      	cbz	r0, 800b40e <_fflush_r+0x1a>
 800b406:	6a03      	ldr	r3, [r0, #32]
 800b408:	b90b      	cbnz	r3, 800b40e <_fflush_r+0x1a>
 800b40a:	f7fe f87f 	bl	800950c <__sinit>
 800b40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d0f3      	beq.n	800b3fe <_fflush_r+0xa>
 800b416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b418:	07d0      	lsls	r0, r2, #31
 800b41a:	d404      	bmi.n	800b426 <_fflush_r+0x32>
 800b41c:	0599      	lsls	r1, r3, #22
 800b41e:	d402      	bmi.n	800b426 <_fflush_r+0x32>
 800b420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b422:	f7fe fb26 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b426:	4628      	mov	r0, r5
 800b428:	4621      	mov	r1, r4
 800b42a:	f7ff ff5f 	bl	800b2ec <__sflush_r>
 800b42e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b430:	07da      	lsls	r2, r3, #31
 800b432:	4605      	mov	r5, r0
 800b434:	d4e4      	bmi.n	800b400 <_fflush_r+0xc>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	059b      	lsls	r3, r3, #22
 800b43a:	d4e1      	bmi.n	800b400 <_fflush_r+0xc>
 800b43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43e:	f7fe fb19 	bl	8009a74 <__retarget_lock_release_recursive>
 800b442:	e7dd      	b.n	800b400 <_fflush_r+0xc>

0800b444 <__swhatbuf_r>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	460c      	mov	r4, r1
 800b448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44c:	2900      	cmp	r1, #0
 800b44e:	b096      	sub	sp, #88	@ 0x58
 800b450:	4615      	mov	r5, r2
 800b452:	461e      	mov	r6, r3
 800b454:	da0d      	bge.n	800b472 <__swhatbuf_r+0x2e>
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b45c:	f04f 0100 	mov.w	r1, #0
 800b460:	bf14      	ite	ne
 800b462:	2340      	movne	r3, #64	@ 0x40
 800b464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b468:	2000      	movs	r0, #0
 800b46a:	6031      	str	r1, [r6, #0]
 800b46c:	602b      	str	r3, [r5, #0]
 800b46e:	b016      	add	sp, #88	@ 0x58
 800b470:	bd70      	pop	{r4, r5, r6, pc}
 800b472:	466a      	mov	r2, sp
 800b474:	f000 f862 	bl	800b53c <_fstat_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	dbec      	blt.n	800b456 <__swhatbuf_r+0x12>
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b486:	4259      	negs	r1, r3
 800b488:	4159      	adcs	r1, r3
 800b48a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b48e:	e7eb      	b.n	800b468 <__swhatbuf_r+0x24>

0800b490 <__smakebuf_r>:
 800b490:	898b      	ldrh	r3, [r1, #12]
 800b492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b494:	079d      	lsls	r5, r3, #30
 800b496:	4606      	mov	r6, r0
 800b498:	460c      	mov	r4, r1
 800b49a:	d507      	bpl.n	800b4ac <__smakebuf_r+0x1c>
 800b49c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	6123      	str	r3, [r4, #16]
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	6163      	str	r3, [r4, #20]
 800b4a8:	b003      	add	sp, #12
 800b4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ac:	ab01      	add	r3, sp, #4
 800b4ae:	466a      	mov	r2, sp
 800b4b0:	f7ff ffc8 	bl	800b444 <__swhatbuf_r>
 800b4b4:	9f00      	ldr	r7, [sp, #0]
 800b4b6:	4605      	mov	r5, r0
 800b4b8:	4639      	mov	r1, r7
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f7ff f9b8 	bl	800a830 <_malloc_r>
 800b4c0:	b948      	cbnz	r0, 800b4d6 <__smakebuf_r+0x46>
 800b4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4c6:	059a      	lsls	r2, r3, #22
 800b4c8:	d4ee      	bmi.n	800b4a8 <__smakebuf_r+0x18>
 800b4ca:	f023 0303 	bic.w	r3, r3, #3
 800b4ce:	f043 0302 	orr.w	r3, r3, #2
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	e7e2      	b.n	800b49c <__smakebuf_r+0xc>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	6020      	str	r0, [r4, #0]
 800b4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4de:	81a3      	strh	r3, [r4, #12]
 800b4e0:	9b01      	ldr	r3, [sp, #4]
 800b4e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4e6:	b15b      	cbz	r3, 800b500 <__smakebuf_r+0x70>
 800b4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f000 f837 	bl	800b560 <_isatty_r>
 800b4f2:	b128      	cbz	r0, 800b500 <__smakebuf_r+0x70>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f023 0303 	bic.w	r3, r3, #3
 800b4fa:	f043 0301 	orr.w	r3, r3, #1
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	431d      	orrs	r5, r3
 800b504:	81a5      	strh	r5, [r4, #12]
 800b506:	e7cf      	b.n	800b4a8 <__smakebuf_r+0x18>

0800b508 <memmove>:
 800b508:	4288      	cmp	r0, r1
 800b50a:	b510      	push	{r4, lr}
 800b50c:	eb01 0402 	add.w	r4, r1, r2
 800b510:	d902      	bls.n	800b518 <memmove+0x10>
 800b512:	4284      	cmp	r4, r0
 800b514:	4623      	mov	r3, r4
 800b516:	d807      	bhi.n	800b528 <memmove+0x20>
 800b518:	1e43      	subs	r3, r0, #1
 800b51a:	42a1      	cmp	r1, r4
 800b51c:	d008      	beq.n	800b530 <memmove+0x28>
 800b51e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b522:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b526:	e7f8      	b.n	800b51a <memmove+0x12>
 800b528:	4402      	add	r2, r0
 800b52a:	4601      	mov	r1, r0
 800b52c:	428a      	cmp	r2, r1
 800b52e:	d100      	bne.n	800b532 <memmove+0x2a>
 800b530:	bd10      	pop	{r4, pc}
 800b532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b53a:	e7f7      	b.n	800b52c <memmove+0x24>

0800b53c <_fstat_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	@ (800b55c <_fstat_r+0x20>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	4611      	mov	r1, r2
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f7f6 fe81 	bl	8002250 <_fstat>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d102      	bne.n	800b558 <_fstat_r+0x1c>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	b103      	cbz	r3, 800b558 <_fstat_r+0x1c>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20006380 	.word	0x20006380

0800b560 <_isatty_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4d06      	ldr	r5, [pc, #24]	@ (800b57c <_isatty_r+0x1c>)
 800b564:	2300      	movs	r3, #0
 800b566:	4604      	mov	r4, r0
 800b568:	4608      	mov	r0, r1
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	f7f6 fe80 	bl	8002270 <_isatty>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	d102      	bne.n	800b57a <_isatty_r+0x1a>
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	b103      	cbz	r3, 800b57a <_isatty_r+0x1a>
 800b578:	6023      	str	r3, [r4, #0]
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	20006380 	.word	0x20006380

0800b580 <_sbrk_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	4d06      	ldr	r5, [pc, #24]	@ (800b59c <_sbrk_r+0x1c>)
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	4608      	mov	r0, r1
 800b58a:	602b      	str	r3, [r5, #0]
 800b58c:	f7f6 fe88 	bl	80022a0 <_sbrk>
 800b590:	1c43      	adds	r3, r0, #1
 800b592:	d102      	bne.n	800b59a <_sbrk_r+0x1a>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b103      	cbz	r3, 800b59a <_sbrk_r+0x1a>
 800b598:	6023      	str	r3, [r4, #0]
 800b59a:	bd38      	pop	{r3, r4, r5, pc}
 800b59c:	20006380 	.word	0x20006380

0800b5a0 <__assert_func>:
 800b5a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5a2:	4614      	mov	r4, r2
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b09      	ldr	r3, [pc, #36]	@ (800b5cc <__assert_func+0x2c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	68d8      	ldr	r0, [r3, #12]
 800b5ae:	b14c      	cbz	r4, 800b5c4 <__assert_func+0x24>
 800b5b0:	4b07      	ldr	r3, [pc, #28]	@ (800b5d0 <__assert_func+0x30>)
 800b5b2:	9100      	str	r1, [sp, #0]
 800b5b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5b8:	4906      	ldr	r1, [pc, #24]	@ (800b5d4 <__assert_func+0x34>)
 800b5ba:	462b      	mov	r3, r5
 800b5bc:	f000 f870 	bl	800b6a0 <fiprintf>
 800b5c0:	f000 f880 	bl	800b6c4 <abort>
 800b5c4:	4b04      	ldr	r3, [pc, #16]	@ (800b5d8 <__assert_func+0x38>)
 800b5c6:	461c      	mov	r4, r3
 800b5c8:	e7f3      	b.n	800b5b2 <__assert_func+0x12>
 800b5ca:	bf00      	nop
 800b5cc:	20000070 	.word	0x20000070
 800b5d0:	0800c0d9 	.word	0x0800c0d9
 800b5d4:	0800c0e6 	.word	0x0800c0e6
 800b5d8:	0800c114 	.word	0x0800c114

0800b5dc <_calloc_r>:
 800b5dc:	b570      	push	{r4, r5, r6, lr}
 800b5de:	fba1 5402 	umull	r5, r4, r1, r2
 800b5e2:	b934      	cbnz	r4, 800b5f2 <_calloc_r+0x16>
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	f7ff f923 	bl	800a830 <_malloc_r>
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	b928      	cbnz	r0, 800b5fa <_calloc_r+0x1e>
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	220c      	movs	r2, #12
 800b5f4:	6002      	str	r2, [r0, #0]
 800b5f6:	2600      	movs	r6, #0
 800b5f8:	e7f9      	b.n	800b5ee <_calloc_r+0x12>
 800b5fa:	462a      	mov	r2, r5
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	f7fe f95d 	bl	80098bc <memset>
 800b602:	e7f4      	b.n	800b5ee <_calloc_r+0x12>

0800b604 <__ascii_mbtowc>:
 800b604:	b082      	sub	sp, #8
 800b606:	b901      	cbnz	r1, 800b60a <__ascii_mbtowc+0x6>
 800b608:	a901      	add	r1, sp, #4
 800b60a:	b142      	cbz	r2, 800b61e <__ascii_mbtowc+0x1a>
 800b60c:	b14b      	cbz	r3, 800b622 <__ascii_mbtowc+0x1e>
 800b60e:	7813      	ldrb	r3, [r2, #0]
 800b610:	600b      	str	r3, [r1, #0]
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	1e10      	subs	r0, r2, #0
 800b616:	bf18      	it	ne
 800b618:	2001      	movne	r0, #1
 800b61a:	b002      	add	sp, #8
 800b61c:	4770      	bx	lr
 800b61e:	4610      	mov	r0, r2
 800b620:	e7fb      	b.n	800b61a <__ascii_mbtowc+0x16>
 800b622:	f06f 0001 	mvn.w	r0, #1
 800b626:	e7f8      	b.n	800b61a <__ascii_mbtowc+0x16>

0800b628 <_realloc_r>:
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	4607      	mov	r7, r0
 800b62e:	4614      	mov	r4, r2
 800b630:	460d      	mov	r5, r1
 800b632:	b921      	cbnz	r1, 800b63e <_realloc_r+0x16>
 800b634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	4611      	mov	r1, r2
 800b63a:	f7ff b8f9 	b.w	800a830 <_malloc_r>
 800b63e:	b92a      	cbnz	r2, 800b64c <_realloc_r+0x24>
 800b640:	f7ff f882 	bl	800a748 <_free_r>
 800b644:	4625      	mov	r5, r4
 800b646:	4628      	mov	r0, r5
 800b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b64c:	f000 f841 	bl	800b6d2 <_malloc_usable_size_r>
 800b650:	4284      	cmp	r4, r0
 800b652:	4606      	mov	r6, r0
 800b654:	d802      	bhi.n	800b65c <_realloc_r+0x34>
 800b656:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b65a:	d8f4      	bhi.n	800b646 <_realloc_r+0x1e>
 800b65c:	4621      	mov	r1, r4
 800b65e:	4638      	mov	r0, r7
 800b660:	f7ff f8e6 	bl	800a830 <_malloc_r>
 800b664:	4680      	mov	r8, r0
 800b666:	b908      	cbnz	r0, 800b66c <_realloc_r+0x44>
 800b668:	4645      	mov	r5, r8
 800b66a:	e7ec      	b.n	800b646 <_realloc_r+0x1e>
 800b66c:	42b4      	cmp	r4, r6
 800b66e:	4622      	mov	r2, r4
 800b670:	4629      	mov	r1, r5
 800b672:	bf28      	it	cs
 800b674:	4632      	movcs	r2, r6
 800b676:	f7fe f9fe 	bl	8009a76 <memcpy>
 800b67a:	4629      	mov	r1, r5
 800b67c:	4638      	mov	r0, r7
 800b67e:	f7ff f863 	bl	800a748 <_free_r>
 800b682:	e7f1      	b.n	800b668 <_realloc_r+0x40>

0800b684 <__ascii_wctomb>:
 800b684:	4603      	mov	r3, r0
 800b686:	4608      	mov	r0, r1
 800b688:	b141      	cbz	r1, 800b69c <__ascii_wctomb+0x18>
 800b68a:	2aff      	cmp	r2, #255	@ 0xff
 800b68c:	d904      	bls.n	800b698 <__ascii_wctomb+0x14>
 800b68e:	228a      	movs	r2, #138	@ 0x8a
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b696:	4770      	bx	lr
 800b698:	700a      	strb	r2, [r1, #0]
 800b69a:	2001      	movs	r0, #1
 800b69c:	4770      	bx	lr
	...

0800b6a0 <fiprintf>:
 800b6a0:	b40e      	push	{r1, r2, r3}
 800b6a2:	b503      	push	{r0, r1, lr}
 800b6a4:	4601      	mov	r1, r0
 800b6a6:	ab03      	add	r3, sp, #12
 800b6a8:	4805      	ldr	r0, [pc, #20]	@ (800b6c0 <fiprintf+0x20>)
 800b6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	f000 f83f 	bl	800b734 <_vfiprintf_r>
 800b6b6:	b002      	add	sp, #8
 800b6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6bc:	b003      	add	sp, #12
 800b6be:	4770      	bx	lr
 800b6c0:	20000070 	.word	0x20000070

0800b6c4 <abort>:
 800b6c4:	b508      	push	{r3, lr}
 800b6c6:	2006      	movs	r0, #6
 800b6c8:	f000 f974 	bl	800b9b4 <raise>
 800b6cc:	2001      	movs	r0, #1
 800b6ce:	f7f6 fd8b 	bl	80021e8 <_exit>

0800b6d2 <_malloc_usable_size_r>:
 800b6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d6:	1f18      	subs	r0, r3, #4
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bfbc      	itt	lt
 800b6dc:	580b      	ldrlt	r3, [r1, r0]
 800b6de:	18c0      	addlt	r0, r0, r3
 800b6e0:	4770      	bx	lr

0800b6e2 <__sfputc_r>:
 800b6e2:	6893      	ldr	r3, [r2, #8]
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	b410      	push	{r4}
 800b6ea:	6093      	str	r3, [r2, #8]
 800b6ec:	da08      	bge.n	800b700 <__sfputc_r+0x1e>
 800b6ee:	6994      	ldr	r4, [r2, #24]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	db01      	blt.n	800b6f8 <__sfputc_r+0x16>
 800b6f4:	290a      	cmp	r1, #10
 800b6f6:	d103      	bne.n	800b700 <__sfputc_r+0x1e>
 800b6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fc:	f7fe b84a 	b.w	8009794 <__swbuf_r>
 800b700:	6813      	ldr	r3, [r2, #0]
 800b702:	1c58      	adds	r0, r3, #1
 800b704:	6010      	str	r0, [r2, #0]
 800b706:	7019      	strb	r1, [r3, #0]
 800b708:	4608      	mov	r0, r1
 800b70a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <__sfputs_r>:
 800b710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b712:	4606      	mov	r6, r0
 800b714:	460f      	mov	r7, r1
 800b716:	4614      	mov	r4, r2
 800b718:	18d5      	adds	r5, r2, r3
 800b71a:	42ac      	cmp	r4, r5
 800b71c:	d101      	bne.n	800b722 <__sfputs_r+0x12>
 800b71e:	2000      	movs	r0, #0
 800b720:	e007      	b.n	800b732 <__sfputs_r+0x22>
 800b722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b726:	463a      	mov	r2, r7
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff ffda 	bl	800b6e2 <__sfputc_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d1f3      	bne.n	800b71a <__sfputs_r+0xa>
 800b732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b734 <_vfiprintf_r>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	460d      	mov	r5, r1
 800b73a:	b09d      	sub	sp, #116	@ 0x74
 800b73c:	4614      	mov	r4, r2
 800b73e:	4698      	mov	r8, r3
 800b740:	4606      	mov	r6, r0
 800b742:	b118      	cbz	r0, 800b74c <_vfiprintf_r+0x18>
 800b744:	6a03      	ldr	r3, [r0, #32]
 800b746:	b90b      	cbnz	r3, 800b74c <_vfiprintf_r+0x18>
 800b748:	f7fd fee0 	bl	800950c <__sinit>
 800b74c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b74e:	07d9      	lsls	r1, r3, #31
 800b750:	d405      	bmi.n	800b75e <_vfiprintf_r+0x2a>
 800b752:	89ab      	ldrh	r3, [r5, #12]
 800b754:	059a      	lsls	r2, r3, #22
 800b756:	d402      	bmi.n	800b75e <_vfiprintf_r+0x2a>
 800b758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b75a:	f7fe f98a 	bl	8009a72 <__retarget_lock_acquire_recursive>
 800b75e:	89ab      	ldrh	r3, [r5, #12]
 800b760:	071b      	lsls	r3, r3, #28
 800b762:	d501      	bpl.n	800b768 <_vfiprintf_r+0x34>
 800b764:	692b      	ldr	r3, [r5, #16]
 800b766:	b99b      	cbnz	r3, 800b790 <_vfiprintf_r+0x5c>
 800b768:	4629      	mov	r1, r5
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7fe f850 	bl	8009810 <__swsetup_r>
 800b770:	b170      	cbz	r0, 800b790 <_vfiprintf_r+0x5c>
 800b772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b774:	07dc      	lsls	r4, r3, #31
 800b776:	d504      	bpl.n	800b782 <_vfiprintf_r+0x4e>
 800b778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b77c:	b01d      	add	sp, #116	@ 0x74
 800b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b782:	89ab      	ldrh	r3, [r5, #12]
 800b784:	0598      	lsls	r0, r3, #22
 800b786:	d4f7      	bmi.n	800b778 <_vfiprintf_r+0x44>
 800b788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b78a:	f7fe f973 	bl	8009a74 <__retarget_lock_release_recursive>
 800b78e:	e7f3      	b.n	800b778 <_vfiprintf_r+0x44>
 800b790:	2300      	movs	r3, #0
 800b792:	9309      	str	r3, [sp, #36]	@ 0x24
 800b794:	2320      	movs	r3, #32
 800b796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b79a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b79e:	2330      	movs	r3, #48	@ 0x30
 800b7a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b950 <_vfiprintf_r+0x21c>
 800b7a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7a8:	f04f 0901 	mov.w	r9, #1
 800b7ac:	4623      	mov	r3, r4
 800b7ae:	469a      	mov	sl, r3
 800b7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b4:	b10a      	cbz	r2, 800b7ba <_vfiprintf_r+0x86>
 800b7b6:	2a25      	cmp	r2, #37	@ 0x25
 800b7b8:	d1f9      	bne.n	800b7ae <_vfiprintf_r+0x7a>
 800b7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b7be:	d00b      	beq.n	800b7d8 <_vfiprintf_r+0xa4>
 800b7c0:	465b      	mov	r3, fp
 800b7c2:	4622      	mov	r2, r4
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f7ff ffa2 	bl	800b710 <__sfputs_r>
 800b7cc:	3001      	adds	r0, #1
 800b7ce:	f000 80a7 	beq.w	800b920 <_vfiprintf_r+0x1ec>
 800b7d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7d4:	445a      	add	r2, fp
 800b7d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 809f 	beq.w	800b920 <_vfiprintf_r+0x1ec>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ec:	f10a 0a01 	add.w	sl, sl, #1
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	9307      	str	r3, [sp, #28]
 800b7f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7fa:	4654      	mov	r4, sl
 800b7fc:	2205      	movs	r2, #5
 800b7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b802:	4853      	ldr	r0, [pc, #332]	@ (800b950 <_vfiprintf_r+0x21c>)
 800b804:	f7f4 fd14 	bl	8000230 <memchr>
 800b808:	9a04      	ldr	r2, [sp, #16]
 800b80a:	b9d8      	cbnz	r0, 800b844 <_vfiprintf_r+0x110>
 800b80c:	06d1      	lsls	r1, r2, #27
 800b80e:	bf44      	itt	mi
 800b810:	2320      	movmi	r3, #32
 800b812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b816:	0713      	lsls	r3, r2, #28
 800b818:	bf44      	itt	mi
 800b81a:	232b      	movmi	r3, #43	@ 0x2b
 800b81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b820:	f89a 3000 	ldrb.w	r3, [sl]
 800b824:	2b2a      	cmp	r3, #42	@ 0x2a
 800b826:	d015      	beq.n	800b854 <_vfiprintf_r+0x120>
 800b828:	9a07      	ldr	r2, [sp, #28]
 800b82a:	4654      	mov	r4, sl
 800b82c:	2000      	movs	r0, #0
 800b82e:	f04f 0c0a 	mov.w	ip, #10
 800b832:	4621      	mov	r1, r4
 800b834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b838:	3b30      	subs	r3, #48	@ 0x30
 800b83a:	2b09      	cmp	r3, #9
 800b83c:	d94b      	bls.n	800b8d6 <_vfiprintf_r+0x1a2>
 800b83e:	b1b0      	cbz	r0, 800b86e <_vfiprintf_r+0x13a>
 800b840:	9207      	str	r2, [sp, #28]
 800b842:	e014      	b.n	800b86e <_vfiprintf_r+0x13a>
 800b844:	eba0 0308 	sub.w	r3, r0, r8
 800b848:	fa09 f303 	lsl.w	r3, r9, r3
 800b84c:	4313      	orrs	r3, r2
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	46a2      	mov	sl, r4
 800b852:	e7d2      	b.n	800b7fa <_vfiprintf_r+0xc6>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	1d19      	adds	r1, r3, #4
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	9103      	str	r1, [sp, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bfbb      	ittet	lt
 800b860:	425b      	neglt	r3, r3
 800b862:	f042 0202 	orrlt.w	r2, r2, #2
 800b866:	9307      	strge	r3, [sp, #28]
 800b868:	9307      	strlt	r3, [sp, #28]
 800b86a:	bfb8      	it	lt
 800b86c:	9204      	strlt	r2, [sp, #16]
 800b86e:	7823      	ldrb	r3, [r4, #0]
 800b870:	2b2e      	cmp	r3, #46	@ 0x2e
 800b872:	d10a      	bne.n	800b88a <_vfiprintf_r+0x156>
 800b874:	7863      	ldrb	r3, [r4, #1]
 800b876:	2b2a      	cmp	r3, #42	@ 0x2a
 800b878:	d132      	bne.n	800b8e0 <_vfiprintf_r+0x1ac>
 800b87a:	9b03      	ldr	r3, [sp, #12]
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	9203      	str	r2, [sp, #12]
 800b882:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b886:	3402      	adds	r4, #2
 800b888:	9305      	str	r3, [sp, #20]
 800b88a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b960 <_vfiprintf_r+0x22c>
 800b88e:	7821      	ldrb	r1, [r4, #0]
 800b890:	2203      	movs	r2, #3
 800b892:	4650      	mov	r0, sl
 800b894:	f7f4 fccc 	bl	8000230 <memchr>
 800b898:	b138      	cbz	r0, 800b8aa <_vfiprintf_r+0x176>
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	eba0 000a 	sub.w	r0, r0, sl
 800b8a0:	2240      	movs	r2, #64	@ 0x40
 800b8a2:	4082      	lsls	r2, r0
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	3401      	adds	r4, #1
 800b8a8:	9304      	str	r3, [sp, #16]
 800b8aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ae:	4829      	ldr	r0, [pc, #164]	@ (800b954 <_vfiprintf_r+0x220>)
 800b8b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8b4:	2206      	movs	r2, #6
 800b8b6:	f7f4 fcbb 	bl	8000230 <memchr>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d03f      	beq.n	800b93e <_vfiprintf_r+0x20a>
 800b8be:	4b26      	ldr	r3, [pc, #152]	@ (800b958 <_vfiprintf_r+0x224>)
 800b8c0:	bb1b      	cbnz	r3, 800b90a <_vfiprintf_r+0x1d6>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	3307      	adds	r3, #7
 800b8c6:	f023 0307 	bic.w	r3, r3, #7
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	9303      	str	r3, [sp, #12]
 800b8ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d0:	443b      	add	r3, r7
 800b8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d4:	e76a      	b.n	800b7ac <_vfiprintf_r+0x78>
 800b8d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8da:	460c      	mov	r4, r1
 800b8dc:	2001      	movs	r0, #1
 800b8de:	e7a8      	b.n	800b832 <_vfiprintf_r+0xfe>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	3401      	adds	r4, #1
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	f04f 0c0a 	mov.w	ip, #10
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f2:	3a30      	subs	r2, #48	@ 0x30
 800b8f4:	2a09      	cmp	r2, #9
 800b8f6:	d903      	bls.n	800b900 <_vfiprintf_r+0x1cc>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0c6      	beq.n	800b88a <_vfiprintf_r+0x156>
 800b8fc:	9105      	str	r1, [sp, #20]
 800b8fe:	e7c4      	b.n	800b88a <_vfiprintf_r+0x156>
 800b900:	fb0c 2101 	mla	r1, ip, r1, r2
 800b904:	4604      	mov	r4, r0
 800b906:	2301      	movs	r3, #1
 800b908:	e7f0      	b.n	800b8ec <_vfiprintf_r+0x1b8>
 800b90a:	ab03      	add	r3, sp, #12
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	462a      	mov	r2, r5
 800b910:	4b12      	ldr	r3, [pc, #72]	@ (800b95c <_vfiprintf_r+0x228>)
 800b912:	a904      	add	r1, sp, #16
 800b914:	4630      	mov	r0, r6
 800b916:	f7fd f9b7 	bl	8008c88 <_printf_float>
 800b91a:	4607      	mov	r7, r0
 800b91c:	1c78      	adds	r0, r7, #1
 800b91e:	d1d6      	bne.n	800b8ce <_vfiprintf_r+0x19a>
 800b920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b922:	07d9      	lsls	r1, r3, #31
 800b924:	d405      	bmi.n	800b932 <_vfiprintf_r+0x1fe>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	059a      	lsls	r2, r3, #22
 800b92a:	d402      	bmi.n	800b932 <_vfiprintf_r+0x1fe>
 800b92c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b92e:	f7fe f8a1 	bl	8009a74 <__retarget_lock_release_recursive>
 800b932:	89ab      	ldrh	r3, [r5, #12]
 800b934:	065b      	lsls	r3, r3, #25
 800b936:	f53f af1f 	bmi.w	800b778 <_vfiprintf_r+0x44>
 800b93a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b93c:	e71e      	b.n	800b77c <_vfiprintf_r+0x48>
 800b93e:	ab03      	add	r3, sp, #12
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	462a      	mov	r2, r5
 800b944:	4b05      	ldr	r3, [pc, #20]	@ (800b95c <_vfiprintf_r+0x228>)
 800b946:	a904      	add	r1, sp, #16
 800b948:	4630      	mov	r0, r6
 800b94a:	f7fd fc35 	bl	80091b8 <_printf_i>
 800b94e:	e7e4      	b.n	800b91a <_vfiprintf_r+0x1e6>
 800b950:	0800c0be 	.word	0x0800c0be
 800b954:	0800c0c8 	.word	0x0800c0c8
 800b958:	08008c89 	.word	0x08008c89
 800b95c:	0800b711 	.word	0x0800b711
 800b960:	0800c0c4 	.word	0x0800c0c4

0800b964 <_raise_r>:
 800b964:	291f      	cmp	r1, #31
 800b966:	b538      	push	{r3, r4, r5, lr}
 800b968:	4605      	mov	r5, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	d904      	bls.n	800b978 <_raise_r+0x14>
 800b96e:	2316      	movs	r3, #22
 800b970:	6003      	str	r3, [r0, #0]
 800b972:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b97a:	b112      	cbz	r2, 800b982 <_raise_r+0x1e>
 800b97c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b980:	b94b      	cbnz	r3, 800b996 <_raise_r+0x32>
 800b982:	4628      	mov	r0, r5
 800b984:	f000 f830 	bl	800b9e8 <_getpid_r>
 800b988:	4622      	mov	r2, r4
 800b98a:	4601      	mov	r1, r0
 800b98c:	4628      	mov	r0, r5
 800b98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b992:	f000 b817 	b.w	800b9c4 <_kill_r>
 800b996:	2b01      	cmp	r3, #1
 800b998:	d00a      	beq.n	800b9b0 <_raise_r+0x4c>
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	d103      	bne.n	800b9a6 <_raise_r+0x42>
 800b99e:	2316      	movs	r3, #22
 800b9a0:	6003      	str	r3, [r0, #0]
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	e7e7      	b.n	800b976 <_raise_r+0x12>
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4798      	blx	r3
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	e7e0      	b.n	800b976 <_raise_r+0x12>

0800b9b4 <raise>:
 800b9b4:	4b02      	ldr	r3, [pc, #8]	@ (800b9c0 <raise+0xc>)
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	f7ff bfd3 	b.w	800b964 <_raise_r>
 800b9be:	bf00      	nop
 800b9c0:	20000070 	.word	0x20000070

0800b9c4 <_kill_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d07      	ldr	r5, [pc, #28]	@ (800b9e4 <_kill_r+0x20>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	602b      	str	r3, [r5, #0]
 800b9d2:	f7f6 fbf9 	bl	80021c8 <_kill>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d102      	bne.n	800b9e0 <_kill_r+0x1c>
 800b9da:	682b      	ldr	r3, [r5, #0]
 800b9dc:	b103      	cbz	r3, 800b9e0 <_kill_r+0x1c>
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	bd38      	pop	{r3, r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20006380 	.word	0x20006380

0800b9e8 <_getpid_r>:
 800b9e8:	f7f6 bbe6 	b.w	80021b8 <_getpid>

0800b9ec <fmodf>:
 800b9ec:	b508      	push	{r3, lr}
 800b9ee:	ed2d 8b02 	vpush	{d8}
 800b9f2:	eef0 8a40 	vmov.f32	s17, s0
 800b9f6:	eeb0 8a60 	vmov.f32	s16, s1
 800b9fa:	f000 f86d 	bl	800bad8 <__ieee754_fmodf>
 800b9fe:	eef4 8a48 	vcmp.f32	s17, s16
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	d60c      	bvs.n	800ba22 <fmodf+0x36>
 800ba08:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ba28 <fmodf+0x3c>
 800ba0c:	eeb4 8a68 	vcmp.f32	s16, s17
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	d105      	bne.n	800ba22 <fmodf+0x36>
 800ba16:	f7fe f801 	bl	8009a1c <__errno>
 800ba1a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ba1e:	2321      	movs	r3, #33	@ 0x21
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	ecbd 8b02 	vpop	{d8}
 800ba26:	bd08      	pop	{r3, pc}
 800ba28:	00000000 	.word	0x00000000

0800ba2c <fmaxf>:
 800ba2c:	b508      	push	{r3, lr}
 800ba2e:	ed2d 8b02 	vpush	{d8}
 800ba32:	eeb0 8a40 	vmov.f32	s16, s0
 800ba36:	eef0 8a60 	vmov.f32	s17, s1
 800ba3a:	f000 f831 	bl	800baa0 <__fpclassifyf>
 800ba3e:	b930      	cbnz	r0, 800ba4e <fmaxf+0x22>
 800ba40:	eeb0 8a68 	vmov.f32	s16, s17
 800ba44:	eeb0 0a48 	vmov.f32	s0, s16
 800ba48:	ecbd 8b02 	vpop	{d8}
 800ba4c:	bd08      	pop	{r3, pc}
 800ba4e:	eeb0 0a68 	vmov.f32	s0, s17
 800ba52:	f000 f825 	bl	800baa0 <__fpclassifyf>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d0f4      	beq.n	800ba44 <fmaxf+0x18>
 800ba5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba62:	dded      	ble.n	800ba40 <fmaxf+0x14>
 800ba64:	e7ee      	b.n	800ba44 <fmaxf+0x18>

0800ba66 <fminf>:
 800ba66:	b508      	push	{r3, lr}
 800ba68:	ed2d 8b02 	vpush	{d8}
 800ba6c:	eeb0 8a40 	vmov.f32	s16, s0
 800ba70:	eef0 8a60 	vmov.f32	s17, s1
 800ba74:	f000 f814 	bl	800baa0 <__fpclassifyf>
 800ba78:	b930      	cbnz	r0, 800ba88 <fminf+0x22>
 800ba7a:	eeb0 8a68 	vmov.f32	s16, s17
 800ba7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ba82:	ecbd 8b02 	vpop	{d8}
 800ba86:	bd08      	pop	{r3, pc}
 800ba88:	eeb0 0a68 	vmov.f32	s0, s17
 800ba8c:	f000 f808 	bl	800baa0 <__fpclassifyf>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d0f4      	beq.n	800ba7e <fminf+0x18>
 800ba94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9c:	d5ed      	bpl.n	800ba7a <fminf+0x14>
 800ba9e:	e7ee      	b.n	800ba7e <fminf+0x18>

0800baa0 <__fpclassifyf>:
 800baa0:	ee10 3a10 	vmov	r3, s0
 800baa4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800baa8:	d00d      	beq.n	800bac6 <__fpclassifyf+0x26>
 800baaa:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800baae:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800bab2:	d30a      	bcc.n	800baca <__fpclassifyf+0x2a>
 800bab4:	4b07      	ldr	r3, [pc, #28]	@ (800bad4 <__fpclassifyf+0x34>)
 800bab6:	1e42      	subs	r2, r0, #1
 800bab8:	429a      	cmp	r2, r3
 800baba:	d908      	bls.n	800bace <__fpclassifyf+0x2e>
 800babc:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800bac0:	4258      	negs	r0, r3
 800bac2:	4158      	adcs	r0, r3
 800bac4:	4770      	bx	lr
 800bac6:	2002      	movs	r0, #2
 800bac8:	4770      	bx	lr
 800baca:	2004      	movs	r0, #4
 800bacc:	4770      	bx	lr
 800bace:	2003      	movs	r0, #3
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	007ffffe 	.word	0x007ffffe

0800bad8 <__ieee754_fmodf>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	ee10 6a90 	vmov	r6, s1
 800bade:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bae2:	1e5a      	subs	r2, r3, #1
 800bae4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bae8:	d206      	bcs.n	800baf8 <__ieee754_fmodf+0x20>
 800baea:	ee10 4a10 	vmov	r4, s0
 800baee:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800baf2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800baf6:	d304      	bcc.n	800bb02 <__ieee754_fmodf+0x2a>
 800baf8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800bafc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	4299      	cmp	r1, r3
 800bb04:	dbfc      	blt.n	800bb00 <__ieee754_fmodf+0x28>
 800bb06:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800bb0a:	d105      	bne.n	800bb18 <__ieee754_fmodf+0x40>
 800bb0c:	4b32      	ldr	r3, [pc, #200]	@ (800bbd8 <__ieee754_fmodf+0x100>)
 800bb0e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800bb12:	ed93 0a00 	vldr	s0, [r3]
 800bb16:	e7f3      	b.n	800bb00 <__ieee754_fmodf+0x28>
 800bb18:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800bb1c:	d146      	bne.n	800bbac <__ieee754_fmodf+0xd4>
 800bb1e:	020a      	lsls	r2, r1, #8
 800bb20:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800bb24:	2a00      	cmp	r2, #0
 800bb26:	dc3e      	bgt.n	800bba6 <__ieee754_fmodf+0xce>
 800bb28:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bb2c:	bf01      	itttt	eq
 800bb2e:	021a      	lsleq	r2, r3, #8
 800bb30:	fab2 f282 	clzeq	r2, r2
 800bb34:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800bb38:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800bb3c:	bf16      	itet	ne
 800bb3e:	15da      	asrne	r2, r3, #23
 800bb40:	3282      	addeq	r2, #130	@ 0x82
 800bb42:	3a7f      	subne	r2, #127	@ 0x7f
 800bb44:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800bb48:	bfbb      	ittet	lt
 800bb4a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800bb4e:	1a24      	sublt	r4, r4, r0
 800bb50:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800bb54:	40a1      	lsllt	r1, r4
 800bb56:	bfa8      	it	ge
 800bb58:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800bb5c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bb60:	bfb5      	itete	lt
 800bb62:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800bb66:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800bb6a:	1aa4      	sublt	r4, r4, r2
 800bb6c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800bb70:	bfb8      	it	lt
 800bb72:	fa03 f404 	lsllt.w	r4, r3, r4
 800bb76:	1a80      	subs	r0, r0, r2
 800bb78:	1b0b      	subs	r3, r1, r4
 800bb7a:	b9d0      	cbnz	r0, 800bbb2 <__ieee754_fmodf+0xda>
 800bb7c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800bb80:	bf28      	it	cs
 800bb82:	460b      	movcs	r3, r1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0c1      	beq.n	800bb0c <__ieee754_fmodf+0x34>
 800bb88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb8c:	db19      	blt.n	800bbc2 <__ieee754_fmodf+0xea>
 800bb8e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800bb92:	db19      	blt.n	800bbc8 <__ieee754_fmodf+0xf0>
 800bb94:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800bb98:	327f      	adds	r2, #127	@ 0x7f
 800bb9a:	432b      	orrs	r3, r5
 800bb9c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bba0:	ee00 3a10 	vmov	s0, r3
 800bba4:	e7ac      	b.n	800bb00 <__ieee754_fmodf+0x28>
 800bba6:	3801      	subs	r0, #1
 800bba8:	0052      	lsls	r2, r2, #1
 800bbaa:	e7bb      	b.n	800bb24 <__ieee754_fmodf+0x4c>
 800bbac:	15c8      	asrs	r0, r1, #23
 800bbae:	387f      	subs	r0, #127	@ 0x7f
 800bbb0:	e7ba      	b.n	800bb28 <__ieee754_fmodf+0x50>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	da02      	bge.n	800bbbc <__ieee754_fmodf+0xe4>
 800bbb6:	0049      	lsls	r1, r1, #1
 800bbb8:	3801      	subs	r0, #1
 800bbba:	e7dd      	b.n	800bb78 <__ieee754_fmodf+0xa0>
 800bbbc:	d0a6      	beq.n	800bb0c <__ieee754_fmodf+0x34>
 800bbbe:	0059      	lsls	r1, r3, #1
 800bbc0:	e7fa      	b.n	800bbb8 <__ieee754_fmodf+0xe0>
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	3a01      	subs	r2, #1
 800bbc6:	e7df      	b.n	800bb88 <__ieee754_fmodf+0xb0>
 800bbc8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800bbcc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bbd0:	3282      	adds	r2, #130	@ 0x82
 800bbd2:	4113      	asrs	r3, r2
 800bbd4:	432b      	orrs	r3, r5
 800bbd6:	e7e3      	b.n	800bba0 <__ieee754_fmodf+0xc8>
 800bbd8:	0800c31c 	.word	0x0800c31c

0800bbdc <_init>:
 800bbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbde:	bf00      	nop
 800bbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbe2:	bc08      	pop	{r3}
 800bbe4:	469e      	mov	lr, r3
 800bbe6:	4770      	bx	lr

0800bbe8 <_fini>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr
