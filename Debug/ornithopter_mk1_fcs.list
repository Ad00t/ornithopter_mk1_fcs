
ornithopter_mk1_fcs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5f8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006ec  0800b7c8  0800b7c8  0000c7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb4  0800beb4  0000d22c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800beb4  0800beb4  0000ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bebc  0800bebc  0000d22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bebc  0800bebc  0000cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800bec4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000614c  2000022c  0800c0f0  0000d22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006378  0800c0f0  0000d378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9c1  00000000  00000000  0000d25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f4c  00000000  00000000  0002bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136c  00000000  00000000  00031450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000050b7  00000000  00000000  000327bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001be3c  00000000  00000000  00037873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0ae8  00000000  00000000  000536af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c4c  00000000  00000000  001341dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0013be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b7b0 	.word	0x0800b7b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000230 	.word	0x20000230
 800020c:	0800b7b0 	.word	0x0800b7b0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <Logger_init>:

const char *ll_labels[] = {
	"TRACE", "DEBUG", "INFO", "WARN", "ERROR"
};

void Logger_init(Logger *logger, osMessageQueueId_t mq_id, FILE *out) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	logger->mq_id = mq_id;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	601a      	str	r2, [r3, #0]
	logger->msg_size = (size_t)osMessageQueueGetMsgSize(mq_id);
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f004 fea4 	bl	8005c94 <osMessageQueueGetMsgSize>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	605a      	str	r2, [r3, #4]
	logger->out = out;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Logger_log_impl>:

void Logger_log_impl(Logger *logger, LogLevel level, const char *fmt, va_list args) {
 8000f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f64:	b08e      	sub	sp, #56	@ 0x38
 8000f66:	af04      	add	r7, sp, #16
 8000f68:	60f8      	str	r0, [r7, #12]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	72fb      	strb	r3, [r7, #11]
 8000f72:	466b      	mov	r3, sp
 8000f74:	461d      	mov	r5, r3
	if (level < LOG_LEVEL) return;
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f240 8083 	bls.w	8001084 <Logger_log_impl+0x124>
    float t_s = (float)osKernelGetTickCount() / configTICK_RATE_HZ;
 8000f7e:	f004 fc95 	bl	80058ac <osKernelGetTickCount>
 8000f82:	ee07 0a90 	vmov	s15, r0
 8000f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8a:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001090 <Logger_log_impl+0x130>
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	edc7 7a08 	vstr	s15, [r7, #32]

    char buf[logger->msg_size];
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685c      	ldr	r4, [r3, #4]
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	46a2      	mov	sl, r4
 8000fa4:	469b      	mov	fp, r3
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	f04f 0300 	mov.w	r3, #0
 8000fae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000fb2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000fba:	2300      	movs	r3, #0
 8000fbc:	46a0      	mov	r8, r4
 8000fbe:	4699      	mov	r9, r3
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fd4:	1de3      	adds	r3, r4, #7
 8000fd6:	08db      	lsrs	r3, r3, #3
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	ebad 0d03 	sub.w	sp, sp, r3
 8000fde:	ab04      	add	r3, sp, #16
 8000fe0:	3300      	adds	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
    size_t max_msg_len = sizeof(buf) - 3;
 8000fe4:	1ee3      	subs	r3, r4, #3
 8000fe6:	617b      	str	r3, [r7, #20]
    int n = snprintf(buf, max_msg_len, LOG_PREFIX_FMT, t_s, ll_labels[level]);
 8000fe8:	6a38      	ldr	r0, [r7, #32]
 8000fea:	f7ff fadd 	bl	80005a8 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	7af9      	ldrb	r1, [r7, #11]
 8000ff4:	4827      	ldr	r0, [pc, #156]	@ (8001094 <Logger_log_impl+0x134>)
 8000ff6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000ffa:	9102      	str	r1, [sp, #8]
 8000ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8001000:	4a25      	ldr	r2, [pc, #148]	@ (8001098 <Logger_log_impl+0x138>)
 8001002:	6979      	ldr	r1, [r7, #20]
 8001004:	69b8      	ldr	r0, [r7, #24]
 8001006:	f008 f94f 	bl	80092a8 <sniprintf>
 800100a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (n < 0) n = 0;
 800100c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100e:	2b00      	cmp	r3, #0
 8001010:	da01      	bge.n	8001016 <Logger_log_impl+0xb6>
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
    vsnprintf(buf + n, max_msg_len - n, fmt, args);
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	18d0      	adds	r0, r2, r3
 800101c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	1ad1      	subs	r1, r2, r3
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f008 f9e7 	bl	80093f8 <vsniprintf>

    size_t len = strlen(buf);
 800102a:	69b8      	ldr	r0, [r7, #24]
 800102c:	f7ff f950 	bl	80002d0 <strlen>
 8001030:	6138      	str	r0, [r7, #16]
    if (len + 2 < sizeof(buf)) {
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	3302      	adds	r3, #2
 8001036:	429c      	cmp	r4, r3
 8001038:	d90f      	bls.n	800105a <Logger_log_impl+0xfa>
        buf[len] = '\r';
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4413      	add	r3, r2
 8001040:	220d      	movs	r2, #13
 8001042:	701a      	strb	r2, [r3, #0]
        buf[len + 1] = '\n';
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3301      	adds	r3, #1
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	210a      	movs	r1, #10
 800104c:	54d1      	strb	r1, [r2, r3]
        buf[len + 2] = '\0';
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3302      	adds	r3, #2
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	2100      	movs	r1, #0
 8001056:	54d1      	strb	r1, [r2, r3]
 8001058:	e00b      	b.n	8001072 <Logger_log_impl+0x112>
    } else {
        buf[sizeof(buf) - 3] = '\r';
 800105a:	1ee3      	subs	r3, r4, #3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	210d      	movs	r1, #13
 8001060:	54d1      	strb	r1, [r2, r3]
        buf[sizeof(buf) - 2] = '\n';
 8001062:	1ea3      	subs	r3, r4, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	210a      	movs	r1, #10
 8001068:	54d1      	strb	r1, [r2, r3]
        buf[sizeof(buf) - 1] = '\0';
 800106a:	1e63      	subs	r3, r4, #1
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	2100      	movs	r1, #0
 8001070:	54d1      	strb	r1, [r2, r3]
    }

    osMessageQueuePut(logger->mq_id, buf, (uint8_t)level, 10);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	7afa      	ldrb	r2, [r7, #11]
 8001078:	230a      	movs	r3, #10
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f004 fd4c 	bl	8005b18 <osMessageQueuePut>
 8001080:	46ad      	mov	sp, r5
 8001082:	e000      	b.n	8001086 <Logger_log_impl+0x126>
	if (level < LOG_LEVEL) return;
 8001084:	46ad      	mov	sp, r5
}
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800108e:	bf00      	nop
 8001090:	447a0000 	.word	0x447a0000
 8001094:	20000000 	.word	0x20000000
 8001098:	0800b7f0 	.word	0x0800b7f0

0800109c <Logger_write_log>:

void Logger_write_log(Logger *logger) {
 800109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010a0:	b085      	sub	sp, #20
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	466b      	mov	r3, sp
 80010a8:	461e      	mov	r6, r3
	char buf[logger->msg_size];
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6859      	ldr	r1, [r3, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	2300      	movs	r3, #0
 80010b6:	4688      	mov	r8, r1
 80010b8:	4699      	mov	r9, r3
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010ce:	2300      	movs	r3, #0
 80010d0:	460c      	mov	r4, r1
 80010d2:	461d      	mov	r5, r3
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	00eb      	lsls	r3, r5, #3
 80010de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010e2:	00e2      	lsls	r2, r4, #3
 80010e4:	1dcb      	adds	r3, r1, #7
 80010e6:	08db      	lsrs	r3, r3, #3
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	ebad 0d03 	sub.w	sp, sp, r3
 80010ee:	466b      	mov	r3, sp
 80010f0:	3300      	adds	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
	while (osMessageQueueGet(logger->mq_id, buf, NULL, 10) == osOK) {
 80010f4:	e005      	b.n	8001102 <Logger_write_log+0x66>
		fprintf(logger->out, "%s", buf);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	4619      	mov	r1, r3
 80010fc:	68b8      	ldr	r0, [r7, #8]
 80010fe:	f008 f8ad 	bl	800925c <fputs>
	while (osMessageQueueGet(logger->mq_id, buf, NULL, 10) == osOK) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	230a      	movs	r3, #10
 8001108:	2200      	movs	r2, #0
 800110a:	68b9      	ldr	r1, [r7, #8]
 800110c:	f004 fd64 	bl	8005bd8 <osMessageQueueGet>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0ef      	beq.n	80010f6 <Logger_write_log+0x5a>
 8001116:	46b5      	mov	sp, r6
	}
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001122 <log_info>:
    va_start(args, fmt);
    Logger_log_impl(logger, LL_WARN, fmt, args);
    va_end(args);
}

void log_info(Logger *logger, const char *fmt, ...) {
 8001122:	b40e      	push	{r1, r2, r3}
 8001124:	b580      	push	{r7, lr}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	60fb      	str	r3, [r7, #12]
    Logger_log_impl(logger, LL_INFO, fmt, args);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	2102      	movs	r1, #2
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff ff11 	bl	8000f60 <Logger_log_impl>
    va_end(args);
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001148:	b003      	add	sp, #12
 800114a:	4770      	bx	lr

0800114c <log_debug>:

void log_debug(Logger *logger, const char *fmt, ...) {
 800114c:	b40e      	push	{r1, r2, r3}
 800114e:	b580      	push	{r7, lr}
 8001150:	b085      	sub	sp, #20
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	60fb      	str	r3, [r7, #12]
    Logger_log_impl(logger, LL_DEBUG, fmt, args);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fefc 	bl	8000f60 <Logger_log_impl>
    va_end(args);
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001172:	b003      	add	sp, #12
 8001174:	4770      	bx	lr

08001176 <log_trace>:

void log_trace(Logger *logger, const char *fmt, ...) {
 8001176:	b40e      	push	{r1, r2, r3}
 8001178:	b580      	push	{r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, fmt);
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	60fb      	str	r3, [r7, #12]
    Logger_log_impl(logger, LL_TRACE, fmt, args);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff fee7 	bl	8000f60 <Logger_log_impl>
    va_end(args);
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119c:	b003      	add	sp, #12
 800119e:	4770      	bx	lr

080011a0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart2
int _write(int fd, char* ptr, int len) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;
  if (fd == 1 || fd == 2) {
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d002      	beq.n	80011b8 <_write+0x18>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d111      	bne.n	80011dc <_write+0x3c>
	  hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	4809      	ldr	r0, [pc, #36]	@ (80011e8 <_write+0x48>)
 80011c4:	f003 ff28 	bl	8005018 <HAL_UART_Transmit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]
	  if (hstatus == HAL_OK)
 80011cc:	7dfb      	ldrb	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <_write+0x36>
		  return len;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e004      	b.n	80011e0 <_write+0x40>
	  else
		  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011da:	e001      	b.n	80011e0 <_write+0x40>
  }
  return -1;
 80011dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002e4 	.word	0x200002e4

080011ec <i2c_probe>:

void i2c_probe(I2C_HandleTypeDef *hi2c) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    for (uint8_t a = 0x08; a <= 0x77; a++) {                 // 7-bit
 80011f4:	2308      	movs	r3, #8
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e014      	b.n	8001224 <i2c_probe+0x38>
        if (HAL_I2C_IsDeviceReady(hi2c, a << 1, 2, 10) == HAL_OK) {
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b299      	uxth	r1, r3
 8001202:	230a      	movs	r3, #10
 8001204:	2202      	movs	r2, #2
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f001 ff76 	bl	80030f8 <HAL_I2C_IsDeviceReady>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <i2c_probe+0x32>
            log_info(&dfl_logger, "Found I2C device at 0x%02X \r\n", a);
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	461a      	mov	r2, r3
 8001216:	4907      	ldr	r1, [pc, #28]	@ (8001234 <i2c_probe+0x48>)
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <i2c_probe+0x4c>)
 800121a:	f7ff ff82 	bl	8001122 <log_info>
    for (uint8_t a = 0x08; a <= 0x77; a++) {                 // 7-bit
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	3301      	adds	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b77      	cmp	r3, #119	@ 0x77
 8001228:	d9e7      	bls.n	80011fa <i2c_probe+0xe>
        }
    }
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	0800b848 	.word	0x0800b848
 8001238:	20000340 	.word	0x20000340

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f001 f814 	bl	800226c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f868 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f000 f984 	bl	8001554 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800124c:	f000 f958 	bl	8001500 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001250:	f000 f8d0 	bl	80013f4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001254:	f000 f8fc 	bl	8001450 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001258:	f004 fade 	bl	8005818 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dfl_log_q */
  dfl_log_qHandle = osMessageQueueNew (16, 512, &dfl_log_q_attributes);
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <main+0x98>)
 800125e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001262:	2010      	movs	r0, #16
 8001264:	f004 fbe4 	bl	8005a30 <osMessageQueueNew>
 8001268:	4603      	mov	r3, r0
 800126a:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <main+0x9c>)
 800126c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  Logger_init(&dfl_logger, dfl_log_qHandle, stdout);
 800126e:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <main+0x9c>)
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <main+0xa0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	461a      	mov	r2, r3
 800127a:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <main+0xa4>)
 800127c:	f7ff fe5a 	bl	8000f34 <Logger_init>
  i2c_probe(&hi2c1);
 8001280:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <main+0xa8>)
 8001282:	f7ff ffb3 	bl	80011ec <i2c_probe>
  MotorModules_Init();
 8001286:	f000 f9d3 	bl	8001630 <MotorModules_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultLogger */
  defaultLoggerHandle = osThreadNew(StartDefaultLogger, NULL, &defaultLogger_attributes);
 800128a:	4a17      	ldr	r2, [pc, #92]	@ (80012e8 <main+0xac>)
 800128c:	2100      	movs	r1, #0
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <main+0xb0>)
 8001290:	f004 fb21 	bl	80058d6 <osThreadNew>
 8001294:	4603      	mov	r3, r0
 8001296:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <main+0xb4>)
 8001298:	6013      	str	r3, [r2, #0]

  /* creation of logDriverStatus */
  logDriverStatusHandle = osThreadNew(StartLogDriverStatus, NULL, &logDriverStatus_attributes);
 800129a:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <main+0xb8>)
 800129c:	2100      	movs	r1, #0
 800129e:	4816      	ldr	r0, [pc, #88]	@ (80012f8 <main+0xbc>)
 80012a0:	f004 fb19 	bl	80058d6 <osThreadNew>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a15      	ldr	r2, [pc, #84]	@ (80012fc <main+0xc0>)
 80012a8:	6013      	str	r3, [r2, #0]

  /* creation of readEncoders */
  readEncodersHandle = osThreadNew(StartReadEncoders, NULL, &readEncoders_attributes);
 80012aa:	4a15      	ldr	r2, [pc, #84]	@ (8001300 <main+0xc4>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4815      	ldr	r0, [pc, #84]	@ (8001304 <main+0xc8>)
 80012b0:	f004 fb11 	bl	80058d6 <osThreadNew>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4a14      	ldr	r2, [pc, #80]	@ (8001308 <main+0xcc>)
 80012b8:	6013      	str	r3, [r2, #0]

  /* creation of driveMotors */
  driveMotorsHandle = osThreadNew(StartDriveMotors, NULL, &driveMotors_attributes);
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <main+0xd0>)
 80012bc:	2100      	movs	r1, #0
 80012be:	4814      	ldr	r0, [pc, #80]	@ (8001310 <main+0xd4>)
 80012c0:	f004 fb09 	bl	80058d6 <osThreadNew>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <main+0xd8>)
 80012c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ca:	f004 fac9 	bl	8005860 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80012ce:	bf00      	nop
 80012d0:	e7fd      	b.n	80012ce <main+0x92>
 80012d2:	bf00      	nop
 80012d4:	0800bb08 	.word	0x0800bb08
 80012d8:	2000033c 	.word	0x2000033c
 80012dc:	20000070 	.word	0x20000070
 80012e0:	20000340 	.word	0x20000340
 80012e4:	20000248 	.word	0x20000248
 80012e8:	0800ba78 	.word	0x0800ba78
 80012ec:	08001665 	.word	0x08001665
 80012f0:	2000032c 	.word	0x2000032c
 80012f4:	0800ba9c 	.word	0x0800ba9c
 80012f8:	08001681 	.word	0x08001681
 80012fc:	20000330 	.word	0x20000330
 8001300:	0800bac0 	.word	0x0800bac0
 8001304:	080016a1 	.word	0x080016a1
 8001308:	20000334 	.word	0x20000334
 800130c:	0800bae4 	.word	0x0800bae4
 8001310:	080016bd 	.word	0x080016bd
 8001314:	20000338 	.word	0x20000338

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2234      	movs	r2, #52	@ 0x34
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f008 f908 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <SystemClock_Config+0xd4>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <SystemClock_Config+0xd4>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	@ 0x40
 800134c:	4b27      	ldr	r3, [pc, #156]	@ (80013ec <SystemClock_Config+0xd4>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <SystemClock_Config+0xd8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001364:	4a22      	ldr	r2, [pc, #136]	@ (80013f0 <SystemClock_Config+0xd8>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <SystemClock_Config+0xd8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800138c:	2310      	movs	r3, #16
 800138e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001390:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001394:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001396:	2304      	movs	r3, #4
 8001398:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800139e:	2302      	movs	r3, #2
 80013a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fed6 	bl	8004158 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013b2:	f000 f9a7 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013cc:	f107 0308 	add.w	r3, r7, #8
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fb44 	bl	8003a60 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013de:	f000 f991 	bl	8001704 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	@ 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x50>)
 80013fa:	4a13      	ldr	r2, [pc, #76]	@ (8001448 <MX_I2C1_Init+0x54>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001400:	4a12      	ldr	r2, [pc, #72]	@ (800144c <MX_I2C1_Init+0x58>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_I2C1_Init+0x50>)
 800140c:	2220      	movs	r2, #32
 800140e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001412:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <MX_I2C1_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_I2C1_Init+0x50>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_I2C1_Init+0x50>)
 8001432:	f001 f9ed 	bl	8002810 <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800143c:	f000 f962 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000248 	.word	0x20000248
 8001448:	40005400 	.word	0x40005400
 800144c:	000186a0 	.word	0x000186a0

08001450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2224      	movs	r2, #36	@ 0x24
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f008 f86c 	bl	800953c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 800146e:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <MX_TIM1_Init+0xac>)
 8001470:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800147e:	4b1e      	ldr	r3, [pc, #120]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 8001480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001484:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 800148e:	2200      	movs	r2, #0
 8001490:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001498:	2303      	movs	r3, #3
 800149a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800149c:	2300      	movs	r3, #0
 800149e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014a0:	2301      	movs	r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80014a8:	2305      	movs	r3, #5
 80014aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014b0:	2301      	movs	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80014b8:	2305      	movs	r3, #5
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 80014c4:	f003 f9b0 	bl	8004828 <HAL_TIM_Encoder_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014ce:	f000 f919 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <MX_TIM1_Init+0xa8>)
 80014e0:	f003 fcba 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80014ea:	f000 f90b 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	@ 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000029c 	.word	0x2000029c
 80014fc:	40010000 	.word	0x40010000

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f003 fd1e 	bl	8004f78 <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f8df 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002e4 	.word	0x200002e4
 8001550:	40004400 	.word	0x40004400

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <MX_GPIO_Init+0xd0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a2c      	ldr	r2, [pc, #176]	@ (8001624 <MX_GPIO_Init+0xd0>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <MX_GPIO_Init+0xd0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b26      	ldr	r3, [pc, #152]	@ (8001624 <MX_GPIO_Init+0xd0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a25      	ldr	r2, [pc, #148]	@ (8001624 <MX_GPIO_Init+0xd0>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <MX_GPIO_Init+0xd0>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_GPIO_Init+0xd0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	2120      	movs	r1, #32
 80015de:	4812      	ldr	r0, [pc, #72]	@ (8001628 <MX_GPIO_Init+0xd4>)
 80015e0:	f001 f8fc 	bl	80027dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80015ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4619      	mov	r1, r3
 80015fa:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_GPIO_Init+0xd8>)
 80015fc:	f000 ff5a 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001600:	2320      	movs	r3, #32
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_GPIO_Init+0xd4>)
 8001618:	f000 ff4c 	bl	80024b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020800 	.word	0x40020800

08001630 <MotorModules_Init>:

/* USER CODE BEGIN 4 */

static void MotorModules_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	/* Motor 1 (front left) */
	mm1.cfg.htim = &htim1;
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <MotorModules_Init+0x28>)
 8001636:	4a09      	ldr	r2, [pc, #36]	@ (800165c <MotorModules_Init+0x2c>)
 8001638:	601a      	str	r2, [r3, #0]
	mm1.cfg.hi2c = &hi2c1;
 800163a:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MotorModules_Init+0x28>)
 800163c:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <MotorModules_Init+0x30>)
 800163e:	605a      	str	r2, [r3, #4]
	mm1.cfg.i2c_addr = MM1_I2C_ADDR;
 8001640:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <MotorModules_Init+0x28>)
 8001642:	221e      	movs	r2, #30
 8001644:	811a      	strh	r2, [r3, #8]
	mm1.cfg.motor_num = 1;
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <MotorModules_Init+0x28>)
 8001648:	2201      	movs	r2, #1
 800164a:	729a      	strb	r2, [r3, #10]
	MM_Init(&mm1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <MotorModules_Init+0x28>)
 800164e:	f000 f910 	bl	8001872 <MM_Init>
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000034c 	.word	0x2000034c
 800165c:	2000029c 	.word	0x2000029c
 8001660:	20000248 	.word	0x20000248

08001664 <StartDefaultLogger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultLogger */
void StartDefaultLogger(void *argument)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for (;;) {
		Logger_write_log(&dfl_logger);
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <StartDefaultLogger+0x18>)
 800166e:	f7ff fd15 	bl	800109c <Logger_write_log>
		osDelay(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f004 f9c1 	bl	80059fa <osDelay>
		Logger_write_log(&dfl_logger);
 8001678:	bf00      	nop
 800167a:	e7f7      	b.n	800166c <StartDefaultLogger+0x8>
 800167c:	20000340 	.word	0x20000340

08001680 <StartLogDriverStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLogDriverStatus */
void StartLogDriverStatus(void *argument)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLogDriverStatus */
  /* Infinite loop */
	for (;;) {
		MMD_Log_Status_Flags(&mm1);
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <StartLogDriverStatus+0x1c>)
 800168a:	f000 f9f9 	bl	8001a80 <MMD_Log_Status_Flags>
		osDelay(1000);
 800168e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001692:	f004 f9b2 	bl	80059fa <osDelay>
		MMD_Log_Status_Flags(&mm1);
 8001696:	bf00      	nop
 8001698:	e7f6      	b.n	8001688 <StartLogDriverStatus+0x8>
 800169a:	bf00      	nop
 800169c:	2000034c 	.word	0x2000034c

080016a0 <StartReadEncoders>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadEncoders */
void StartReadEncoders(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadEncoders */
  /* Infinite loop */
	for (;;) {
		MME_Update(&mm1);
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <StartReadEncoders+0x18>)
 80016aa:	f000 f917 	bl	80018dc <MME_Update>
		osDelay(10);
 80016ae:	200a      	movs	r0, #10
 80016b0:	f004 f9a3 	bl	80059fa <osDelay>
		MME_Update(&mm1);
 80016b4:	bf00      	nop
 80016b6:	e7f7      	b.n	80016a8 <StartReadEncoders+0x8>
 80016b8:	2000034c 	.word	0x2000034c

080016bc <StartDriveMotors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriveMotors */
void StartDriveMotors(void *argument)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriveMotors */
  /* Infinite loop */
	for (;;) {
		MMD_Set_Speed(&mm1, 800, MMD_CMD_SET_SPEED_NORMAL);
 80016c4:	22d1      	movs	r2, #209	@ 0xd1
 80016c6:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80016ca:	4804      	ldr	r0, [pc, #16]	@ (80016dc <StartDriveMotors+0x20>)
 80016cc:	f000 fae6 	bl	8001c9c <MMD_Set_Speed>
		osDelay(20);
 80016d0:	2014      	movs	r0, #20
 80016d2:	f004 f992 	bl	80059fa <osDelay>
		MMD_Set_Speed(&mm1, 800, MMD_CMD_SET_SPEED_NORMAL);
 80016d6:	bf00      	nop
 80016d8:	e7f4      	b.n	80016c4 <StartDriveMotors+0x8>
 80016da:	bf00      	nop
 80016dc:	2000034c 	.word	0x2000034c

080016e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80016f2:	f000 fddd 	bl	80022b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40001000 	.word	0x40001000

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <Error_Handler+0x8>

08001710 <get_crc>:
    "p_err", "crc_err", "cmd_time_l", "m_fault_l", "no_pow_l", "uart_err", "N/A", "N/A", "N/A", "rst", "cmd_time", "m_faulting", "no_pow", "err_active", "m_out_en", "m_driving"
};

/* I2C helpers */

uint8_t get_crc(uint8_t *message, uint8_t length) {
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < length; i++) {
 8001720:	2300      	movs	r3, #0
 8001722:	73bb      	strb	r3, [r7, #14]
 8001724:	e01f      	b.n	8001766 <get_crc+0x56>
		crc ^= message[i];
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	4053      	eors	r3, r2
 8001732:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8001734:	2300      	movs	r3, #0
 8001736:	737b      	strb	r3, [r7, #13]
 8001738:	e00f      	b.n	800175a <get_crc+0x4a>
			if (crc & 1) crc ^= 0x91;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <get_crc+0x3e>
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f083 036e 	eor.w	r3, r3, #110	@ 0x6e
 800174a:	43db      	mvns	r3, r3
 800174c:	73fb      	strb	r3, [r7, #15]
			crc >>= 1;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j = 0; j < 8; j++) {
 8001754:	7b7b      	ldrb	r3, [r7, #13]
 8001756:	3301      	adds	r3, #1
 8001758:	737b      	strb	r3, [r7, #13]
 800175a:	7b7b      	ldrb	r3, [r7, #13]
 800175c:	2b07      	cmp	r3, #7
 800175e:	d9ec      	bls.n	800173a <get_crc+0x2a>
	for (uint8_t i = 0; i < length; i++) {
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	3301      	adds	r3, #1
 8001764:	73bb      	strb	r3, [r7, #14]
 8001766:	7bba      	ldrb	r2, [r7, #14]
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	429a      	cmp	r2, r3
 800176c:	d3db      	bcc.n	8001726 <get_crc+0x16>
		}
	}
	return crc;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <i2c_master_tx>:

HAL_StatusTypeDef i2c_master_tx(MotorModule *m, uint8_t *buf, uint16_t size) {
 800177c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001780:	b08b      	sub	sp, #44	@ 0x2c
 8001782:	af02      	add	r7, sp, #8
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
 800178c:	466b      	mov	r3, sp
 800178e:	461e      	mov	r6, r3
	uint8_t to_tx[size+1];
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	1e4b      	subs	r3, r1, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	460a      	mov	r2, r1
 800179a:	2300      	movs	r3, #0
 800179c:	4690      	mov	r8, r2
 800179e:	4699      	mov	r9, r3
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017b4:	460a      	mov	r2, r1
 80017b6:	2300      	movs	r3, #0
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	00eb      	lsls	r3, r5, #3
 80017c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ca:	00e2      	lsls	r2, r4, #3
 80017cc:	460b      	mov	r3, r1
 80017ce:	3307      	adds	r3, #7
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	ebad 0d03 	sub.w	sp, sp, r3
 80017d8:	ab02      	add	r3, sp, #8
 80017da:	3300      	adds	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
	memcpy(to_tx, buf, size);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	461a      	mov	r2, r3
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	69b8      	ldr	r0, [r7, #24]
 80017e6:	f007 ff86 	bl	80096f6 <memcpy>
	to_tx[size] = get_crc(buf, size);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	88fc      	ldrh	r4, [r7, #6]
 80017f0:	4619      	mov	r1, r3
 80017f2:	68b8      	ldr	r0, [r7, #8]
 80017f4:	f7ff ff8c 	bl	8001710 <get_crc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	551a      	strb	r2, [r3, r4]
	HAL_StatusTypeDef hstat = HAL_I2C_Master_Transmit(m->cfg.hi2c, m->cfg.i2c_addr, to_tx, size+1, HAL_MAX_DELAY);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6858      	ldr	r0, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8919      	ldrh	r1, [r3, #8]
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	3301      	adds	r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	f001 f93f 	bl	8002a98 <HAL_I2C_Master_Transmit>
 800181a:	4603      	mov	r3, r0
 800181c:	77fb      	strb	r3, [r7, #31]
		for (size_t i = 0; i < size+1; i++)
		    n += snprintf(lbuf + n, dfl_logger.msg_size - n, "0x%02X ", to_tx[i]);
		snprintf(lbuf + n, dfl_logger.msg_size - n, "]");
		log_debug(&dfl_logger, "%s", lbuf);
	}
	return hstat;
 800181e:	7ffb      	ldrb	r3, [r7, #31]
 8001820:	46b5      	mov	sp, r6
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800182c <i2c_master_rx>:

HAL_StatusTypeDef i2c_master_rx(MotorModule *m, uint8_t *buf, uint16_t size) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef hstat = HAL_I2C_Master_Receive(m->cfg.hi2c, m->cfg.i2c_addr, buf, size, HAL_MAX_DELAY);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6858      	ldr	r0, [r3, #4]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8919      	ldrh	r1, [r3, #8]
 8001842:	88fb      	ldrh	r3, [r7, #6]
 8001844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f001 fa22 	bl	8002c94 <HAL_I2C_Master_Receive>
 8001850:	4603      	mov	r3, r0
 8001852:	75bb      	strb	r3, [r7, #22]
	uint8_t calcrc = get_crc(buf, size-1);
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4619      	mov	r1, r3
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f7ff ff56 	bl	8001710 <get_crc>
 8001864:	4603      	mov	r3, r0
 8001866:	75fb      	strb	r3, [r7, #23]
		for (size_t i = 0; i < size+1; i++)
		    n += snprintf(lbuf + n, dfl_logger.msg_size - n, "0x%02X ", buf[i]);
		snprintf(lbuf + n, dfl_logger.msg_size - n, "] -- calcrc=0x%02X", calcrc);
		log_debug(&dfl_logger, "%s", lbuf);
	}
	return hstat;
 8001868:	7dbb      	ldrb	r3, [r7, #22]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <MM_Init>:

/* General */

void MM_Init(MotorModule *m) {
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	// Encoder init
	m->encoder_counts = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
	m->last_encoder_counts = 0;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
	m->last_encoder_time = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
	m->angle = 0;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	61da      	str	r2, [r3, #28]
	m->rpm = 0;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	621a      	str	r2, [r3, #32]
	m->counter_period = __HAL_TIM_GET_AUTORELOAD(m->cfg.htim);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(m->cfg.htim, TIM_CHANNEL_ALL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	213c      	movs	r1, #60	@ 0x3c
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f860 	bl	8004974 <HAL_TIM_Encoder_Start>

	// Driver init
	MMD_Reset(m);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f98d 	bl	8001bd4 <MMD_Reset>
	MMD_Reinitialize(m);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f9aa 	bl	8001c14 <MMD_Reinitialize>
	MMD_Log_Firmware_Version(m);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f893 	bl	80019ec <MMD_Log_Firmware_Version>
	MMD_Clear_Reset(m);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f9c2 	bl	8001c50 <MMD_Clear_Reset>

	m->initialized = 1;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	731a      	strb	r2, [r3, #12]
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <MME_Update>:

/* Encoder */

void MME_Update(MotorModule *m) {
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	b08b      	sub	sp, #44	@ 0x2c
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	6078      	str	r0, [r7, #4]
	uint32_t t_ms = osKernelGetTickCount();
 80018e4:	f003 ffe2 	bl	80058ac <osKernelGetTickCount>
 80018e8:	6178      	str	r0, [r7, #20]
    m->encoder_counts = (int) __HAL_TIM_GET_COUNTER(m->cfg.htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	611a      	str	r2, [r3, #16]

    if (m->encoder_counts != m->last_encoder_counts) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	695b      	ldr	r3, [r3, #20]
 8001900:	429a      	cmp	r2, r3
 8001902:	d062      	beq.n	80019ca <MME_Update+0xee>
        m->angle = fmodf(MME_ANGLE_DEG  *m->encoder_counts / MME_CPR, 360.0f);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001910:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80019d4 <MME_Update+0xf8>
 8001914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001918:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80019d8 <MME_Update+0xfc>
 800191c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001920:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 80019d4 <MME_Update+0xf8>
 8001924:	eeb0 0a47 	vmov.f32	s0, s14
 8001928:	f009 fea0 	bl	800b66c <fmodf>
 800192c:	eef0 7a40 	vmov.f32	s15, s0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	edc3 7a07 	vstr	s15, [r3, #28]
        float dcount = m->encoder_counts - m->last_encoder_counts;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691a      	ldr	r2, [r3, #16]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	edc7 7a04 	vstr	s15, [r7, #16]
        float dt_s = (t_ms - m->last_encoder_time) / 1000.0f;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195c:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80019dc <MME_Update+0x100>
 8001960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001964:	edc7 7a03 	vstr	s15, [r7, #12]
        m->rpm = (dcount / MME_CPR) / (dt_s / 60.0f);
 8001968:	edd7 7a04 	vldr	s15, [r7, #16]
 800196c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80019d8 <MME_Update+0xfc>
 8001970:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001974:	edd7 7a03 	vldr	s15, [r7, #12]
 8001978:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 80019e0 <MME_Update+0x104>
 800197c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edc3 7a08 	vstr	s15, [r3, #32]

        m->last_encoder_counts = m->encoder_counts;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	615a      	str	r2, [r3, #20]
        m->last_encoder_time = t_ms;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	619a      	str	r2, [r3, #24]
        log_trace(&dfl_logger, "ENCODER -- count=%u -- angle=%.3f -- rpm=%.3f", m->encoder_counts, m->angle, m->rpm);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691e      	ldr	r6, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fe01 	bl	80005a8 <__aeabi_f2d>
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdfa 	bl	80005a8 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019bc:	e9cd 4500 	strd	r4, r5, [sp]
 80019c0:	4632      	mov	r2, r6
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <MME_Update+0x108>)
 80019c4:	4808      	ldr	r0, [pc, #32]	@ (80019e8 <MME_Update+0x10c>)
 80019c6:	f7ff fbd6 	bl	8001176 <log_trace>
    }
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop
 80019d4:	43b40000 	.word	0x43b40000
 80019d8:	43fa0000 	.word	0x43fa0000
 80019dc:	447a0000 	.word	0x447a0000
 80019e0:	42700000 	.word	0x42700000
 80019e4:	0800b8f4 	.word	0x0800b8f4
 80019e8:	20000340 	.word	0x20000340

080019ec <MMD_Log_Firmware_Version>:

/* Driver */

void MMD_Log_Firmware_Version(MotorModule *m) {
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	b08c      	sub	sp, #48	@ 0x30
 80019f2:	af06      	add	r7, sp, #24
 80019f4:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_GET_FIRMARE_VERSION };
 80019f6:	2387      	movs	r3, #135	@ 0x87
 80019f8:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef tx_hstat = i2c_master_tx(m, cmd, 1);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	2201      	movs	r2, #1
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff feba 	bl	800177c <i2c_master_tx>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[5];
	HAL_StatusTypeDef rx_hstat = i2c_master_rx(m, buf, 5);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2205      	movs	r2, #5
 8001a12:	4619      	mov	r1, r3
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff09 	bl	800182c <i2c_master_rx>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	75bb      	strb	r3, [r7, #22]
	log_info(&dfl_logger, "MM 0x%02X #%u DRIVER FIRMWARE -- 0x%04X v%u.%u CRC=0x%02X -- tx_hstat=0x%02X -- rx_hstat=0x%02X", m->cfg.i2c_addr, m->cfg.motor_num, (buf[1] << 8) | buf[0], hex_to_bcd(buf[3]), hex_to_bcd(buf[2]), buf[4], tx_hstat, rx_hstat);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	891b      	ldrh	r3, [r3, #8]
 8001a22:	461e      	mov	r6, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a9b      	ldrb	r3, [r3, #10]
 8001a28:	4698      	mov	r8, r3
 8001a2a:	7b7b      	ldrb	r3, [r7, #13]
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	7b3a      	ldrb	r2, [r7, #12]
 8001a30:	ea43 0402 	orr.w	r4, r3, r2
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fbc8 	bl	80021cc <hex_to_bcd>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461d      	mov	r5, r3
 8001a40:	7bbb      	ldrb	r3, [r7, #14]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 fbc2 	bl	80021cc <hex_to_bcd>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	7c3b      	ldrb	r3, [r7, #16]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	7dba      	ldrb	r2, [r7, #22]
 8001a54:	9205      	str	r2, [sp, #20]
 8001a56:	9304      	str	r3, [sp, #16]
 8001a58:	9003      	str	r0, [sp, #12]
 8001a5a:	9102      	str	r1, [sp, #8]
 8001a5c:	9501      	str	r5, [sp, #4]
 8001a5e:	9400      	str	r4, [sp, #0]
 8001a60:	4643      	mov	r3, r8
 8001a62:	4632      	mov	r2, r6
 8001a64:	4904      	ldr	r1, [pc, #16]	@ (8001a78 <MMD_Log_Firmware_Version+0x8c>)
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MMD_Log_Firmware_Version+0x90>)
 8001a68:	f7ff fb5b 	bl	8001122 <log_info>
}
 8001a6c:	bf00      	nop
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a76:	bf00      	nop
 8001a78:	0800b924 	.word	0x0800b924
 8001a7c:	20000340 	.word	0x20000340

08001a80 <MMD_Log_Status_Flags>:

void MMD_Log_Status_Flags(MotorModule *m) {
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a84:	b08d      	sub	sp, #52	@ 0x34
 8001a86:	af02      	add	r7, sp, #8
 8001a88:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = { MMD_CMD_GET_VARIABLES, 0, MMD_VAR_STATUS_FLAGS, 2 };
 8001a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb4 <MMD_Log_Status_Flags+0x134>)
 8001a8c:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef tx_hstat = i2c_master_tx(m, cmd, 4);
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	2204      	movs	r2, #4
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fe70 	bl	800177c <i2c_master_tx>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	77fb      	strb	r3, [r7, #31]
	uint8_t buf[3];
	HAL_StatusTypeDef rx_hstat = i2c_master_rx(m, buf, 3);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff febf 	bl	800182c <i2c_master_rx>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	77bb      	strb	r3, [r7, #30]
	uint16_t flag_word = ((uint16_t)buf[1] << 8) | buf[0];
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	021b      	lsls	r3, r3, #8
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	83bb      	strh	r3, [r7, #28]

	if (LOG_LEVEL <= LL_INFO) {
 8001ac4:	466b      	mov	r3, sp
 8001ac6:	461e      	mov	r6, r3
		char lbuf[dfl_logger.msg_size];
 8001ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb8 <MMD_Log_Status_Flags+0x138>)
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	4688      	mov	r8, r1
 8001ad6:	4699      	mov	r9, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	f04f 0300 	mov.w	r3, #0
 8001ae0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aec:	2300      	movs	r3, #0
 8001aee:	460c      	mov	r4, r1
 8001af0:	461d      	mov	r5, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	00eb      	lsls	r3, r5, #3
 8001afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b00:	00e2      	lsls	r2, r4, #3
 8001b02:	1dcb      	adds	r3, r1, #7
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0c:	ab02      	add	r3, sp, #8
 8001b0e:	3300      	adds	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
		int n = snprintf(lbuf, dfl_logger.msg_size, "DRIVER STATUS FLAGS -- ");
 8001b12:	4b29      	ldr	r3, [pc, #164]	@ (8001bb8 <MMD_Log_Status_Flags+0x138>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a29      	ldr	r2, [pc, #164]	@ (8001bbc <MMD_Log_Status_Flags+0x13c>)
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f007 fbc4 	bl	80092a8 <sniprintf>
 8001b20:	6278      	str	r0, [r7, #36]	@ 0x24
		for (size_t i = 0; i < 16; i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
 8001b26:	e029      	b.n	8001b7c <MMD_Log_Status_Flags+0xfc>
			if (strcmp(flags[i], "N/A") == 0)
 8001b28:	4a25      	ldr	r2, [pc, #148]	@ (8001bc0 <MMD_Log_Status_Flags+0x140>)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	4924      	ldr	r1, [pc, #144]	@ (8001bc4 <MMD_Log_Status_Flags+0x144>)
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fb6c 	bl	8000210 <strcmp>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d01a      	beq.n	8001b74 <MMD_Log_Status_Flags+0xf4>
				continue;
			n += snprintf(lbuf + n, dfl_logger.msg_size - n, "%s=%u ", flags[i], (flag_word >> i) & 1);
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	18d0      	adds	r0, r2, r3
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <MMD_Log_Status_Flags+0x138>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	1ad1      	subs	r1, r2, r3
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc0 <MMD_Log_Status_Flags+0x140>)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001b54:	8bba      	ldrh	r2, [r7, #28]
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	fa42 f303 	asr.w	r3, r2, r3
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4623      	mov	r3, r4
 8001b64:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <MMD_Log_Status_Flags+0x148>)
 8001b66:	f007 fb9f 	bl	80092a8 <sniprintf>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	4413      	add	r3, r2
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b72:	e000      	b.n	8001b76 <MMD_Log_Status_Flags+0xf6>
				continue;
 8001b74:	bf00      	nop
		for (size_t i = 0; i < 16; i++) {
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2b0f      	cmp	r3, #15
 8001b80:	d9d2      	bls.n	8001b28 <MMD_Log_Status_Flags+0xa8>
		}
		snprintf(lbuf + n, dfl_logger.msg_size - n, "-- tx_hstat=0x%02X -- rx_hstat=0x%02X", tx_hstat, rx_hstat);
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	18d0      	adds	r0, r2, r3
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MMD_Log_Status_Flags+0x138>)
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	1ad1      	subs	r1, r2, r3
 8001b90:	7ffa      	ldrb	r2, [r7, #31]
 8001b92:	7fbb      	ldrb	r3, [r7, #30]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <MMD_Log_Status_Flags+0x14c>)
 8001b9a:	f007 fb85 	bl	80092a8 <sniprintf>
		log_info(&dfl_logger, "%s", lbuf);
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	490b      	ldr	r1, [pc, #44]	@ (8001bd0 <MMD_Log_Status_Flags+0x150>)
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <MMD_Log_Status_Flags+0x138>)
 8001ba4:	f7ff fabd 	bl	8001122 <log_info>
 8001ba8:	46b5      	mov	sp, r6
	}
}
 8001baa:	bf00      	nop
 8001bac:	372c      	adds	r7, #44	@ 0x2c
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bb4:	0201009a 	.word	0x0201009a
 8001bb8:	20000340 	.word	0x20000340
 8001bbc:	0800b984 	.word	0x0800b984
 8001bc0:	20000014 	.word	0x20000014
 8001bc4:	0800b8a8 	.word	0x0800b8a8
 8001bc8:	0800b99c 	.word	0x0800b99c
 8001bcc:	0800b9a4 	.word	0x0800b9a4
 8001bd0:	0800b9cc 	.word	0x0800b9cc

08001bd4 <MMD_Reset>:

void MMD_Reset(MotorModule *m) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_RESET };
 8001bdc:	2399      	movs	r3, #153	@ 0x99
 8001bde:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 1);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2201      	movs	r2, #1
 8001be6:	4619      	mov	r1, r3
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fdc7 	bl	800177c <i2c_master_tx>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER RESET -- hstat=0x%02X", hstat);
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4905      	ldr	r1, [pc, #20]	@ (8001c0c <MMD_Reset+0x38>)
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MMD_Reset+0x3c>)
 8001bfa:	f7ff fa92 	bl	8001122 <log_info>
	osDelay(10);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f003 fefb 	bl	80059fa <osDelay>
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	0800b9d0 	.word	0x0800b9d0
 8001c10:	20000340 	.word	0x20000340

08001c14 <MMD_Reinitialize>:

void MMD_Reinitialize(MotorModule *m) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[1] = { MMD_CMD_REINITIALIZE };
 8001c1c:	2396      	movs	r3, #150	@ 0x96
 8001c1e:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 1);
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2201      	movs	r2, #1
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fda7 	bl	800177c <i2c_master_tx>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER REINITIALIZE -- hstat=0x%02X", hstat);
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4904      	ldr	r1, [pc, #16]	@ (8001c48 <MMD_Reinitialize+0x34>)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MMD_Reinitialize+0x38>)
 8001c3a:	f7ff fa72 	bl	8001122 <log_info>
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800b9f0 	.word	0x0800b9f0
 8001c4c:	20000340 	.word	0x20000340

08001c50 <MMD_Clear_Reset>:

void MMD_Clear_Reset(MotorModule *m) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	uint8_t cmd[3] = { MMD_CMD_CLEAR_FLAGS, 0x00, 0x04 };
 8001c58:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <MMD_Clear_Reset+0x40>)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	4611      	mov	r1, r2
 8001c62:	8019      	strh	r1, [r3, #0]
 8001c64:	3302      	adds	r3, #2
 8001c66:	0c12      	lsrs	r2, r2, #16
 8001c68:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 3);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd82 	bl	800177c <i2c_master_tx>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
	log_info(&dfl_logger, "DRIVER CLEAR RESET -- hstat=0x%02X", hstat);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4904      	ldr	r1, [pc, #16]	@ (8001c94 <MMD_Clear_Reset+0x44>)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MMD_Clear_Reset+0x48>)
 8001c84:	f7ff fa4d 	bl	8001122 <log_info>
}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	0800ba38 	.word	0x0800ba38
 8001c94:	0800ba14 	.word	0x0800ba14
 8001c98:	20000340 	.word	0x20000340

08001c9c <MMD_Set_Speed>:

void MMD_Set_Speed(MotorModule *m, int16_t speed, uint8_t mode) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	807b      	strh	r3, [r7, #2]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	707b      	strb	r3, [r7, #1]
	uint8_t cmd[4] = { mode, m->cfg.motor_num & 0x7F, speed & 0x7F, (speed >> 7) & 0x7F };
 8001cac:	787b      	ldrb	r3, [r7, #1]
 8001cae:	723b      	strb	r3, [r7, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7a9b      	ldrb	r3, [r3, #10]
 8001cb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	727b      	strb	r3, [r7, #9]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	72bb      	strb	r3, [r7, #10]
 8001cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ccc:	11db      	asrs	r3, r3, #7
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hstat = i2c_master_tx(m, cmd, 4);
 8001cda:	f107 0308 	add.w	r3, r7, #8
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fd4a 	bl	800177c <i2c_master_tx>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
	log_debug(&dfl_logger, "DRIVER SET SPEED -- hstat=0x%02X", hstat);
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4903      	ldr	r1, [pc, #12]	@ (8001d00 <MMD_Set_Speed+0x64>)
 8001cf2:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <MMD_Set_Speed+0x68>)
 8001cf4:	f7ff fa2a 	bl	800114c <log_debug>
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	0800ba3c 	.word	0x0800ba3c
 8001d04:	20000340 	.word	0x20000340

08001d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_MspInit+0x54>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	210f      	movs	r1, #15
 8001d4a:	f06f 0001 	mvn.w	r0, #1
 8001d4e:	f000 fb87 	bl	8002460 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	@ 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_I2C_MspInit+0x84>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12c      	bne.n	8001ddc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001db0:	2304      	movs	r3, #4
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480c      	ldr	r0, [pc, #48]	@ (8001dec <HAL_I2C_MspInit+0x8c>)
 8001dbc:	f000 fb7a 	bl	80024b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <HAL_I2C_MspInit+0x88>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	@ 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40005400 	.word	0x40005400
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <HAL_TIM_Encoder_MspInit+0x84>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d12c      	bne.n	8001e6c <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b18      	ldr	r3, [pc, #96]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_ENC_A_Pin|M1_ENC_B_Pin;
 8001e4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e68:	f000 fb24 	bl	80024b4 <HAL_GPIO_Init>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3728      	adds	r7, #40	@ 0x28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_UART_MspInit+0x84>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d12b      	bne.n	8001efa <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b18      	ldr	r3, [pc, #96]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_UART_MspInit+0x88>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eda:	230c      	movs	r3, #12
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eea:	2307      	movs	r3, #7
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <HAL_UART_MspInit+0x8c>)
 8001ef6:	f000 fadd 	bl	80024b4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001efa:	bf00      	nop
 8001efc:	3728      	adds	r7, #40	@ 0x28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40004400 	.word	0x40004400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000

08001f10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4b33      	ldr	r3, [pc, #204]	@ (8001ff4 <HAL_InitTick+0xe4>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	4a32      	ldr	r2, [pc, #200]	@ (8001ff4 <HAL_InitTick+0xe4>)
 8001f2a:	f043 0310 	orr.w	r3, r3, #16
 8001f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <HAL_InitTick+0xe4>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f3c:	f107 0210 	add.w	r2, r7, #16
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fea4 	bl	8003c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f56:	f001 fe75 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8001f5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f5c:	e004      	b.n	8001f68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f5e:	f001 fe71 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8001f62:	4603      	mov	r3, r0
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6a:	4a23      	ldr	r2, [pc, #140]	@ (8001ff8 <HAL_InitTick+0xe8>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	3b01      	subs	r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f78:	4a21      	ldr	r2, [pc, #132]	@ (8002000 <HAL_InitTick+0xf0>)
 8001f7a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f7e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f84:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f9c:	4817      	ldr	r0, [pc, #92]	@ (8001ffc <HAL_InitTick+0xec>)
 8001f9e:	f002 fb79 	bl	8004694 <HAL_TIM_Base_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11b      	bne.n	8001fe8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fb0:	4812      	ldr	r0, [pc, #72]	@ (8001ffc <HAL_InitTick+0xec>)
 8001fb2:	f002 fbc9 	bl	8004748 <HAL_TIM_Base_Start_IT>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fc4:	2036      	movs	r0, #54	@ 0x36
 8001fc6:	f000 fa67 	bl	8002498 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d808      	bhi.n	8001fe2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	2036      	movs	r0, #54	@ 0x36
 8001fd6:	f000 fa43 	bl	8002460 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_InitTick+0xf4>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e002      	b.n	8001fe8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fe8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3738      	adds	r7, #56	@ 0x38
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	431bde83 	.word	0x431bde83
 8001ffc:	20000374 	.word	0x20000374
 8002000:	40001000 	.word	0x40001000
 8002004:	20000058 	.word	0x20000058

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <TIM6_DAC_IRQHandler+0x10>)
 8002046:	f002 fd23 	bl	8004a90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000374 	.word	0x20000374

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	f007 fb15 	bl	800969c <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <_exit+0x12>

0800209a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e00a      	b.n	80020c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ac:	f3af 8000 	nop.w
 80020b0:	4601      	mov	r1, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	60ba      	str	r2, [r7, #8]
 80020b8:	b2ca      	uxtb	r2, r1
 80020ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	dbf0      	blt.n	80020ac <_read+0x12>
  }

  return len;
 80020ca:	687b      	ldr	r3, [r7, #4]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020fc:	605a      	str	r2, [r3, #4]
  return 0;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_isatty>:

int _isatty(int file)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002114:	2301      	movs	r3, #1
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002122:	b480      	push	{r7}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	@ (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	@ (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f007 fa96 	bl	800969c <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20020000 	.word	0x20020000
 800219c:	00000400 	.word	0x00000400
 80021a0:	200003bc 	.word	0x200003bc
 80021a4:	20006378 	.word	0x20006378

080021a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <SystemInit+0x20>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <SystemInit+0x20>)
 80021b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <hex_to_bcd>:
 */

#include "utils.h"
#include <math.h>

uint8_t hex_to_bcd(uint8_t hex) {
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
	return (((hex / 10) << 4) | (hex % 10));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002214 <hex_to_bcd+0x48>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	b258      	sxtb	r0, r3
 80021e8:	79fa      	ldrb	r2, [r7, #7]
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <hex_to_bcd+0x48>)
 80021ec:	fba3 1302 	umull	r1, r3, r3, r2
 80021f0:	08d9      	lsrs	r1, r3, #3
 80021f2:	460b      	mov	r3, r1
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	4303      	orrs	r3, r0
 8002202:	b25b      	sxtb	r3, r3
 8002204:	b2db      	uxtb	r3, r3
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	cccccccd 	.word	0xcccccccd

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002250 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800221c:	f7ff ffc4 	bl	80021a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002222:	490d      	ldr	r1, [pc, #52]	@ (8002258 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002224:	4a0d      	ldr	r2, [pc, #52]	@ (800225c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002228:	e002      	b.n	8002230 <LoopCopyDataInit>

0800222a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800222c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800222e:	3304      	adds	r3, #4

08002230 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002230:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002232:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002234:	d3f9      	bcc.n	800222a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002236:	4a0a      	ldr	r2, [pc, #40]	@ (8002260 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002238:	4c0a      	ldr	r4, [pc, #40]	@ (8002264 <LoopFillZerobss+0x22>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800223c:	e001      	b.n	8002242 <LoopFillZerobss>

0800223e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800223e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002240:	3204      	adds	r2, #4

08002242 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002242:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002244:	d3fb      	bcc.n	800223e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002246:	f007 fa2f 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe fff7 	bl	800123c <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002258:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800225c:	0800bec4 	.word	0x0800bec4
  ldr r2, =_sbss
 8002260:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8002264:	20006378 	.word	0x20006378

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_Init+0x40>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HAL_Init+0x40>)
 8002276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800227a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_Init+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <HAL_Init+0x40>)
 8002282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_Init+0x40>)
 800228e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002294:	2003      	movs	r0, #3
 8002296:	f000 f8d8 	bl	800244a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800229a:	200f      	movs	r0, #15
 800229c:	f7ff fe38 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a0:	f7ff fd32 	bl	8001d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000005c 	.word	0x2000005c
 80022d4:	200003c0 	.word	0x200003c0

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	200003c0 	.word	0x200003c0

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800231c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	@ (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	@ (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	@ (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	@ 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff4c 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002472:	f7ff ff61 	bl	8002338 <__NVIC_GetPriorityGrouping>
 8002476:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	6978      	ldr	r0, [r7, #20]
 800247e:	f7ff ffb1 	bl	80023e4 <NVIC_EncodePriority>
 8002482:	4602      	mov	r2, r0
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff80 	bl	8002390 <__NVIC_SetPriority>
}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff54 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	@ 0x24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e165      	b.n	800279c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8154 	bne.w	8002796 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d005      	beq.n	8002506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002502:	2b02      	cmp	r3, #2
 8002504:	d130      	bne.n	8002568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0201 	and.w	r2, r3, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	d017      	beq.n	80025a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d123      	bne.n	80025f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	08da      	lsrs	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3208      	adds	r2, #8
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	220f      	movs	r2, #15
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	08da      	lsrs	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3208      	adds	r2, #8
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0203 	and.w	r2, r3, #3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80ae 	beq.w	8002796 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b5d      	ldr	r3, [pc, #372]	@ (80027b4 <HAL_GPIO_Init+0x300>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	4a5c      	ldr	r2, [pc, #368]	@ (80027b4 <HAL_GPIO_Init+0x300>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	6453      	str	r3, [r2, #68]	@ 0x44
 800264a:	4b5a      	ldr	r3, [pc, #360]	@ (80027b4 <HAL_GPIO_Init+0x300>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002656:	4a58      	ldr	r2, [pc, #352]	@ (80027b8 <HAL_GPIO_Init+0x304>)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <HAL_GPIO_Init+0x308>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d025      	beq.n	80026ce <HAL_GPIO_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4e      	ldr	r2, [pc, #312]	@ (80027c0 <HAL_GPIO_Init+0x30c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01f      	beq.n	80026ca <HAL_GPIO_Init+0x216>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4d      	ldr	r2, [pc, #308]	@ (80027c4 <HAL_GPIO_Init+0x310>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d019      	beq.n	80026c6 <HAL_GPIO_Init+0x212>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4c      	ldr	r2, [pc, #304]	@ (80027c8 <HAL_GPIO_Init+0x314>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4b      	ldr	r2, [pc, #300]	@ (80027cc <HAL_GPIO_Init+0x318>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00d      	beq.n	80026be <HAL_GPIO_Init+0x20a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4a      	ldr	r2, [pc, #296]	@ (80027d0 <HAL_GPIO_Init+0x31c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <HAL_GPIO_Init+0x206>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a49      	ldr	r2, [pc, #292]	@ (80027d4 <HAL_GPIO_Init+0x320>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d101      	bne.n	80026b6 <HAL_GPIO_Init+0x202>
 80026b2:	2306      	movs	r3, #6
 80026b4:	e00c      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026b6:	2307      	movs	r3, #7
 80026b8:	e00a      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e008      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026be:	2304      	movs	r3, #4
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026c2:	2303      	movs	r3, #3
 80026c4:	e004      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x21c>
 80026ce:	2300      	movs	r3, #0
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	f002 0203 	and.w	r2, r2, #3
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4093      	lsls	r3, r2
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026e0:	4935      	ldr	r1, [pc, #212]	@ (80027b8 <HAL_GPIO_Init+0x304>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ee:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002712:	4a31      	ldr	r2, [pc, #196]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002718:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800273c:	4a26      	ldr	r2, [pc, #152]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002742:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002766:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276c:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002790:	4a11      	ldr	r2, [pc, #68]	@ (80027d8 <HAL_GPIO_Init+0x324>)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b0f      	cmp	r3, #15
 80027a0:	f67f ae96 	bls.w	80024d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	@ 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020400 	.word	0x40020400
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40021400 	.word	0x40021400
 80027d4:	40021800 	.word	0x40021800
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
 80027e8:	4613      	mov	r3, r2
 80027ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ec:	787b      	ldrb	r3, [r7, #1]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f8:	e003      	b.n	8002802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	041a      	lsls	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e12b      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fa92 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	@ 0x24
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0201 	bic.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002874:	f001 f9e6 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8002878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4a81      	ldr	r2, [pc, #516]	@ (8002a84 <HAL_I2C_Init+0x274>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d807      	bhi.n	8002894 <HAL_I2C_Init+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a80      	ldr	r2, [pc, #512]	@ (8002a88 <HAL_I2C_Init+0x278>)
 8002888:	4293      	cmp	r3, r2
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e006      	b.n	80028a2 <HAL_I2C_Init+0x92>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a7d      	ldr	r2, [pc, #500]	@ (8002a8c <HAL_I2C_Init+0x27c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	bf94      	ite	ls
 800289c:	2301      	movls	r3, #1
 800289e:	2300      	movhi	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0e7      	b.n	8002a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a78      	ldr	r2, [pc, #480]	@ (8002a90 <HAL_I2C_Init+0x280>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a84 <HAL_I2C_Init+0x274>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d802      	bhi.n	80028e4 <HAL_I2C_Init+0xd4>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3301      	adds	r3, #1
 80028e2:	e009      	b.n	80028f8 <HAL_I2C_Init+0xe8>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a69      	ldr	r2, [pc, #420]	@ (8002a94 <HAL_I2C_Init+0x284>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	099b      	lsrs	r3, r3, #6
 80028f6:	3301      	adds	r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800290a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	495c      	ldr	r1, [pc, #368]	@ (8002a84 <HAL_I2C_Init+0x274>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d819      	bhi.n	800294c <HAL_I2C_Init+0x13c>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e59      	subs	r1, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb1 f3f3 	udiv	r3, r1, r3
 8002926:	1c59      	adds	r1, r3, #1
 8002928:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800292c:	400b      	ands	r3, r1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_I2C_Init+0x138>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1e59      	subs	r1, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002946:	e051      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 8002948:	2304      	movs	r3, #4
 800294a:	e04f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d111      	bne.n	8002978 <HAL_I2C_Init+0x168>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e012      	b.n	800299e <HAL_I2C_Init+0x18e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Init+0x196>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e022      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10e      	bne.n	80029cc <HAL_I2C_Init+0x1bc>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1e58      	subs	r0, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	440b      	add	r3, r1
 80029bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Init+0x1dc>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	6809      	ldr	r1, [r1, #0]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6911      	ldr	r1, [r2, #16]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	000186a0 	.word	0x000186a0
 8002a88:	001e847f 	.word	0x001e847f
 8002a8c:	003d08ff 	.word	0x003d08ff
 8002a90:	431bde83 	.word	0x431bde83
 8002a94:	10624dd3 	.word	0x10624dd3

08002a98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	817b      	strh	r3, [r7, #10]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff fc14 	bl	80022d8 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b20      	cmp	r3, #32
 8002abc:	f040 80e0 	bne.w	8002c80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4970      	ldr	r1, [pc, #448]	@ (8002c8c <HAL_I2C_Master_Transmit+0x1f4>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fd92 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e0d3      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x50>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0cc      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d007      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f042 0201 	orr.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	@ 0x21
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	893a      	ldrh	r2, [r7, #8]
 8002b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	@ (8002c90 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b50:	8979      	ldrh	r1, [r7, #10]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fbfc 	bl	8003354 <I2C_MasterRequestWrite>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e08d      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b7c:	e066      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	6a39      	ldr	r1, [r7, #32]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fe50 	bl	8003828 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e06b      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	781a      	ldrb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	1c5a      	adds	r2, r3, #1
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11b      	bne.n	8002c20 <HAL_I2C_Master_Transmit+0x188>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d017      	beq.n	8002c20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	6a39      	ldr	r1, [r7, #32]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fe47 	bl	80038b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e01a      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d194      	bne.n	8002b7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
  }
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	00100002 	.word	0x00100002
 8002c90:	ffff0000 	.word	0xffff0000

08002c94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	@ 0x30
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff fb16 	bl	80022d8 <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	f040 8217 	bne.w	80030ea <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	497c      	ldr	r1, [pc, #496]	@ (8002eb8 <HAL_I2C_Master_Receive+0x224>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fc94 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e20a      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_I2C_Master_Receive+0x50>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e203      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d007      	beq.n	8002d0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0201 	orr.w	r2, r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2222      	movs	r2, #34	@ 0x22
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2210      	movs	r2, #16
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	893a      	ldrh	r2, [r7, #8]
 8002d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4a5c      	ldr	r2, [pc, #368]	@ (8002ebc <HAL_I2C_Master_Receive+0x228>)
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d4c:	8979      	ldrh	r1, [r7, #10]
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fb80 	bl	8003458 <I2C_MasterRequestRead>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e1c4      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	623b      	str	r3, [r7, #32]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e198      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d11b      	bne.n	8002dd2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	61fb      	str	r3, [r7, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e178      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d11b      	bne.n	8002e12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002de8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	e158      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e38:	e144      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	f200 80f1 	bhi.w	8003026 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d123      	bne.n	8002e94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fd79 	bl	8003948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e145      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e92:	e117      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d14e      	bne.n	8002f3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4906      	ldr	r1, [pc, #24]	@ (8002ec0 <HAL_I2C_Master_Receive+0x22c>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fba4 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e11a      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
 8002eb6:	bf00      	nop
 8002eb8:	00100002 	.word	0x00100002
 8002ebc:	ffff0000 	.word	0xffff0000
 8002ec0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f38:	e0c4      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	496c      	ldr	r1, [pc, #432]	@ (80030f4 <HAL_I2C_Master_Receive+0x460>)
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fb55 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cb      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4955      	ldr	r1, [pc, #340]	@ (80030f4 <HAL_I2C_Master_Receive+0x460>)
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fb27 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e09d      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003024:	e04e      	b.n	80030c4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fc8c 	bl	8003948 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e058      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d124      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003090:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f47f aeb6 	bne.w	8002e3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3728      	adds	r7, #40	@ 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	00010004 	.word	0x00010004

080030f8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	460b      	mov	r3, r1
 8003106:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff f8e6 	bl	80022d8 <HAL_GetTick>
 800310c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 8111 	bne.w	8003342 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2319      	movs	r3, #25
 8003126:	2201      	movs	r2, #1
 8003128:	4988      	ldr	r1, [pc, #544]	@ (800334c <HAL_I2C_IsDeviceReady+0x254>)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fa62 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	e104      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_I2C_IsDeviceReady+0x50>
 8003144:	2302      	movs	r3, #2
 8003146:	e0fd      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d007      	beq.n	800316e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2224      	movs	r2, #36	@ 0x24
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4a70      	ldr	r2, [pc, #448]	@ (8003350 <HAL_I2C_IsDeviceReady+0x258>)
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa20 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00d      	beq.n	80031d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031c8:	d103      	bne.n	80031d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e0b6      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031d6:	897b      	ldrh	r3, [r7, #10]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80031e6:	f7ff f877 	bl	80022d8 <HAL_GetTick>
 80031ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003210:	bf0c      	ite	eq
 8003212:	2301      	moveq	r3, #1
 8003214:	2300      	movne	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800321a:	e025      	b.n	8003268 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800321c:	f7ff f85c 	bl	80022d8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d302      	bcc.n	8003232 <HAL_I2C_IsDeviceReady+0x13a>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d103      	bne.n	800323a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	22a0      	movs	r2, #160	@ 0xa0
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b02      	cmp	r3, #2
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2ba0      	cmp	r3, #160	@ 0xa0
 8003272:	d005      	beq.n	8003280 <HAL_I2C_IsDeviceReady+0x188>
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_I2C_IsDeviceReady+0x188>
 800327a:	7dbb      	ldrb	r3, [r7, #22]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0cd      	beq.n	800321c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b02      	cmp	r3, #2
 8003294:	d129      	bne.n	80032ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a6:	2300      	movs	r3, #0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2319      	movs	r3, #25
 80032c2:	2201      	movs	r2, #1
 80032c4:	4921      	ldr	r1, [pc, #132]	@ (800334c <HAL_I2C_IsDeviceReady+0x254>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f994 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e036      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e02c      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003302:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2319      	movs	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	490f      	ldr	r1, [pc, #60]	@ (800334c <HAL_I2C_IsDeviceReady+0x254>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f970 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e012      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	3301      	adds	r3, #1
 8003322:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	f4ff af32 	bcc.w	8003192 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003342:	2302      	movs	r3, #2
  }
}
 8003344:	4618      	mov	r0, r3
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00100002 	.word	0x00100002
 8003350:	ffff0000 	.word	0xffff0000

08003354 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	460b      	mov	r3, r1
 8003362:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d006      	beq.n	800337e <I2C_MasterRequestWrite+0x2a>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d003      	beq.n	800337e <I2C_MasterRequestWrite+0x2a>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800337c:	d108      	bne.n	8003390 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e00b      	b.n	80033a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	2b12      	cmp	r3, #18
 8003396:	d107      	bne.n	80033a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f91d 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ce:	d103      	bne.n	80033d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e035      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e4:	d108      	bne.n	80033f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033e6:	897b      	ldrh	r3, [r7, #10]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033f4:	611a      	str	r2, [r3, #16]
 80033f6:	e01b      	b.n	8003430 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033f8:	897b      	ldrh	r3, [r7, #10]
 80033fa:	11db      	asrs	r3, r3, #7
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f063 030f 	orn	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <I2C_MasterRequestWrite+0xfc>)
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f966 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e010      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <I2C_MasterRequestWrite+0x100>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f956 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e000      	b.n	8003448 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010008 	.word	0x00010008
 8003454:	00010002 	.word	0x00010002

08003458 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	460b      	mov	r3, r1
 8003466:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800347c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d006      	beq.n	8003492 <I2C_MasterRequestRead+0x3a>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d003      	beq.n	8003492 <I2C_MasterRequestRead+0x3a>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003490:	d108      	bne.n	80034a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e00b      	b.n	80034bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	d107      	bne.n	80034bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f893 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e2:	d103      	bne.n	80034ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e079      	b.n	80035e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f8:	d108      	bne.n	800350c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]
 800350a:	e05f      	b.n	80035cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800350c:	897b      	ldrh	r3, [r7, #10]
 800350e:	11db      	asrs	r3, r3, #7
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0306 	and.w	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f063 030f 	orn	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4930      	ldr	r1, [pc, #192]	@ (80035ec <I2C_MasterRequestRead+0x194>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8dc 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e054      	b.n	80035e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4929      	ldr	r1, [pc, #164]	@ (80035f0 <I2C_MasterRequestRead+0x198>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f8cc 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e044      	b.n	80035e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800357e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f831 	bl	80035f4 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a6:	d103      	bne.n	80035b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e017      	b.n	80035e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	11db      	asrs	r3, r3, #7
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f003 0306 	and.w	r3, r3, #6
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f063 030e 	orn	r3, r3, #14
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4907      	ldr	r1, [pc, #28]	@ (80035f0 <I2C_MasterRequestRead+0x198>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f888 	bl	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	00010008 	.word	0x00010008
 80035f0:	00010002 	.word	0x00010002

080035f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003604:	e048      	b.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800360c:	d044      	beq.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fe fe63 	bl	80022d8 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <I2C_WaitOnFlagUntilTimeout+0x30>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d139      	bne.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	0c1b      	lsrs	r3, r3, #16
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d10d      	bne.n	800364a <I2C_WaitOnFlagUntilTimeout+0x56>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	e00c      	b.n	8003664 <I2C_WaitOnFlagUntilTimeout+0x70>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	429a      	cmp	r2, r3
 8003668:	d116      	bne.n	8003698 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e023      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	0c1b      	lsrs	r3, r3, #16
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10d      	bne.n	80036be <I2C_WaitOnFlagUntilTimeout+0xca>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	e00c      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d093      	beq.n	8003606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f6:	e071      	b.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003706:	d123      	bne.n	8003750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003720:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e067      	b.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003756:	d041      	beq.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003758:	f7fe fdbe 	bl	80022d8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	d302      	bcc.n	800376e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d136      	bne.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10c      	bne.n	8003792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e00b      	b.n	80037aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	43da      	mvns	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e021      	b.n	8003820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10c      	bne.n	8003800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf14      	ite	ne
 80037f8:	2301      	movne	r3, #1
 80037fa:	2300      	moveq	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e00b      	b.n	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	f47f af6d 	bne.w	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	e034      	b.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f8e3 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e034      	b.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800384c:	d028      	beq.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384e:	f7fe fd43 	bl	80022d8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	d302      	bcc.n	8003864 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d11d      	bne.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386e:	2b80      	cmp	r3, #128	@ 0x80
 8003870:	d016      	beq.n	80038a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e007      	b.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d1c3      	bne.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	e034      	b.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f89b 	bl	8003a02 <I2C_IsAcknowledgeFailed>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e034      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038dc:	d028      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fcfb 	bl	80022d8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11d      	bne.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d016      	beq.n	8003930 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	f043 0220 	orr.w	r2, r3, #32
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e007      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d1c3      	bne.n	80038c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003954:	e049      	b.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d119      	bne.n	8003998 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0210 	mvn.w	r2, #16
 800396c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e030      	b.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7fe fc9e 	bl	80022d8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11d      	bne.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	d016      	beq.n	80039ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f043 0220 	orr.w	r2, r3, #32
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e007      	b.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f4:	2b40      	cmp	r3, #64	@ 0x40
 80039f6:	d1ae      	bne.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a18:	d11b      	bne.n	8003a52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fe fbc2 	bl	80022d8 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fe fbbe 	bl	80022d8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f887 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fe f982 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800bb20 	.word	0x0800bb20
 8003c24:	20000054 	.word	0x20000054
 8003c28:	20000058 	.word	0x20000058

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000054 	.word	0x20000054

08003c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c48:	f7ff fff0 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40023800 	.word	0x40023800
 8003c68:	0800bb30 	.word	0x0800bb30

08003c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c70:	f7ff ffdc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0b5b      	lsrs	r3, r3, #13
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800bb30 	.word	0x0800bb30

08003c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca4:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0203 	and.w	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd6:	4b07      	ldr	r3, [pc, #28]	@ (8003cf4 <HAL_RCC_GetClockConfig+0x60>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 020f 	and.w	r2, r3, #15
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40023c00 	.word	0x40023c00

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b0ae      	sub	sp, #184	@ 0xb8
 8003cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d1e:	4bcb      	ldr	r3, [pc, #812]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b0c      	cmp	r3, #12
 8003d28:	f200 8206 	bhi.w	8004138 <HAL_RCC_GetSysClockFreq+0x440>
 8003d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08004139 	.word	0x08004139
 8003d3c:	08004139 	.word	0x08004139
 8003d40:	08004139 	.word	0x08004139
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08004139 	.word	0x08004139
 8003d4c:	08004139 	.word	0x08004139
 8003d50:	08004139 	.word	0x08004139
 8003d54:	08003d79 	.word	0x08003d79
 8003d58:	08004139 	.word	0x08004139
 8003d5c:	08004139 	.word	0x08004139
 8003d60:	08004139 	.word	0x08004139
 8003d64:	08003f69 	.word	0x08003f69
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4bb9      	ldr	r3, [pc, #740]	@ (8004050 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d6e:	e1e7      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d70:	4bb8      	ldr	r3, [pc, #736]	@ (8004054 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d76:	e1e3      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4bb4      	ldr	r3, [pc, #720]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d84:	4bb1      	ldr	r3, [pc, #708]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d071      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d90:	4bae      	ldr	r3, [pc, #696]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003da0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003db2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003db6:	4622      	mov	r2, r4
 8003db8:	462b      	mov	r3, r5
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4621      	mov	r1, r4
 8003dd0:	1a51      	subs	r1, r2, r1
 8003dd2:	6439      	str	r1, [r7, #64]	@ 0x40
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003de8:	4649      	mov	r1, r9
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	4641      	mov	r1, r8
 8003dee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df2:	4641      	mov	r1, r8
 8003df4:	018a      	lsls	r2, r1, #6
 8003df6:	4641      	mov	r1, r8
 8003df8:	1a51      	subs	r1, r2, r1
 8003dfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8003e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e10:	4649      	mov	r1, r9
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4641      	mov	r1, r8
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4622      	mov	r2, r4
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e2a:	462b      	mov	r3, r5
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e40:	4629      	mov	r1, r5
 8003e42:	024b      	lsls	r3, r1, #9
 8003e44:	4621      	mov	r1, r4
 8003e46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	024a      	lsls	r2, r1, #9
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e64:	f7fc fed0 	bl	8000c08 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e72:	e067      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e74:	4b75      	ldr	r3, [pc, #468]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e8e:	2300      	movs	r3, #0
 8003e90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f04f 0000 	mov.w	r0, #0
 8003e9e:	f04f 0100 	mov.w	r1, #0
 8003ea2:	0159      	lsls	r1, r3, #5
 8003ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea8:	0150      	lsls	r0, r2, #5
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4621      	mov	r1, r4
 8003eb0:	1a51      	subs	r1, r2, r1
 8003eb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ec8:	4649      	mov	r1, r9
 8003eca:	018b      	lsls	r3, r1, #6
 8003ecc:	4641      	mov	r1, r8
 8003ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed2:	4641      	mov	r1, r8
 8003ed4:	018a      	lsls	r2, r1, #6
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003edc:	4649      	mov	r1, r9
 8003ede:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef6:	4692      	mov	sl, r2
 8003ef8:	469b      	mov	fp, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	eb1a 0303 	adds.w	r3, sl, r3
 8003f00:	623b      	str	r3, [r7, #32]
 8003f02:	462b      	mov	r3, r5
 8003f04:	eb4b 0303 	adc.w	r3, fp, r3
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f16:	4629      	mov	r1, r5
 8003f18:	028b      	lsls	r3, r1, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f20:	4621      	mov	r1, r4
 8003f22:	028a      	lsls	r2, r1, #10
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f30:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f36:	f7fc fe67 	bl	8000c08 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4613      	mov	r3, r2
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f44:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f66:	e0eb      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f68:	4b38      	ldr	r3, [pc, #224]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f74:	4b35      	ldr	r3, [pc, #212]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d06b      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f80:	4b32      	ldr	r3, [pc, #200]	@ (800404c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	2200      	movs	r2, #0
 8003f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f94:	2300      	movs	r3, #0
 8003f96:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f98:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fae:	0150      	lsls	r0, r2, #5
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	1a51      	subs	r1, r2, r1
 8003fb8:	61b9      	str	r1, [r7, #24]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fce:	4659      	mov	r1, fp
 8003fd0:	018b      	lsls	r3, r1, #6
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd8:	4651      	mov	r1, sl
 8003fda:	018a      	lsls	r2, r1, #6
 8003fdc:	4651      	mov	r1, sl
 8003fde:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	4699      	mov	r9, r3
 8004000:	4623      	mov	r3, r4
 8004002:	eb18 0303 	adds.w	r3, r8, r3
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	462b      	mov	r3, r5
 800400a:	eb49 0303 	adc.w	r3, r9, r3
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	f04f 0200 	mov.w	r2, #0
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800401c:	4629      	mov	r1, r5
 800401e:	024b      	lsls	r3, r1, #9
 8004020:	4621      	mov	r1, r4
 8004022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004026:	4621      	mov	r1, r4
 8004028:	024a      	lsls	r2, r1, #9
 800402a:	4610      	mov	r0, r2
 800402c:	4619      	mov	r1, r3
 800402e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004032:	2200      	movs	r2, #0
 8004034:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004036:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004038:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800403c:	f7fc fde4 	bl	8000c08 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4613      	mov	r3, r2
 8004046:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800404a:	e065      	b.n	8004118 <HAL_RCC_GetSysClockFreq+0x420>
 800404c:	40023800 	.word	0x40023800
 8004050:	00f42400 	.word	0x00f42400
 8004054:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004058:	4b3d      	ldr	r3, [pc, #244]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x458>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	2200      	movs	r2, #0
 8004060:	4618      	mov	r0, r3
 8004062:	4611      	mov	r1, r2
 8004064:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004068:	653b      	str	r3, [r7, #80]	@ 0x50
 800406a:	2300      	movs	r3, #0
 800406c:	657b      	str	r3, [r7, #84]	@ 0x54
 800406e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004072:	4642      	mov	r2, r8
 8004074:	464b      	mov	r3, r9
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	0159      	lsls	r1, r3, #5
 8004080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004084:	0150      	lsls	r0, r2, #5
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4641      	mov	r1, r8
 800408c:	1a51      	subs	r1, r2, r1
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	4649      	mov	r1, r9
 8004092:	eb63 0301 	sbc.w	r3, r3, r1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040a4:	4659      	mov	r1, fp
 80040a6:	018b      	lsls	r3, r1, #6
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ae:	4651      	mov	r1, sl
 80040b0:	018a      	lsls	r2, r1, #6
 80040b2:	4651      	mov	r1, sl
 80040b4:	1a54      	subs	r4, r2, r1
 80040b6:	4659      	mov	r1, fp
 80040b8:	eb63 0501 	sbc.w	r5, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	00eb      	lsls	r3, r5, #3
 80040c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ca:	00e2      	lsls	r2, r4, #3
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	18e3      	adds	r3, r4, r3
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	464b      	mov	r3, r9
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ea:	4629      	mov	r1, r5
 80040ec:	028b      	lsls	r3, r1, #10
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f4:	4621      	mov	r1, r4
 80040f6:	028a      	lsls	r2, r1, #10
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004100:	2200      	movs	r2, #0
 8004102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004104:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800410a:	f7fc fd7d 	bl	8000c08 <__aeabi_uldivmod>
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4613      	mov	r3, r2
 8004114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004118:	4b0d      	ldr	r3, [pc, #52]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x458>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	0f1b      	lsrs	r3, r3, #28
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800412a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004136:	e003      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x45c>)
 800413a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800413e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004140:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004144:	4618      	mov	r0, r3
 8004146:	37b8      	adds	r7, #184	@ 0xb8
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400

08004158 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e28d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8083 	beq.w	800427e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004178:	4b94      	ldr	r3, [pc, #592]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b04      	cmp	r3, #4
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004184:	4b91      	ldr	r3, [pc, #580]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 030c 	and.w	r3, r3, #12
        || \
 800418c:	2b08      	cmp	r3, #8
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004190:	4b8e      	ldr	r3, [pc, #568]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004198:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b8b      	ldr	r3, [pc, #556]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b88      	ldr	r3, [pc, #544]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b84      	ldr	r3, [pc, #528]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x124>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e25a      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x90>
 80041da:	4b7c      	ldr	r3, [pc, #496]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7b      	ldr	r2, [pc, #492]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0xb4>
 80041f2:	4b76      	ldr	r3, [pc, #472]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a75      	ldr	r2, [pc, #468]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b73      	ldr	r3, [pc, #460]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a72      	ldr	r2, [pc, #456]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xcc>
 800420c:	4b6f      	ldr	r3, [pc, #444]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b6c      	ldr	r3, [pc, #432]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe f854 	bl	80022d8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe f850 	bl	80022d8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e21f      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b61      	ldr	r3, [pc, #388]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xdc>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe f840 	bl	80022d8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe f83c 	bl	80022d8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e20b      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b57      	ldr	r3, [pc, #348]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x104>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d06f      	beq.n	800436a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800428a:	4b50      	ldr	r3, [pc, #320]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004296:	4b4d      	ldr	r3, [pc, #308]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
        || \
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042a2:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ae:	4b47      	ldr	r3, [pc, #284]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d11c      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ba:	4b44      	ldr	r3, [pc, #272]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c6:	4b41      	ldr	r3, [pc, #260]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e1d3      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b3b      	ldr	r3, [pc, #236]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4937      	ldr	r1, [pc, #220]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f2:	e03a      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fc:	4b34      	ldr	r3, [pc, #208]	@ (80043d0 <HAL_RCC_OscConfig+0x278>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004302:	f7fd ffe9 	bl	80022d8 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7fd ffe5 	bl	80022d8 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1b4      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	4b2b      	ldr	r3, [pc, #172]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004328:	4b28      	ldr	r3, [pc, #160]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4925      	ldr	r1, [pc, #148]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	e015      	b.n	800436a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433e:	4b24      	ldr	r3, [pc, #144]	@ (80043d0 <HAL_RCC_OscConfig+0x278>)
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004344:	f7fd ffc8 	bl	80022d8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800434c:	f7fd ffc4 	bl	80022d8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e193      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b00      	cmp	r3, #0
 8004374:	d036      	beq.n	80043e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800437e:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <HAL_RCC_OscConfig+0x27c>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fd ffa8 	bl	80022d8 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438c:	f7fd ffa4 	bl	80022d8 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e173      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <HAL_RCC_OscConfig+0x274>)
 80043a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x234>
 80043aa:	e01b      	b.n	80043e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ac:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <HAL_RCC_OscConfig+0x27c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fd ff91 	bl	80022d8 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	e00e      	b.n	80043d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ba:	f7fd ff8d 	bl	80022d8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d907      	bls.n	80043d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e15c      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 80043cc:	40023800 	.word	0x40023800
 80043d0:	42470000 	.word	0x42470000
 80043d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ea      	bne.n	80043ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8097 	beq.w	8004520 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4b83      	ldr	r3, [pc, #524]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10f      	bne.n	8004422 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	4b7f      	ldr	r3, [pc, #508]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	4a7e      	ldr	r2, [pc, #504]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004410:	6413      	str	r3, [r2, #64]	@ 0x40
 8004412:	4b7c      	ldr	r3, [pc, #496]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441a:	60bb      	str	r3, [r7, #8]
 800441c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004422:	4b79      	ldr	r3, [pc, #484]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d118      	bne.n	8004460 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800442e:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a75      	ldr	r2, [pc, #468]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443a:	f7fd ff4d 	bl	80022d8 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004442:	f7fd ff49 	bl	80022d8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e118      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	4b6c      	ldr	r3, [pc, #432]	@ (8004608 <HAL_RCC_OscConfig+0x4b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x31e>
 8004468:	4b66      	ldr	r3, [pc, #408]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446c:	4a65      	ldr	r2, [pc, #404]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	f043 0301 	orr.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	@ 0x70
 8004474:	e01c      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b05      	cmp	r3, #5
 800447c:	d10c      	bne.n	8004498 <HAL_RCC_OscConfig+0x340>
 800447e:	4b61      	ldr	r3, [pc, #388]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004482:	4a60      	ldr	r2, [pc, #384]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	6713      	str	r3, [r2, #112]	@ 0x70
 800448a:	4b5e      	ldr	r3, [pc, #376]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448e:	4a5d      	ldr	r2, [pc, #372]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	6713      	str	r3, [r2, #112]	@ 0x70
 8004496:	e00b      	b.n	80044b0 <HAL_RCC_OscConfig+0x358>
 8004498:	4b5a      	ldr	r3, [pc, #360]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449c:	4a59      	ldr	r2, [pc, #356]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044a4:	4b57      	ldr	r3, [pc, #348]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a56      	ldr	r2, [pc, #344]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	f023 0304 	bic.w	r3, r3, #4
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fd ff0e 	bl	80022d8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	e00a      	b.n	80044d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c0:	f7fd ff0a 	bl	80022d8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e0d7      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0ee      	beq.n	80044c0 <HAL_RCC_OscConfig+0x368>
 80044e2:	e014      	b.n	800450e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e4:	f7fd fef8 	bl	80022d8 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7fd fef4 	bl	80022d8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e0c1      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004502:	4b40      	ldr	r3, [pc, #256]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1ee      	bne.n	80044ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d105      	bne.n	8004520 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004514:	4b3b      	ldr	r3, [pc, #236]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	4a3a      	ldr	r2, [pc, #232]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80ad 	beq.w	8004684 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452a:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b08      	cmp	r3, #8
 8004534:	d060      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d145      	bne.n	80045ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453e:	4b33      	ldr	r3, [pc, #204]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fec8 	bl	80022d8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454c:	f7fd fec4 	bl	80022d8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e093      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	4b29      	ldr	r3, [pc, #164]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	3b01      	subs	r3, #1
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	071b      	lsls	r3, r3, #28
 8004596:	491b      	ldr	r1, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd fe99 	bl	80022d8 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fd fe95 	bl	80022d8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e064      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x452>
 80045c8:	e05c      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <HAL_RCC_OscConfig+0x4b4>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd fe82 	bl	80022d8 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd fe7e 	bl	80022d8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04d      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	@ (8004604 <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x480>
 80045f6:	e045      	b.n	8004684 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e040      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
 8004604:	40023800 	.word	0x40023800
 8004608:	40007000 	.word	0x40007000
 800460c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004610:	4b1f      	ldr	r3, [pc, #124]	@ (8004690 <HAL_RCC_OscConfig+0x538>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d030      	beq.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d129      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d122      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004646:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	4293      	cmp	r3, r2
 800464a:	d119      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	3b01      	subs	r3, #1
 800465a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d10f      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d107      	bne.n	8004680 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800

08004694 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e041      	b.n	800472a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f839 	bl	8004732 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4610      	mov	r0, r2
 80046d4:	f000 faf4 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d001      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e04e      	b.n	80047fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	@ (800480c <HAL_TIM_Base_Start_IT+0xc4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d022      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478a:	d01d      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_TIM_Base_Start_IT+0xc8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d018      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_TIM_Base_Start_IT+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <HAL_TIM_Base_Start_IT+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00e      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_TIM_Base_Start_IT+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d009      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_TIM_Base_Start_IT+0xdc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d010      	beq.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e007      	b.n	80047fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40014000 	.word	0x40014000
 8004824:	40001800 	.word	0x40001800

08004828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e097      	b.n	800496c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fd facd 	bl	8001df0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800486c:	f023 0307 	bic.w	r3, r3, #7
 8004870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	3304      	adds	r3, #4
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f000 fa1f 	bl	8004cc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	021b      	lsls	r3, r3, #8
 80048ba:	4313      	orrs	r3, r2
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048c8:	f023 030c 	bic.w	r3, r3, #12
 80048cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	021b      	lsls	r3, r3, #8
 80048e4:	4313      	orrs	r3, r2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	011a      	lsls	r2, r3, #4
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	031b      	lsls	r3, r3, #12
 80048f8:	4313      	orrs	r3, r2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	4313      	orrs	r3, r2
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004984:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800498c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004994:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800499c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d110      	bne.n	80049c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d102      	bne.n	80049b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049aa:	7b7b      	ldrb	r3, [r7, #13]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e069      	b.n	8004a88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049c4:	e031      	b.n	8004a2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d110      	bne.n	80049ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d102      	bne.n	80049d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d2:	7b3b      	ldrb	r3, [r7, #12]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d001      	beq.n	80049dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e055      	b.n	8004a88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049ec:	e01d      	b.n	8004a2a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d108      	bne.n	8004a06 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d105      	bne.n	8004a06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049fa:	7b7b      	ldrb	r3, [r7, #13]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a00:	7b3b      	ldrb	r3, [r7, #12]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d001      	beq.n	8004a0a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e03e      	b.n	8004a88 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0xc4>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d008      	beq.n	8004a48 <HAL_TIM_Encoder_Start+0xd4>
 8004a36:	e00f      	b.n	8004a58 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 f9e3 	bl	8004e0c <TIM_CCxChannelCmd>
      break;
 8004a46:	e016      	b.n	8004a76 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2104      	movs	r1, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f9db 	bl	8004e0c <TIM_CCxChannelCmd>
      break;
 8004a56:	e00e      	b.n	8004a76 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f9d3 	bl	8004e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	2104      	movs	r1, #4
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f9cc 	bl	8004e0c <TIM_CCxChannelCmd>
      break;
 8004a74:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0202 	mvn.w	r2, #2
 8004ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f8d2 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f8c4 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 f8d5 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d020      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0204 	mvn.w	r2, #4
 8004b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8ac 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004b2c:	e005      	b.n	8004b3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f89e 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f8af 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0208 	mvn.w	r2, #8
 8004b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2204      	movs	r2, #4
 8004b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f886 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f878 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f889 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0210 	mvn.w	r2, #16
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2208      	movs	r2, #8
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f860 	bl	8004c84 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f852 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f863 	bl	8004c98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0201 	mvn.w	r2, #1
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fd72 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f9a2 	bl	8004f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d007      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f834 	bl	8004cac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00c      	beq.n	8004c68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0220 	mvn.w	r2, #32
 8004c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f974 	bl	8004f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a43      	ldr	r2, [pc, #268]	@ (8004de0 <TIM_Base_SetConfig+0x120>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cde:	d00f      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a40      	ldr	r2, [pc, #256]	@ (8004de4 <TIM_Base_SetConfig+0x124>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00b      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a3f      	ldr	r2, [pc, #252]	@ (8004de8 <TIM_Base_SetConfig+0x128>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0x40>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d108      	bne.n	8004d12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a32      	ldr	r2, [pc, #200]	@ (8004de0 <TIM_Base_SetConfig+0x120>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d02b      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d20:	d027      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2f      	ldr	r2, [pc, #188]	@ (8004de4 <TIM_Base_SetConfig+0x124>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d023      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <TIM_Base_SetConfig+0x128>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01f      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a2d      	ldr	r2, [pc, #180]	@ (8004dec <TIM_Base_SetConfig+0x12c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d01b      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d017      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <TIM_Base_SetConfig+0x134>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d013      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <TIM_Base_SetConfig+0x138>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00f      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <TIM_Base_SetConfig+0x13c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <TIM_Base_SetConfig+0x140>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a27      	ldr	r2, [pc, #156]	@ (8004e04 <TIM_Base_SetConfig+0x144>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_Base_SetConfig+0xb2>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	@ (8004e08 <TIM_Base_SetConfig+0x148>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d108      	bne.n	8004d84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a0e      	ldr	r2, [pc, #56]	@ (8004de0 <TIM_Base_SetConfig+0x120>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d003      	beq.n	8004db2 <TIM_Base_SetConfig+0xf2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <TIM_Base_SetConfig+0x130>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d103      	bne.n	8004dba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	601a      	str	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40010400 	.word	0x40010400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800
 8004e00:	40001800 	.word	0x40001800
 8004e04:	40001c00 	.word	0x40001c00
 8004e08:	40002000 	.word	0x40002000

08004e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2201      	movs	r2, #1
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e05a      	b.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d022      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ebc:	d01d      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d018      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00e      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d009      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d004      	beq.n	8004efa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a15      	ldr	r2, [pc, #84]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10c      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40010000 	.word	0x40010000
 8004f38:	40000400 	.word	0x40000400
 8004f3c:	40000800 	.word	0x40000800
 8004f40:	40000c00 	.word	0x40000c00
 8004f44:	40010400 	.word	0x40010400
 8004f48:	40014000 	.word	0x40014000
 8004f4c:	40001800 	.word	0x40001800

08004f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e042      	b.n	8005010 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc ff6e 	bl	8001e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2224      	movs	r2, #36	@ 0x24
 8004fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f973 	bl	80052a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695a      	ldr	r2, [r3, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	@ 0x28
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4613      	mov	r3, r2
 8005026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d175      	bne.n	8005124 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_Transmit+0x2c>
 800503e:	88fb      	ldrh	r3, [r7, #6]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e06e      	b.n	8005126 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2221      	movs	r2, #33	@ 0x21
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005056:	f7fd f93f 	bl	80022d8 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	88fa      	ldrh	r2, [r7, #6]
 8005060:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005070:	d108      	bne.n	8005084 <HAL_UART_Transmit+0x6c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d104      	bne.n	8005084 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e003      	b.n	800508c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800508c:	e02e      	b.n	80050ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	@ 0x80
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f848 	bl	800512e <UART_WaitOnFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e03a      	b.n	8005126 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10b      	bne.n	80050ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	3302      	adds	r3, #2
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	e007      	b.n	80050de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3301      	adds	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1cb      	bne.n	800508e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2140      	movs	r1, #64	@ 0x40
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f814 	bl	800512e <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
  }
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513e:	e03b      	b.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005146:	d037      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005148:	f7fd f8c6 	bl	80022d8 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <UART_WaitOnFlagUntilTimeout+0x30>
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e03a      	b.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d023      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2b80      	cmp	r3, #128	@ 0x80
 8005174:	d020      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b40      	cmp	r3, #64	@ 0x40
 800517a:	d01d      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b08      	cmp	r3, #8
 8005188:	d116      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 f81d 	bl	80051e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2208      	movs	r2, #8
 80051aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e00f      	b.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d0b4      	beq.n	8005140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b095      	sub	sp, #84	@ 0x54
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005208:	643a      	str	r2, [r7, #64]	@ 0x40
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800520e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	61fb      	str	r3, [r7, #28]
   return(result);
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3314      	adds	r3, #20
 800523a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800523c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800523e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	2b01      	cmp	r3, #1
 8005256:	d119      	bne.n	800528c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60bb      	str	r3, [r7, #8]
   return(result);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005278:	61ba      	str	r2, [r7, #24]
 800527a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800529a:	bf00      	nop
 800529c:	3754      	adds	r7, #84	@ 0x54
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052ac:	b0c0      	sub	sp, #256	@ 0x100
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	68d9      	ldr	r1, [r3, #12]
 80052c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	ea40 0301 	orr.w	r3, r0, r1
 80052d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	431a      	orrs	r2, r3
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005300:	f021 010c 	bic.w	r1, r1, #12
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800530e:	430b      	orrs	r3, r1
 8005310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	6999      	ldr	r1, [r3, #24]
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	ea40 0301 	orr.w	r3, r0, r1
 800532e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b8f      	ldr	r3, [pc, #572]	@ (8005574 <UART_SetConfig+0x2cc>)
 8005338:	429a      	cmp	r2, r3
 800533a:	d005      	beq.n	8005348 <UART_SetConfig+0xa0>
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4b8d      	ldr	r3, [pc, #564]	@ (8005578 <UART_SetConfig+0x2d0>)
 8005344:	429a      	cmp	r2, r3
 8005346:	d104      	bne.n	8005352 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe fc90 	bl	8003c6c <HAL_RCC_GetPCLK2Freq>
 800534c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005350:	e003      	b.n	800535a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005352:	f7fe fc77 	bl	8003c44 <HAL_RCC_GetPCLK1Freq>
 8005356:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005364:	f040 810c 	bne.w	8005580 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005372:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005376:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	1891      	adds	r1, r2, r2
 8005380:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005382:	415b      	adcs	r3, r3
 8005384:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800538a:	4621      	mov	r1, r4
 800538c:	eb12 0801 	adds.w	r8, r2, r1
 8005390:	4629      	mov	r1, r5
 8005392:	eb43 0901 	adc.w	r9, r3, r1
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053aa:	4690      	mov	r8, r2
 80053ac:	4699      	mov	r9, r3
 80053ae:	4623      	mov	r3, r4
 80053b0:	eb18 0303 	adds.w	r3, r8, r3
 80053b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053b8:	462b      	mov	r3, r5
 80053ba:	eb49 0303 	adc.w	r3, r9, r3
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053d6:	460b      	mov	r3, r1
 80053d8:	18db      	adds	r3, r3, r3
 80053da:	653b      	str	r3, [r7, #80]	@ 0x50
 80053dc:	4613      	mov	r3, r2
 80053de:	eb42 0303 	adc.w	r3, r2, r3
 80053e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80053e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053ec:	f7fb fc0c 	bl	8000c08 <__aeabi_uldivmod>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4b61      	ldr	r3, [pc, #388]	@ (800557c <UART_SetConfig+0x2d4>)
 80053f6:	fba3 2302 	umull	r2, r3, r3, r2
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	011c      	lsls	r4, r3, #4
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005408:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800540c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005418:	415b      	adcs	r3, r3
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800541c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005420:	4641      	mov	r1, r8
 8005422:	eb12 0a01 	adds.w	sl, r2, r1
 8005426:	4649      	mov	r1, r9
 8005428:	eb43 0b01 	adc.w	fp, r3, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005438:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800543c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005440:	4692      	mov	sl, r2
 8005442:	469b      	mov	fp, r3
 8005444:	4643      	mov	r3, r8
 8005446:	eb1a 0303 	adds.w	r3, sl, r3
 800544a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800544e:	464b      	mov	r3, r9
 8005450:	eb4b 0303 	adc.w	r3, fp, r3
 8005454:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005464:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005468:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800546c:	460b      	mov	r3, r1
 800546e:	18db      	adds	r3, r3, r3
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40
 8005472:	4613      	mov	r3, r2
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	647b      	str	r3, [r7, #68]	@ 0x44
 800547a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800547e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005482:	f7fb fbc1 	bl	8000c08 <__aeabi_uldivmod>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4611      	mov	r1, r2
 800548c:	4b3b      	ldr	r3, [pc, #236]	@ (800557c <UART_SetConfig+0x2d4>)
 800548e:	fba3 2301 	umull	r2, r3, r3, r1
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	2264      	movs	r2, #100	@ 0x64
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	1acb      	subs	r3, r1, r3
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054a2:	4b36      	ldr	r3, [pc, #216]	@ (800557c <UART_SetConfig+0x2d4>)
 80054a4:	fba3 2302 	umull	r2, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054b0:	441c      	add	r4, r3
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80054cc:	415b      	adcs	r3, r3
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054d4:	4641      	mov	r1, r8
 80054d6:	1851      	adds	r1, r2, r1
 80054d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80054da:	4649      	mov	r1, r9
 80054dc:	414b      	adcs	r3, r1
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054ec:	4659      	mov	r1, fp
 80054ee:	00cb      	lsls	r3, r1, #3
 80054f0:	4651      	mov	r1, sl
 80054f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f6:	4651      	mov	r1, sl
 80054f8:	00ca      	lsls	r2, r1, #3
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	4642      	mov	r2, r8
 8005502:	189b      	adds	r3, r3, r2
 8005504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005508:	464b      	mov	r3, r9
 800550a:	460a      	mov	r2, r1
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005520:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005524:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005528:	460b      	mov	r3, r1
 800552a:	18db      	adds	r3, r3, r3
 800552c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800552e:	4613      	mov	r3, r2
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800553a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800553e:	f7fb fb63 	bl	8000c08 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <UART_SetConfig+0x2d4>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	@ 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	3332      	adds	r3, #50	@ 0x32
 800555a:	4a08      	ldr	r2, [pc, #32]	@ (800557c <UART_SetConfig+0x2d4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 0207 	and.w	r2, r3, #7
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4422      	add	r2, r4
 800556e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005570:	e106      	b.n	8005780 <UART_SetConfig+0x4d8>
 8005572:	bf00      	nop
 8005574:	40011000 	.word	0x40011000
 8005578:	40011400 	.word	0x40011400
 800557c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800558a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800558e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005592:	4642      	mov	r2, r8
 8005594:	464b      	mov	r3, r9
 8005596:	1891      	adds	r1, r2, r2
 8005598:	6239      	str	r1, [r7, #32]
 800559a:	415b      	adcs	r3, r3
 800559c:	627b      	str	r3, [r7, #36]	@ 0x24
 800559e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055a2:	4641      	mov	r1, r8
 80055a4:	1854      	adds	r4, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb43 0501 	adc.w	r5, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	00eb      	lsls	r3, r5, #3
 80055b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ba:	00e2      	lsls	r2, r4, #3
 80055bc:	4614      	mov	r4, r2
 80055be:	461d      	mov	r5, r3
 80055c0:	4643      	mov	r3, r8
 80055c2:	18e3      	adds	r3, r4, r3
 80055c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c8:	464b      	mov	r3, r9
 80055ca:	eb45 0303 	adc.w	r3, r5, r3
 80055ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055ee:	4629      	mov	r1, r5
 80055f0:	008b      	lsls	r3, r1, #2
 80055f2:	4621      	mov	r1, r4
 80055f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055f8:	4621      	mov	r1, r4
 80055fa:	008a      	lsls	r2, r1, #2
 80055fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005600:	f7fb fb02 	bl	8000c08 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4b60      	ldr	r3, [pc, #384]	@ (800578c <UART_SetConfig+0x4e4>)
 800560a:	fba3 2302 	umull	r2, r3, r3, r2
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	011c      	lsls	r4, r3, #4
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800561c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005620:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	61b9      	str	r1, [r7, #24]
 800562c:	415b      	adcs	r3, r3
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6139      	str	r1, [r7, #16]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005668:	464b      	mov	r3, r9
 800566a:	460a      	mov	r2, r1
 800566c:	eb42 0303 	adc.w	r3, r2, r3
 8005670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800567e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800568c:	4649      	mov	r1, r9
 800568e:	008b      	lsls	r3, r1, #2
 8005690:	4641      	mov	r1, r8
 8005692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005696:	4641      	mov	r1, r8
 8005698:	008a      	lsls	r2, r1, #2
 800569a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800569e:	f7fb fab3 	bl	8000c08 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	4b38      	ldr	r3, [pc, #224]	@ (800578c <UART_SetConfig+0x4e4>)
 80056aa:	fba3 2301 	umull	r2, r3, r3, r1
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	2264      	movs	r2, #100	@ 0x64
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	3332      	adds	r3, #50	@ 0x32
 80056bc:	4a33      	ldr	r2, [pc, #204]	@ (800578c <UART_SetConfig+0x4e4>)
 80056be:	fba2 2303 	umull	r2, r3, r2, r3
 80056c2:	095b      	lsrs	r3, r3, #5
 80056c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c8:	441c      	add	r4, r3
 80056ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ce:	2200      	movs	r2, #0
 80056d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80056d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80056d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	1891      	adds	r1, r2, r2
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	415b      	adcs	r3, r3
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056e8:	4641      	mov	r1, r8
 80056ea:	1851      	adds	r1, r2, r1
 80056ec:	6039      	str	r1, [r7, #0]
 80056ee:	4649      	mov	r1, r9
 80056f0:	414b      	adcs	r3, r1
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005700:	4659      	mov	r1, fp
 8005702:	00cb      	lsls	r3, r1, #3
 8005704:	4651      	mov	r1, sl
 8005706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800570a:	4651      	mov	r1, sl
 800570c:	00ca      	lsls	r2, r1, #3
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	4603      	mov	r3, r0
 8005714:	4642      	mov	r2, r8
 8005716:	189b      	adds	r3, r3, r2
 8005718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800571a:	464b      	mov	r3, r9
 800571c:	460a      	mov	r2, r1
 800571e:	eb42 0303 	adc.w	r3, r2, r3
 8005722:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	663b      	str	r3, [r7, #96]	@ 0x60
 800572e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800573c:	4649      	mov	r1, r9
 800573e:	008b      	lsls	r3, r1, #2
 8005740:	4641      	mov	r1, r8
 8005742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005746:	4641      	mov	r1, r8
 8005748:	008a      	lsls	r2, r1, #2
 800574a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800574e:	f7fb fa5b 	bl	8000c08 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <UART_SetConfig+0x4e4>)
 8005758:	fba3 1302 	umull	r1, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	2164      	movs	r1, #100	@ 0x64
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	3332      	adds	r3, #50	@ 0x32
 800576a:	4a08      	ldr	r2, [pc, #32]	@ (800578c <UART_SetConfig+0x4e4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4422      	add	r2, r4
 800577e:	609a      	str	r2, [r3, #8]
}
 8005780:	bf00      	nop
 8005782:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005786:	46bd      	mov	sp, r7
 8005788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578c:	51eb851f 	.word	0x51eb851f

08005790 <__NVIC_SetPriority>:
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	6039      	str	r1, [r7, #0]
 800579a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800579c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	db0a      	blt.n	80057ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	490c      	ldr	r1, [pc, #48]	@ (80057dc <__NVIC_SetPriority+0x4c>)
 80057aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ae:	0112      	lsls	r2, r2, #4
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	440b      	add	r3, r1
 80057b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80057b8:	e00a      	b.n	80057d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4908      	ldr	r1, [pc, #32]	@ (80057e0 <__NVIC_SetPriority+0x50>)
 80057c0:	79fb      	ldrb	r3, [r7, #7]
 80057c2:	f003 030f 	and.w	r3, r3, #15
 80057c6:	3b04      	subs	r3, #4
 80057c8:	0112      	lsls	r2, r2, #4
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	440b      	add	r3, r1
 80057ce:	761a      	strb	r2, [r3, #24]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	e000e100 	.word	0xe000e100
 80057e0:	e000ed00 	.word	0xe000ed00

080057e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <SysTick_Handler+0x1c>)
 80057ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80057ec:	f001 ff72 	bl	80076d4 <xTaskGetSchedulerState>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d001      	beq.n	80057fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80057f6:	f002 fd67 	bl	80082c8 <xPortSysTickHandler>
  }
}
 80057fa:	bf00      	nop
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	e000e010 	.word	0xe000e010

08005804 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005808:	2100      	movs	r1, #0
 800580a:	f06f 0004 	mvn.w	r0, #4
 800580e:	f7ff ffbf 	bl	8005790 <__NVIC_SetPriority>
#endif
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800581e:	f3ef 8305 	mrs	r3, IPSR
 8005822:	603b      	str	r3, [r7, #0]
  return(result);
 8005824:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800582a:	f06f 0305 	mvn.w	r3, #5
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	e00c      	b.n	800584c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005832:	4b0a      	ldr	r3, [pc, #40]	@ (800585c <osKernelInitialize+0x44>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800583a:	4b08      	ldr	r3, [pc, #32]	@ (800585c <osKernelInitialize+0x44>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005840:	2300      	movs	r3, #0
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	e002      	b.n	800584c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800584a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800584c:	687b      	ldr	r3, [r7, #4]
}
 800584e:	4618      	mov	r0, r3
 8005850:	370c      	adds	r7, #12
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	200003c4 	.word	0x200003c4

08005860 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005866:	f3ef 8305 	mrs	r3, IPSR
 800586a:	603b      	str	r3, [r7, #0]
  return(result);
 800586c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005872:	f06f 0305 	mvn.w	r3, #5
 8005876:	607b      	str	r3, [r7, #4]
 8005878:	e010      	b.n	800589c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800587a:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <osKernelStart+0x48>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d109      	bne.n	8005896 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005882:	f7ff ffbf 	bl	8005804 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005886:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <osKernelStart+0x48>)
 8005888:	2202      	movs	r2, #2
 800588a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800588c:	f001 faac 	bl	8006de8 <vTaskStartScheduler>
      stat = osOK;
 8005890:	2300      	movs	r3, #0
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	e002      	b.n	800589c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800589a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800589c:	687b      	ldr	r3, [r7, #4]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	200003c4 	.word	0x200003c4

080058ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b2:	f3ef 8305 	mrs	r3, IPSR
 80058b6:	603b      	str	r3, [r7, #0]
  return(result);
 80058b8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80058be:	f001 fbbf 	bl	8007040 <xTaskGetTickCountFromISR>
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	e002      	b.n	80058cc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80058c6:	f001 fbab 	bl	8007020 <xTaskGetTickCount>
 80058ca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80058cc:	687b      	ldr	r3, [r7, #4]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b08e      	sub	sp, #56	@ 0x38
 80058da:	af04      	add	r7, sp, #16
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058e6:	f3ef 8305 	mrs	r3, IPSR
 80058ea:	617b      	str	r3, [r7, #20]
  return(result);
 80058ec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d17e      	bne.n	80059f0 <osThreadNew+0x11a>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d07b      	beq.n	80059f0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80058fc:	2318      	movs	r3, #24
 80058fe:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005908:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d045      	beq.n	800599c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <osThreadNew+0x48>
        name = attr->name;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <osThreadNew+0x6e>
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	2b38      	cmp	r3, #56	@ 0x38
 8005936:	d805      	bhi.n	8005944 <osThreadNew+0x6e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <osThreadNew+0x72>
        return (NULL);
 8005944:	2300      	movs	r3, #0
 8005946:	e054      	b.n	80059f2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	089b      	lsrs	r3, r3, #2
 8005956:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <osThreadNew+0xa8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	2bb7      	cmp	r3, #183	@ 0xb7
 8005966:	d90a      	bls.n	800597e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800596c:	2b00      	cmp	r3, #0
 800596e:	d006      	beq.n	800597e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <osThreadNew+0xa8>
        mem = 1;
 8005978:	2301      	movs	r3, #1
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	e010      	b.n	80059a0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <osThreadNew+0xca>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <osThreadNew+0xca>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <osThreadNew+0xca>
          mem = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	e001      	b.n	80059a0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d110      	bne.n	80059c8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059ae:	9202      	str	r2, [sp, #8]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f001 f81f 	bl	8006a00 <xTaskCreateStatic>
 80059c2:	4603      	mov	r3, r0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e013      	b.n	80059f0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d110      	bne.n	80059f0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	f107 0310 	add.w	r3, r7, #16
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f001 f86d 	bl	8006ac0 <xTaskCreate>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <osThreadNew+0x11a>
            hTask = NULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80059f0:	693b      	ldr	r3, [r7, #16]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3728      	adds	r7, #40	@ 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b084      	sub	sp, #16
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a02:	f3ef 8305 	mrs	r3, IPSR
 8005a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <osDelay+0x1c>
    stat = osErrorISR;
 8005a0e:	f06f 0305 	mvn.w	r3, #5
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e007      	b.n	8005a26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f9ab 	bl	8006d7c <vTaskDelay>
    }
  }

  return (stat);
 8005a26:	68fb      	ldr	r3, [r7, #12]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	@ 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a40:	f3ef 8305 	mrs	r3, IPSR
 8005a44:	613b      	str	r3, [r7, #16]
  return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d15f      	bne.n	8005b0c <osMessageQueueNew+0xdc>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d05c      	beq.n	8005b0c <osMessageQueueNew+0xdc>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d059      	beq.n	8005b0c <osMessageQueueNew+0xdc>
    mem = -1;
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d029      	beq.n	8005ab8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d012      	beq.n	8005a92 <osMessageQueueNew+0x62>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a72:	d90e      	bls.n	8005a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <osMessageQueueNew+0x62>
        mem = 1;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e014      	b.n	8005abc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d110      	bne.n	8005abc <osMessageQueueNew+0x8c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d108      	bne.n	8005abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <osMessageQueueNew+0x8c>
          mem = 0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e001      	b.n	8005abc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d10b      	bne.n	8005ada <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2100      	movs	r1, #0
 8005acc:	9100      	str	r1, [sp, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fa47 	bl	8005f64 <xQueueGenericCreateStatic>
 8005ad6:	61f8      	str	r0, [r7, #28]
 8005ad8:	e008      	b.n	8005aec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d105      	bne.n	8005aec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 faba 	bl	800605e <xQueueGenericCreate>
 8005aea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00c      	beq.n	8005b0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e001      	b.n	8005b04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b04:	6979      	ldr	r1, [r7, #20]
 8005b06:	69f8      	ldr	r0, [r7, #28]
 8005b08:	f000 ff1c 	bl	8006944 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	4613      	mov	r3, r2
 8005b26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b30:	f3ef 8305 	mrs	r3, IPSR
 8005b34:	617b      	str	r3, [r7, #20]
  return(result);
 8005b36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d028      	beq.n	8005b8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <osMessageQueuePut+0x36>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <osMessageQueuePut+0x36>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005b4e:	f06f 0303 	mvn.w	r3, #3
 8005b52:	61fb      	str	r3, [r7, #28]
 8005b54:	e038      	b.n	8005bc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005b5a:	f107 0210 	add.w	r2, r7, #16
 8005b5e:	2300      	movs	r3, #0
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	69b8      	ldr	r0, [r7, #24]
 8005b64:	f000 fbdc 	bl	8006320 <xQueueGenericSendFromISR>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d003      	beq.n	8005b76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005b6e:	f06f 0302 	mvn.w	r3, #2
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e028      	b.n	8005bc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d025      	beq.n	8005bc8 <osMessageQueuePut+0xb0>
 8005b7c:	4b15      	ldr	r3, [pc, #84]	@ (8005bd4 <osMessageQueuePut+0xbc>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	e01c      	b.n	8005bc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <osMessageQueuePut+0x82>
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005b9a:	f06f 0303 	mvn.w	r3, #3
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e012      	b.n	8005bc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	69b8      	ldr	r0, [r7, #24]
 8005baa:	f000 fab7 	bl	800611c <xQueueGenericSend>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d009      	beq.n	8005bc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005bba:	f06f 0301 	mvn.w	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	e002      	b.n	8005bc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005bc2:	f06f 0302 	mvn.w	r3, #2
 8005bc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bc8:	69fb      	ldr	r3, [r7, #28]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	617b      	str	r3, [r7, #20]
  return(result);
 8005bf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d028      	beq.n	8005c4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <osMessageQueueGet+0x34>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <osMessageQueueGet+0x34>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005c0c:	f06f 0303 	mvn.w	r3, #3
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e037      	b.n	8005c84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005c18:	f107 0310 	add.w	r3, r7, #16
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	69b8      	ldr	r0, [r7, #24]
 8005c22:	f000 fcfd 	bl	8006620 <xQueueReceiveFromISR>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d003      	beq.n	8005c34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005c2c:	f06f 0302 	mvn.w	r3, #2
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e027      	b.n	8005c84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d024      	beq.n	8005c84 <osMessageQueueGet+0xac>
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <osMessageQueueGet+0xb8>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	e01b      	b.n	8005c84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <osMessageQueueGet+0x80>
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d103      	bne.n	8005c60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005c58:	f06f 0303 	mvn.w	r3, #3
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	e011      	b.n	8005c84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	69b8      	ldr	r0, [r7, #24]
 8005c66:	f000 fbf9 	bl	800645c <xQueueReceive>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d009      	beq.n	8005c84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005c76:	f06f 0301 	mvn.w	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	e002      	b.n	8005c84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005c7e:	f06f 0302 	mvn.w	r3, #2
 8005c82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c84:	69fb      	ldr	r3, [r7, #28]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <osMessageQueueGetMsgSize>:
  }

  return (capacity);
}

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <vApplicationGetIdleTaskMemory+0x2c>)
 8005cd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4a06      	ldr	r2, [pc, #24]	@ (8005cf0 <vApplicationGetIdleTaskMemory+0x30>)
 8005cd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2280      	movs	r2, #128	@ 0x80
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	200003c8 	.word	0x200003c8
 8005cf0:	20000480 	.word	0x20000480

08005cf4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a07      	ldr	r2, [pc, #28]	@ (8005d20 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	4a06      	ldr	r2, [pc, #24]	@ (8005d24 <vApplicationGetTimerTaskMemory+0x30>)
 8005d0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d12:	601a      	str	r2, [r3, #0]
}
 8005d14:	bf00      	nop
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	20000680 	.word	0x20000680
 8005d24:	20000738 	.word	0x20000738

08005d28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f103 0208 	add.w	r2, r3, #8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f103 0208 	add.w	r2, r3, #8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f103 0208 	add.w	r2, r3, #8
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005de0:	d103      	bne.n	8005dea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e00c      	b.n	8005e04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3308      	adds	r3, #8
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e002      	b.n	8005df8 <vListInsert+0x2e>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d2f6      	bcs.n	8005df2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	601a      	str	r2, [r3, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6892      	ldr	r2, [r2, #8]
 8005e52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6852      	ldr	r2, [r2, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d103      	bne.n	8005e70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	1e5a      	subs	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	e7fd      	b.n	8005eb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ebc:	f002 f974 	bl	80081a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	441a      	add	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eec:	3b01      	subs	r3, #1
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	441a      	add	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	22ff      	movs	r2, #255	@ 0xff
 8005f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	22ff      	movs	r2, #255	@ 0xff
 8005f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d114      	bne.n	8005f3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d01a      	beq.n	8005f50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3310      	adds	r3, #16
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f001 fa12 	bl	8007348 <xTaskRemoveFromEventList>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <xQueueGenericReset+0xd0>)
 8005f2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	e009      	b.n	8005f50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3310      	adds	r3, #16
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fef1 	bl	8005d28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3324      	adds	r3, #36	@ 0x24
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7ff feec 	bl	8005d28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f50:	f002 f95c 	bl	800820c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f54:	2301      	movs	r3, #1
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08e      	sub	sp, #56	@ 0x38
 8005f68:	af02      	add	r7, sp, #8
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10b      	bne.n	8005f90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <xQueueGenericCreateStatic+0x56>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <xQueueGenericCreateStatic+0x5a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueGenericCreateStatic+0x5c>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	623b      	str	r3, [r7, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <xQueueGenericCreateStatic+0x84>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <xQueueGenericCreateStatic+0x88>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <xQueueGenericCreateStatic+0x8a>
 8005fec:	2300      	movs	r3, #0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	61fb      	str	r3, [r7, #28]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800600a:	2350      	movs	r3, #80	@ 0x50
 800600c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2b50      	cmp	r3, #80	@ 0x50
 8006012:	d00b      	beq.n	800602c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	61bb      	str	r3, [r7, #24]
}
 8006026:	bf00      	nop
 8006028:	bf00      	nop
 800602a:	e7fd      	b.n	8006028 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800602c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006040:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f840 	bl	80060d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006056:	4618      	mov	r0, r3
 8006058:	3730      	adds	r7, #48	@ 0x30
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800605e:	b580      	push	{r7, lr}
 8006060:	b08a      	sub	sp, #40	@ 0x28
 8006062:	af02      	add	r7, sp, #8
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	4613      	mov	r3, r2
 800606a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10b      	bne.n	800608a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	613b      	str	r3, [r7, #16]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	fb02 f303 	mul.w	r3, r2, r3
 8006092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	3350      	adds	r3, #80	@ 0x50
 8006098:	4618      	mov	r0, r3
 800609a:	f002 f9a7 	bl	80083ec <pvPortMalloc>
 800609e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d011      	beq.n	80060ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	3350      	adds	r3, #80	@ 0x50
 80060ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060b8:	79fa      	ldrb	r2, [r7, #7]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f805 	bl	80060d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80060ca:	69bb      	ldr	r3, [r7, #24]
	}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d103      	bne.n	80060f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e002      	b.n	80060f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006102:	2101      	movs	r1, #1
 8006104:	69b8      	ldr	r0, [r7, #24]
 8006106:	f7ff fec3 	bl	8005e90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	78fa      	ldrb	r2, [r7, #3]
 800610e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	@ 0x38
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <xQueueGenericSend+0x34>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	e7fd      	b.n	800614c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <xQueueGenericSend+0x42>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <xQueueGenericSend+0x46>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xQueueGenericSend+0x48>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10b      	bne.n	8006180 <xQueueGenericSend+0x64>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d103      	bne.n	800618e <xQueueGenericSend+0x72>
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <xQueueGenericSend+0x76>
 800618e:	2301      	movs	r3, #1
 8006190:	e000      	b.n	8006194 <xQueueGenericSend+0x78>
 8006192:	2300      	movs	r3, #0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10b      	bne.n	80061b0 <xQueueGenericSend+0x94>
	__asm volatile
 8006198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619c:	f383 8811 	msr	BASEPRI, r3
 80061a0:	f3bf 8f6f 	isb	sy
 80061a4:	f3bf 8f4f 	dsb	sy
 80061a8:	623b      	str	r3, [r7, #32]
}
 80061aa:	bf00      	nop
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061b0:	f001 fa90 	bl	80076d4 <xTaskGetSchedulerState>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <xQueueGenericSend+0xa4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <xQueueGenericSend+0xa8>
 80061c0:	2301      	movs	r3, #1
 80061c2:	e000      	b.n	80061c6 <xQueueGenericSend+0xaa>
 80061c4:	2300      	movs	r3, #0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	61fb      	str	r3, [r7, #28]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061e2:	f001 ffe1 	bl	80081a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d302      	bcc.n	80061f8 <xQueueGenericSend+0xdc>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d129      	bne.n	800624c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061fe:	f000 fa91 	bl	8006724 <prvCopyDataToQueue>
 8006202:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	2b00      	cmp	r3, #0
 800620a:	d010      	beq.n	800622e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800620c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620e:	3324      	adds	r3, #36	@ 0x24
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f899 	bl	8007348 <xTaskRemoveFromEventList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800621c:	4b3f      	ldr	r3, [pc, #252]	@ (800631c <xQueueGenericSend+0x200>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	e00a      	b.n	8006244 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800622e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006234:	4b39      	ldr	r3, [pc, #228]	@ (800631c <xQueueGenericSend+0x200>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006244:	f001 ffe2 	bl	800820c <vPortExitCritical>
				return pdPASS;
 8006248:	2301      	movs	r3, #1
 800624a:	e063      	b.n	8006314 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006252:	f001 ffdb 	bl	800820c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006256:	2300      	movs	r3, #0
 8006258:	e05c      	b.n	8006314 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006260:	f107 0314 	add.w	r3, r7, #20
 8006264:	4618      	mov	r0, r3
 8006266:	f001 f8d3 	bl	8007410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800626e:	f001 ffcd 	bl	800820c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006272:	f000 fe29 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006276:	f001 ff97 	bl	80081a8 <vPortEnterCritical>
 800627a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006280:	b25b      	sxtb	r3, r3
 8006282:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006286:	d103      	bne.n	8006290 <xQueueGenericSend+0x174>
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006296:	b25b      	sxtb	r3, r3
 8006298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSend+0x18a>
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062a6:	f001 ffb1 	bl	800820c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062aa:	1d3a      	adds	r2, r7, #4
 80062ac:	f107 0314 	add.w	r3, r7, #20
 80062b0:	4611      	mov	r1, r2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f8c2 	bl	800743c <xTaskCheckForTimeOut>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d124      	bne.n	8006308 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062c0:	f000 fb28 	bl	8006914 <prvIsQueueFull>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	3310      	adds	r3, #16
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 ffe6 	bl	80072a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062da:	f000 fab3 	bl	8006844 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062de:	f000 fe01 	bl	8006ee4 <xTaskResumeAll>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f af7c 	bne.w	80061e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80062ea:	4b0c      	ldr	r3, [pc, #48]	@ (800631c <xQueueGenericSend+0x200>)
 80062ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	e772      	b.n	80061e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80062fe:	f000 faa1 	bl	8006844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006302:	f000 fdef 	bl	8006ee4 <xTaskResumeAll>
 8006306:	e76c      	b.n	80061e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800630a:	f000 fa9b 	bl	8006844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800630e:	f000 fde9 	bl	8006ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006312:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006314:	4618      	mov	r0, r3
 8006316:	3738      	adds	r7, #56	@ 0x38
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}
 800631c:	e000ed04 	.word	0xe000ed04

08006320 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b090      	sub	sp, #64	@ 0x40
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <xQueueGenericSendFromISR+0x3e>
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <xQueueGenericSendFromISR+0x42>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <xQueueGenericSendFromISR+0x44>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d103      	bne.n	800638e <xQueueGenericSendFromISR+0x6e>
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638a:	2b01      	cmp	r3, #1
 800638c:	d101      	bne.n	8006392 <xQueueGenericSendFromISR+0x72>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <xQueueGenericSendFromISR+0x74>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10b      	bne.n	80063b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	623b      	str	r3, [r7, #32]
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063b0:	f001 ffda 	bl	8008368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063b4:	f3ef 8211 	mrs	r2, BASEPRI
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <xQueueGenericSendFromISR+0xc2>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d12f      	bne.n	8006442 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063f8:	f000 f994 	bl	8006724 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006404:	d112      	bne.n	800642c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	2b00      	cmp	r3, #0
 800640c:	d016      	beq.n	800643c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800640e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006410:	3324      	adds	r3, #36	@ 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f000 ff98 	bl	8007348 <xTaskRemoveFromEventList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00e      	beq.n	800643c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e007      	b.n	800643c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800642c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006430:	3301      	adds	r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	b25a      	sxtb	r2, r3
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800643c:	2301      	movs	r3, #1
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006440:	e001      	b.n	8006446 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006442:	2300      	movs	r3, #0
 8006444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006448:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006450:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006454:	4618      	mov	r0, r3
 8006456:	3740      	adds	r7, #64	@ 0x40
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08c      	sub	sp, #48	@ 0x30
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006468:	2300      	movs	r3, #0
 800646a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <xQueueReceive+0x32>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	623b      	str	r3, [r7, #32]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <xQueueReceive+0x40>
 8006494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <xQueueReceive+0x44>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <xQueueReceive+0x46>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <xQueueReceive+0x62>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	61fb      	str	r3, [r7, #28]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064be:	f001 f909 	bl	80076d4 <xTaskGetSchedulerState>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d102      	bne.n	80064ce <xQueueReceive+0x72>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <xQueueReceive+0x76>
 80064ce:	2301      	movs	r3, #1
 80064d0:	e000      	b.n	80064d4 <xQueueReceive+0x78>
 80064d2:	2300      	movs	r3, #0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10b      	bne.n	80064f0 <xQueueReceive+0x94>
	__asm volatile
 80064d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064dc:	f383 8811 	msr	BASEPRI, r3
 80064e0:	f3bf 8f6f 	isb	sy
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	61bb      	str	r3, [r7, #24]
}
 80064ea:	bf00      	nop
 80064ec:	bf00      	nop
 80064ee:	e7fd      	b.n	80064ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064f0:	f001 fe5a 	bl	80081a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01f      	beq.n	8006540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006504:	f000 f978 	bl	80067f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	1e5a      	subs	r2, r3, #1
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00f      	beq.n	8006538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	3310      	adds	r3, #16
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ff13 	bl	8007348 <xTaskRemoveFromEventList>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006528:	4b3c      	ldr	r3, [pc, #240]	@ (800661c <xQueueReceive+0x1c0>)
 800652a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006538:	f001 fe68 	bl	800820c <vPortExitCritical>
				return pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	e069      	b.n	8006614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006546:	f001 fe61 	bl	800820c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800654a:	2300      	movs	r3, #0
 800654c:	e062      	b.n	8006614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800654e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006550:	2b00      	cmp	r3, #0
 8006552:	d106      	bne.n	8006562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006554:	f107 0310 	add.w	r3, r7, #16
 8006558:	4618      	mov	r0, r3
 800655a:	f000 ff59 	bl	8007410 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006562:	f001 fe53 	bl	800820c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006566:	f000 fcaf 	bl	8006ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800656a:	f001 fe1d 	bl	80081a8 <vPortEnterCritical>
 800656e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006570:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006574:	b25b      	sxtb	r3, r3
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800657a:	d103      	bne.n	8006584 <xQueueReceive+0x128>
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800658a:	b25b      	sxtb	r3, r3
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006590:	d103      	bne.n	800659a <xQueueReceive+0x13e>
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800659a:	f001 fe37 	bl	800820c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800659e:	1d3a      	adds	r2, r7, #4
 80065a0:	f107 0310 	add.w	r3, r7, #16
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 ff48 	bl	800743c <xTaskCheckForTimeOut>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d123      	bne.n	80065fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065b4:	f000 f998 	bl	80068e8 <prvIsQueueEmpty>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d017      	beq.n	80065ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	3324      	adds	r3, #36	@ 0x24
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4611      	mov	r1, r2
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fe6c 	bl	80072a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065ce:	f000 f939 	bl	8006844 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065d2:	f000 fc87 	bl	8006ee4 <xTaskResumeAll>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d189      	bne.n	80064f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80065dc:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <xQueueReceive+0x1c0>)
 80065de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	e780      	b.n	80064f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065f0:	f000 f928 	bl	8006844 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065f4:	f000 fc76 	bl	8006ee4 <xTaskResumeAll>
 80065f8:	e77a      	b.n	80064f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80065fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065fc:	f000 f922 	bl	8006844 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006600:	f000 fc70 	bl	8006ee4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006606:	f000 f96f 	bl	80068e8 <prvIsQueueEmpty>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	f43f af6f 	beq.w	80064f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006614:	4618      	mov	r0, r3
 8006616:	3730      	adds	r7, #48	@ 0x30
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08e      	sub	sp, #56	@ 0x38
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10b      	bne.n	800664e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	623b      	str	r3, [r7, #32]
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	e7fd      	b.n	800664a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d103      	bne.n	800665c <xQueueReceiveFromISR+0x3c>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <xQueueReceiveFromISR+0x40>
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <xQueueReceiveFromISR+0x42>
 8006660:	2300      	movs	r3, #0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61fb      	str	r3, [r7, #28]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800667e:	f001 fe73 	bl	8008368 <vPortValidateInterruptPriority>
	__asm volatile
 8006682:	f3ef 8211 	mrs	r2, BASEPRI
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	61ba      	str	r2, [r7, #24]
 8006698:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800669a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d02f      	beq.n	800670a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066b8:	f000 f89e 	bl	80067f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	1e5a      	subs	r2, r3, #1
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80066c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066cc:	d112      	bne.n	80066f4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	3310      	adds	r3, #16
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fe34 	bl	8007348 <xTaskRemoveFromEventList>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00e      	beq.n	8006704 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e007      	b.n	8006704 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066f8:	3301      	adds	r3, #1
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	b25a      	sxtb	r2, r3
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006704:	2301      	movs	r3, #1
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
 8006708:	e001      	b.n	800670e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800670a:	2300      	movs	r3, #0
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006710:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f383 8811 	msr	BASEPRI, r3
}
 8006718:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800671a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800671c:	4618      	mov	r0, r3
 800671e:	3738      	adds	r7, #56	@ 0x38
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006738:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d14d      	bne.n	80067e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 ffde 	bl	8007710 <xTaskPriorityDisinherit>
 8006754:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
 800675c:	e043      	b.n	80067e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d119      	bne.n	8006798 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6858      	ldr	r0, [r3, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	461a      	mov	r2, r3
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	f002 ffc1 	bl	80096f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d32b      	bcc.n	80067e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e026      	b.n	80067e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68d8      	ldr	r0, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	f002 ffa7 	bl	80096f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b0:	425b      	negs	r3, r3
 80067b2:	441a      	add	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d207      	bcs.n	80067d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067cc:	425b      	negs	r3, r3
 80067ce:	441a      	add	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d105      	bne.n	80067e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067ee:	697b      	ldr	r3, [r7, #20]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d018      	beq.n	800683c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	441a      	add	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	d303      	bcc.n	800682c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68d9      	ldr	r1, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006834:	461a      	mov	r2, r3
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f002 ff5d 	bl	80096f6 <memcpy>
	}
}
 800683c:	bf00      	nop
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800684c:	f001 fcac 	bl	80081a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006856:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006858:	e011      	b.n	800687e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d012      	beq.n	8006888 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3324      	adds	r3, #36	@ 0x24
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fd6e 	bl	8007348 <xTaskRemoveFromEventList>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006872:	f000 fe47 	bl	8007504 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	3b01      	subs	r3, #1
 800687a:	b2db      	uxtb	r3, r3
 800687c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dce9      	bgt.n	800685a <prvUnlockQueue+0x16>
 8006886:	e000      	b.n	800688a <prvUnlockQueue+0x46>
					break;
 8006888:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	22ff      	movs	r2, #255	@ 0xff
 800688e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006892:	f001 fcbb 	bl	800820c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006896:	f001 fc87 	bl	80081a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a2:	e011      	b.n	80068c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d012      	beq.n	80068d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3310      	adds	r3, #16
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fd49 	bl	8007348 <xTaskRemoveFromEventList>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068bc:	f000 fe22 	bl	8007504 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	dce9      	bgt.n	80068a4 <prvUnlockQueue+0x60>
 80068d0:	e000      	b.n	80068d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	22ff      	movs	r2, #255	@ 0xff
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068dc:	f001 fc96 	bl	800820c <vPortExitCritical>
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f0:	f001 fc5a 	bl	80081a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068fc:	2301      	movs	r3, #1
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	e001      	b.n	8006906 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006906:	f001 fc81 	bl	800820c <vPortExitCritical>

	return xReturn;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800691c:	f001 fc44 	bl	80081a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	429a      	cmp	r2, r3
 800692a:	d102      	bne.n	8006932 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e001      	b.n	8006936 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006936:	f001 fc69 	bl	800820c <vPortExitCritical>

	return xReturn;
 800693a:	68fb      	ldr	r3, [r7, #12]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e014      	b.n	800697e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006954:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <vQueueAddToRegistry+0x50>)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006960:	490c      	ldr	r1, [pc, #48]	@ (8006994 <vQueueAddToRegistry+0x50>)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <vQueueAddToRegistry+0x50>)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4413      	add	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006976:	e006      	b.n	8006986 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b07      	cmp	r3, #7
 8006982:	d9e7      	bls.n	8006954 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000b38 	.word	0x20000b38

08006998 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069a8:	f001 fbfe 	bl	80081a8 <vPortEnterCritical>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069b8:	d103      	bne.n	80069c2 <vQueueWaitForMessageRestricted+0x2a>
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069ce:	d103      	bne.n	80069d8 <vQueueWaitForMessageRestricted+0x40>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069d8:	f001 fc18 	bl	800820c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	3324      	adds	r3, #36	@ 0x24
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fc7f 	bl	80072f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff ff26 	bl	8006844 <prvUnlockQueue>
	}
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08e      	sub	sp, #56	@ 0x38
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10b      	bne.n	8006a2c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
}
 8006a26:	bf00      	nop
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	61fb      	str	r3, [r7, #28]
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	e7fd      	b.n	8006a46 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4a:	23b8      	movs	r3, #184	@ 0xb8
 8006a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2bb8      	cmp	r3, #184	@ 0xb8
 8006a52:	d00b      	beq.n	8006a6c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	61bb      	str	r3, [r7, #24]
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01e      	beq.n	8006ab2 <xTaskCreateStatic+0xb2>
 8006a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d01b      	beq.n	8006ab2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	9302      	str	r3, [sp, #8]
 8006a94:	f107 0314 	add.w	r3, r7, #20
 8006a98:	9301      	str	r3, [sp, #4]
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f851 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006aac:	f000 f8f6 	bl	8006c9c <prvAddNewTaskToReadyList>
 8006ab0:	e001      	b.n	8006ab6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
	}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3728      	adds	r7, #40	@ 0x28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08c      	sub	sp, #48	@ 0x30
 8006ac4:	af04      	add	r7, sp, #16
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f001 fc89 	bl	80083ec <pvPortMalloc>
 8006ada:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae2:	20b8      	movs	r0, #184	@ 0xb8
 8006ae4:	f001 fc82 	bl	80083ec <pvPortMalloc>
 8006ae8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006af6:	e005      	b.n	8006b04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af8:	6978      	ldr	r0, [r7, #20]
 8006afa:	f001 fd45 	bl	8008588 <vPortFree>
 8006afe:	e001      	b.n	8006b04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9303      	str	r3, [sp, #12]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	9302      	str	r3, [sp, #8]
 8006b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f80f 	bl	8006b4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b2e:	69f8      	ldr	r0, [r7, #28]
 8006b30:	f000 f8b4 	bl	8006c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b34:	2301      	movs	r3, #1
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e002      	b.n	8006b40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b40:	69bb      	ldr	r3, [r7, #24]
	}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b088      	sub	sp, #32
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	461a      	mov	r2, r3
 8006b64:	21a5      	movs	r1, #165	@ 0xa5
 8006b66:	f002 fce9 	bl	800953c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b74:	3b01      	subs	r3, #1
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00b      	beq.n	8006ba6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	617b      	str	r3, [r7, #20]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01f      	beq.n	8006bec <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bac:	2300      	movs	r3, #0
 8006bae:	61fb      	str	r3, [r7, #28]
 8006bb0:	e012      	b.n	8006bd8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	7819      	ldrb	r1, [r3, #0]
 8006bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3334      	adds	r3, #52	@ 0x34
 8006bc2:	460a      	mov	r2, r1
 8006bc4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2b1f      	cmp	r3, #31
 8006bdc:	d9e9      	bls.n	8006bb2 <prvInitialiseNewTask+0x66>
 8006bde:	e000      	b.n	8006be2 <prvInitialiseNewTask+0x96>
			{
				break;
 8006be0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8006bea:	e003      	b.n	8006bf4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	2b37      	cmp	r3, #55	@ 0x37
 8006bf8:	d901      	bls.n	8006bfe <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bfa:	2337      	movs	r3, #55	@ 0x37
 8006bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c02:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c08:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff f8a7 	bl	8005d68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	3318      	adds	r3, #24
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff f8a2 	bl	8005d68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c38:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	3364      	adds	r3, #100	@ 0x64
 8006c4e:	224c      	movs	r2, #76	@ 0x4c
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f002 fc72 	bl	800953c <memset>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c90 <prvInitialiseNewTask+0x144>)
 8006c5c:	669a      	str	r2, [r3, #104]	@ 0x68
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	4a0c      	ldr	r2, [pc, #48]	@ (8006c94 <prvInitialiseNewTask+0x148>)
 8006c62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <prvInitialiseNewTask+0x14c>)
 8006c68:	671a      	str	r2, [r3, #112]	@ 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	69b8      	ldr	r0, [r7, #24]
 8006c70:	f001 f96c 	bl	8007f4c <pxPortInitialiseStack>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c86:	bf00      	nop
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	2000622c 	.word	0x2000622c
 8006c94:	20006294 	.word	0x20006294
 8006c98:	200062fc 	.word	0x200062fc

08006c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ca4:	f001 fa80 	bl	80081a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	4a2c      	ldr	r2, [pc, #176]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cc0:	4b27      	ldr	r3, [pc, #156]	@ (8006d60 <prvAddNewTaskToReadyList+0xc4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d110      	bne.n	8006cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cc8:	f000 fc40 	bl	800754c <prvInitialiseTaskLists>
 8006ccc:	e00d      	b.n	8006cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cce:	4b26      	ldr	r3, [pc, #152]	@ (8006d68 <prvAddNewTaskToReadyList+0xcc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cd6:	4b23      	ldr	r3, [pc, #140]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d802      	bhi.n	8006cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cea:	4b20      	ldr	r3, [pc, #128]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d6c <prvAddNewTaskToReadyList+0xd0>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d00:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <prvAddNewTaskToReadyList+0xd4>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d903      	bls.n	8006d10 <prvAddNewTaskToReadyList+0x74>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <prvAddNewTaskToReadyList+0xd4>)
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4a15      	ldr	r2, [pc, #84]	@ (8006d74 <prvAddNewTaskToReadyList+0xd8>)
 8006d1e:	441a      	add	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4619      	mov	r1, r3
 8006d26:	4610      	mov	r0, r2
 8006d28:	f7ff f82b 	bl	8005d82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d2c:	f001 fa6e 	bl	800820c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d30:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <prvAddNewTaskToReadyList+0xcc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d38:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <prvAddNewTaskToReadyList+0xc8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d207      	bcs.n	8006d56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d46:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <prvAddNewTaskToReadyList+0xdc>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000104c 	.word	0x2000104c
 8006d64:	20000b78 	.word	0x20000b78
 8006d68:	20001058 	.word	0x20001058
 8006d6c:	20001068 	.word	0x20001068
 8006d70:	20001054 	.word	0x20001054
 8006d74:	20000b7c 	.word	0x20000b7c
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d8e:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <vTaskDelay+0x64>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <vTaskDelay+0x32>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dae:	f000 f88b 	bl	8006ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fd1b 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dba:	f000 f893 	bl	8006ee4 <xTaskResumeAll>
 8006dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006dc6:	4b07      	ldr	r3, [pc, #28]	@ (8006de4 <vTaskDelay+0x68>)
 8006dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20001074 	.word	0x20001074
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	@ 0x28
 8006dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006df6:	463a      	mov	r2, r7
 8006df8:	1d39      	adds	r1, r7, #4
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fe ff5e 	bl	8005cc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	9202      	str	r2, [sp, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	460a      	mov	r2, r1
 8006e16:	4924      	ldr	r1, [pc, #144]	@ (8006ea8 <vTaskStartScheduler+0xc0>)
 8006e18:	4824      	ldr	r0, [pc, #144]	@ (8006eac <vTaskStartScheduler+0xc4>)
 8006e1a:	f7ff fdf1 	bl	8006a00 <xTaskCreateStatic>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <vTaskStartScheduler+0xc8>)
 8006e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e24:	4b22      	ldr	r3, [pc, #136]	@ (8006eb0 <vTaskStartScheduler+0xc8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e001      	b.n	8006e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d102      	bne.n	8006e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e3c:	f000 fd2c 	bl	8007898 <xTimerCreateTimerTask>
 8006e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d11b      	bne.n	8006e80 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	613b      	str	r3, [r7, #16]
}
 8006e5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e5c:	4b15      	ldr	r3, [pc, #84]	@ (8006eb4 <vTaskStartScheduler+0xcc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3364      	adds	r3, #100	@ 0x64
 8006e62:	4a15      	ldr	r2, [pc, #84]	@ (8006eb8 <vTaskStartScheduler+0xd0>)
 8006e64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e66:	4b15      	ldr	r3, [pc, #84]	@ (8006ebc <vTaskStartScheduler+0xd4>)
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e6e:	4b14      	ldr	r3, [pc, #80]	@ (8006ec0 <vTaskStartScheduler+0xd8>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e74:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <vTaskStartScheduler+0xdc>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e7a:	f001 f8f1 	bl	8008060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e7e:	e00f      	b.n	8006ea0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e86:	d10b      	bne.n	8006ea0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <vTaskStartScheduler+0xb4>
}
 8006ea0:	bf00      	nop
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	0800ba60 	.word	0x0800ba60
 8006eac:	0800751d 	.word	0x0800751d
 8006eb0:	20001070 	.word	0x20001070
 8006eb4:	20000b78 	.word	0x20000b78
 8006eb8:	20000070 	.word	0x20000070
 8006ebc:	2000106c 	.word	0x2000106c
 8006ec0:	20001058 	.word	0x20001058
 8006ec4:	20001050 	.word	0x20001050

08006ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <vTaskSuspendAll+0x18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	4a03      	ldr	r2, [pc, #12]	@ (8006ee0 <vTaskSuspendAll+0x18>)
 8006ed4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ed6:	bf00      	nop
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	20001074 	.word	0x20001074

08006ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ef2:	4b42      	ldr	r3, [pc, #264]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <xTaskResumeAll+0x2e>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	603b      	str	r3, [r7, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f12:	f001 f949 	bl	80081a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f16:	4b39      	ldr	r3, [pc, #228]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4a37      	ldr	r2, [pc, #220]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b36      	ldr	r3, [pc, #216]	@ (8006ffc <xTaskResumeAll+0x118>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d162      	bne.n	8006fee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f28:	4b35      	ldr	r3, [pc, #212]	@ (8007000 <xTaskResumeAll+0x11c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05e      	beq.n	8006fee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	e02f      	b.n	8006f92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f32:	4b34      	ldr	r3, [pc, #208]	@ (8007004 <xTaskResumeAll+0x120>)
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe ff7c 	bl	8005e3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe ff77 	bl	8005e3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f52:	4b2d      	ldr	r3, [pc, #180]	@ (8007008 <xTaskResumeAll+0x124>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d903      	bls.n	8006f62 <xTaskResumeAll+0x7e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8007008 <xTaskResumeAll+0x124>)
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4a27      	ldr	r2, [pc, #156]	@ (800700c <xTaskResumeAll+0x128>)
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fe ff02 	bl	8005d82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f82:	4b23      	ldr	r3, [pc, #140]	@ (8007010 <xTaskResumeAll+0x12c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d302      	bcc.n	8006f92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	@ (8007014 <xTaskResumeAll+0x130>)
 8006f8e:	2201      	movs	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f92:	4b1c      	ldr	r3, [pc, #112]	@ (8007004 <xTaskResumeAll+0x120>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1cb      	bne.n	8006f32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fa0:	f000 fb78 	bl	8007694 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8007018 <xTaskResumeAll+0x134>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d010      	beq.n	8006fd2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fb0:	f000 f858 	bl	8007064 <xTaskIncrementTick>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d002      	beq.n	8006fc0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006fba:	4b16      	ldr	r3, [pc, #88]	@ (8007014 <xTaskResumeAll+0x130>)
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f1      	bne.n	8006fb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006fcc:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <xTaskResumeAll+0x134>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fd2:	4b10      	ldr	r3, [pc, #64]	@ (8007014 <xTaskResumeAll+0x130>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <xTaskResumeAll+0x138>)
 8006fe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 f90d 	bl	800820c <vPortExitCritical>

	return xAlreadyYielded;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20001074 	.word	0x20001074
 8007000:	2000104c 	.word	0x2000104c
 8007004:	2000100c 	.word	0x2000100c
 8007008:	20001054 	.word	0x20001054
 800700c:	20000b7c 	.word	0x20000b7c
 8007010:	20000b78 	.word	0x20000b78
 8007014:	20001060 	.word	0x20001060
 8007018:	2000105c 	.word	0x2000105c
 800701c:	e000ed04 	.word	0xe000ed04

08007020 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007026:	4b05      	ldr	r3, [pc, #20]	@ (800703c <xTaskGetTickCount+0x1c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800702c:	687b      	ldr	r3, [r7, #4]
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20001050 	.word	0x20001050

08007040 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007046:	f001 f98f 	bl	8008368 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800704e:	4b04      	ldr	r3, [pc, #16]	@ (8007060 <xTaskGetTickCountFromISR+0x20>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007054:	683b      	ldr	r3, [r7, #0]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20001050 	.word	0x20001050

08007064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800706e:	4b4f      	ldr	r3, [pc, #316]	@ (80071ac <xTaskIncrementTick+0x148>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f040 8090 	bne.w	8007198 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007078:	4b4d      	ldr	r3, [pc, #308]	@ (80071b0 <xTaskIncrementTick+0x14c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007080:	4a4b      	ldr	r2, [pc, #300]	@ (80071b0 <xTaskIncrementTick+0x14c>)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d121      	bne.n	80070d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800708c:	4b49      	ldr	r3, [pc, #292]	@ (80071b4 <xTaskIncrementTick+0x150>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00b      	beq.n	80070ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	603b      	str	r3, [r7, #0]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xTaskIncrementTick+0x46>
 80070ae:	4b41      	ldr	r3, [pc, #260]	@ (80071b4 <xTaskIncrementTick+0x150>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	4b40      	ldr	r3, [pc, #256]	@ (80071b8 <xTaskIncrementTick+0x154>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a3e      	ldr	r2, [pc, #248]	@ (80071b4 <xTaskIncrementTick+0x150>)
 80070ba:	6013      	str	r3, [r2, #0]
 80070bc:	4a3e      	ldr	r2, [pc, #248]	@ (80071b8 <xTaskIncrementTick+0x154>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	4b3e      	ldr	r3, [pc, #248]	@ (80071bc <xTaskIncrementTick+0x158>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3301      	adds	r3, #1
 80070c8:	4a3c      	ldr	r2, [pc, #240]	@ (80071bc <xTaskIncrementTick+0x158>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	f000 fae2 	bl	8007694 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070d0:	4b3b      	ldr	r3, [pc, #236]	@ (80071c0 <xTaskIncrementTick+0x15c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d349      	bcc.n	800716e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070da:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <xTaskIncrementTick+0x150>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e4:	4b36      	ldr	r3, [pc, #216]	@ (80071c0 <xTaskIncrementTick+0x15c>)
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070ea:	601a      	str	r2, [r3, #0]
					break;
 80070ec:	e03f      	b.n	800716e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ee:	4b31      	ldr	r3, [pc, #196]	@ (80071b4 <xTaskIncrementTick+0x150>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d203      	bcs.n	800710e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007106:	4a2e      	ldr	r2, [pc, #184]	@ (80071c0 <xTaskIncrementTick+0x15c>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800710c:	e02f      	b.n	800716e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fe92 	bl	8005e3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3318      	adds	r3, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fe89 	bl	8005e3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800712e:	4b25      	ldr	r3, [pc, #148]	@ (80071c4 <xTaskIncrementTick+0x160>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d903      	bls.n	800713e <xTaskIncrementTick+0xda>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	4a22      	ldr	r2, [pc, #136]	@ (80071c4 <xTaskIncrementTick+0x160>)
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4a1f      	ldr	r2, [pc, #124]	@ (80071c8 <xTaskIncrementTick+0x164>)
 800714c:	441a      	add	r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7fe fe14 	bl	8005d82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715e:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <xTaskIncrementTick+0x168>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007164:	429a      	cmp	r2, r3
 8007166:	d3b8      	bcc.n	80070da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007168:	2301      	movs	r3, #1
 800716a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800716c:	e7b5      	b.n	80070da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800716e:	4b17      	ldr	r3, [pc, #92]	@ (80071cc <xTaskIncrementTick+0x168>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007174:	4914      	ldr	r1, [pc, #80]	@ (80071c8 <xTaskIncrementTick+0x164>)
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d901      	bls.n	800718a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800718a:	4b11      	ldr	r3, [pc, #68]	@ (80071d0 <xTaskIncrementTick+0x16c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007192:	2301      	movs	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	e004      	b.n	80071a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007198:	4b0e      	ldr	r3, [pc, #56]	@ (80071d4 <xTaskIncrementTick+0x170>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	4a0d      	ldr	r2, [pc, #52]	@ (80071d4 <xTaskIncrementTick+0x170>)
 80071a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071a2:	697b      	ldr	r3, [r7, #20]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20001074 	.word	0x20001074
 80071b0:	20001050 	.word	0x20001050
 80071b4:	20001004 	.word	0x20001004
 80071b8:	20001008 	.word	0x20001008
 80071bc:	20001064 	.word	0x20001064
 80071c0:	2000106c 	.word	0x2000106c
 80071c4:	20001054 	.word	0x20001054
 80071c8:	20000b7c 	.word	0x20000b7c
 80071cc:	20000b78 	.word	0x20000b78
 80071d0:	20001060 	.word	0x20001060
 80071d4:	2000105c 	.word	0x2000105c

080071d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071de:	4b2b      	ldr	r3, [pc, #172]	@ (800728c <vTaskSwitchContext+0xb4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007290 <vTaskSwitchContext+0xb8>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071ec:	e047      	b.n	800727e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80071ee:	4b28      	ldr	r3, [pc, #160]	@ (8007290 <vTaskSwitchContext+0xb8>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f4:	4b27      	ldr	r3, [pc, #156]	@ (8007294 <vTaskSwitchContext+0xbc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e011      	b.n	8007220 <vTaskSwitchContext+0x48>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <vTaskSwitchContext+0x42>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	607b      	str	r3, [r7, #4]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <vTaskSwitchContext+0x3e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3b01      	subs	r3, #1
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	491d      	ldr	r1, [pc, #116]	@ (8007298 <vTaskSwitchContext+0xc0>)
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0e3      	beq.n	80071fc <vTaskSwitchContext+0x24>
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4a16      	ldr	r2, [pc, #88]	@ (8007298 <vTaskSwitchContext+0xc0>)
 8007240:	4413      	add	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	3308      	adds	r3, #8
 8007256:	429a      	cmp	r2, r3
 8007258:	d104      	bne.n	8007264 <vTaskSwitchContext+0x8c>
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	605a      	str	r2, [r3, #4]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	4a0c      	ldr	r2, [pc, #48]	@ (800729c <vTaskSwitchContext+0xc4>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	4a09      	ldr	r2, [pc, #36]	@ (8007294 <vTaskSwitchContext+0xbc>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007274:	4b09      	ldr	r3, [pc, #36]	@ (800729c <vTaskSwitchContext+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3364      	adds	r3, #100	@ 0x64
 800727a:	4a09      	ldr	r2, [pc, #36]	@ (80072a0 <vTaskSwitchContext+0xc8>)
 800727c:	6013      	str	r3, [r2, #0]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20001074 	.word	0x20001074
 8007290:	20001060 	.word	0x20001060
 8007294:	20001054 	.word	0x20001054
 8007298:	20000b7c 	.word	0x20000b7c
 800729c:	20000b78 	.word	0x20000b78
 80072a0:	20000070 	.word	0x20000070

080072a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	60fb      	str	r3, [r7, #12]
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	e7fd      	b.n	80072c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072cc:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <vTaskPlaceOnEventList+0x48>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3318      	adds	r3, #24
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe fd78 	bl	8005dca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072da:	2101      	movs	r1, #1
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f000 fa87 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	20000b78 	.word	0x20000b78

080072f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	617b      	str	r3, [r7, #20]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <vTaskPlaceOnEventListRestricted+0x54>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3318      	adds	r3, #24
 8007320:	4619      	mov	r1, r3
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7fe fd2d 	bl	8005d82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800732e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007332:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	68b8      	ldr	r0, [r7, #8]
 8007338:	f000 fa5a 	bl	80077f0 <prvAddCurrentTaskToDelayedList>
	}
 800733c:	bf00      	nop
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000b78 	.word	0x20000b78

08007348 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3318      	adds	r3, #24
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fd5e 	bl	8005e3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007380:	4b1d      	ldr	r3, [pc, #116]	@ (80073f8 <xTaskRemoveFromEventList+0xb0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d11d      	bne.n	80073c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3304      	adds	r3, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fd55 	bl	8005e3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007396:	4b19      	ldr	r3, [pc, #100]	@ (80073fc <xTaskRemoveFromEventList+0xb4>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d903      	bls.n	80073a6 <xTaskRemoveFromEventList+0x5e>
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	4a16      	ldr	r2, [pc, #88]	@ (80073fc <xTaskRemoveFromEventList+0xb4>)
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4a13      	ldr	r2, [pc, #76]	@ (8007400 <xTaskRemoveFromEventList+0xb8>)
 80073b4:	441a      	add	r2, r3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe fce0 	bl	8005d82 <vListInsertEnd>
 80073c2:	e005      	b.n	80073d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	3318      	adds	r3, #24
 80073c8:	4619      	mov	r1, r3
 80073ca:	480e      	ldr	r0, [pc, #56]	@ (8007404 <xTaskRemoveFromEventList+0xbc>)
 80073cc:	f7fe fcd9 	bl	8005d82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <xTaskRemoveFromEventList+0xc0>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d905      	bls.n	80073ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073de:	2301      	movs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <xTaskRemoveFromEventList+0xc4>)
 80073e4:	2201      	movs	r2, #1
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	e001      	b.n	80073ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073ee:	697b      	ldr	r3, [r7, #20]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20001074 	.word	0x20001074
 80073fc:	20001054 	.word	0x20001054
 8007400:	20000b7c 	.word	0x20000b7c
 8007404:	2000100c 	.word	0x2000100c
 8007408:	20000b78 	.word	0x20000b78
 800740c:	20001060 	.word	0x20001060

08007410 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007418:	4b06      	ldr	r3, [pc, #24]	@ (8007434 <vTaskInternalSetTimeOutState+0x24>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007420:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <vTaskInternalSetTimeOutState+0x28>)
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	20001064 	.word	0x20001064
 8007438:	20001050 	.word	0x20001050

0800743c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b088      	sub	sp, #32
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	613b      	str	r3, [r7, #16]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	60fb      	str	r3, [r7, #12]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007482:	f000 fe91 	bl	80081a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007486:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <xTaskCheckForTimeOut+0xc0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800749e:	d102      	bne.n	80074a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
 80074a4:	e023      	b.n	80074ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	4b15      	ldr	r3, [pc, #84]	@ (8007500 <xTaskCheckForTimeOut+0xc4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d007      	beq.n	80074c2 <xTaskCheckForTimeOut+0x86>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d302      	bcc.n	80074c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074bc:	2301      	movs	r3, #1
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e015      	b.n	80074ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d20b      	bcs.n	80074e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ff99 	bl	8007410 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	e004      	b.n	80074ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ee:	f000 fe8d 	bl	800820c <vPortExitCritical>

	return xReturn;
 80074f2:	69fb      	ldr	r3, [r7, #28]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20001050 	.word	0x20001050
 8007500:	20001064 	.word	0x20001064

08007504 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007508:	4b03      	ldr	r3, [pc, #12]	@ (8007518 <vTaskMissedYield+0x14>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
}
 800750e:	bf00      	nop
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	20001060 	.word	0x20001060

0800751c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007524:	f000 f852 	bl	80075cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007528:	4b06      	ldr	r3, [pc, #24]	@ (8007544 <prvIdleTask+0x28>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d9f9      	bls.n	8007524 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <prvIdleTask+0x2c>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007540:	e7f0      	b.n	8007524 <prvIdleTask+0x8>
 8007542:	bf00      	nop
 8007544:	20000b7c 	.word	0x20000b7c
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007552:	2300      	movs	r3, #0
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	e00c      	b.n	8007572 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4a12      	ldr	r2, [pc, #72]	@ (80075ac <prvInitialiseTaskLists+0x60>)
 8007564:	4413      	add	r3, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fbde 	bl	8005d28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3301      	adds	r3, #1
 8007570:	607b      	str	r3, [r7, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b37      	cmp	r3, #55	@ 0x37
 8007576:	d9ef      	bls.n	8007558 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007578:	480d      	ldr	r0, [pc, #52]	@ (80075b0 <prvInitialiseTaskLists+0x64>)
 800757a:	f7fe fbd5 	bl	8005d28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800757e:	480d      	ldr	r0, [pc, #52]	@ (80075b4 <prvInitialiseTaskLists+0x68>)
 8007580:	f7fe fbd2 	bl	8005d28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007584:	480c      	ldr	r0, [pc, #48]	@ (80075b8 <prvInitialiseTaskLists+0x6c>)
 8007586:	f7fe fbcf 	bl	8005d28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800758a:	480c      	ldr	r0, [pc, #48]	@ (80075bc <prvInitialiseTaskLists+0x70>)
 800758c:	f7fe fbcc 	bl	8005d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007590:	480b      	ldr	r0, [pc, #44]	@ (80075c0 <prvInitialiseTaskLists+0x74>)
 8007592:	f7fe fbc9 	bl	8005d28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007596:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <prvInitialiseTaskLists+0x78>)
 8007598:	4a05      	ldr	r2, [pc, #20]	@ (80075b0 <prvInitialiseTaskLists+0x64>)
 800759a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <prvInitialiseTaskLists+0x7c>)
 800759e:	4a05      	ldr	r2, [pc, #20]	@ (80075b4 <prvInitialiseTaskLists+0x68>)
 80075a0:	601a      	str	r2, [r3, #0]
}
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000b7c 	.word	0x20000b7c
 80075b0:	20000fdc 	.word	0x20000fdc
 80075b4:	20000ff0 	.word	0x20000ff0
 80075b8:	2000100c 	.word	0x2000100c
 80075bc:	20001020 	.word	0x20001020
 80075c0:	20001038 	.word	0x20001038
 80075c4:	20001004 	.word	0x20001004
 80075c8:	20001008 	.word	0x20001008

080075cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075d2:	e019      	b.n	8007608 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075d4:	f000 fde8 	bl	80081a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	4b10      	ldr	r3, [pc, #64]	@ (800761c <prvCheckTasksWaitingTermination+0x50>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fc29 	bl	8005e3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007620 <prvCheckTasksWaitingTermination+0x54>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007620 <prvCheckTasksWaitingTermination+0x54>)
 80075f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 80075fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075fe:	f000 fe05 	bl	800820c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f810 	bl	8007628 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <prvCheckTasksWaitingTermination+0x58>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e1      	bne.n	80075d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	20001020 	.word	0x20001020
 8007620:	2000104c 	.word	0x2000104c
 8007624:	20001034 	.word	0x20001034

08007628 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3364      	adds	r3, #100	@ 0x64
 8007634:	4618      	mov	r0, r3
 8007636:	f001 ff9d 	bl	8009574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	4618      	mov	r0, r3
 800764a:	f000 ff9d 	bl	8008588 <vPortFree>
				vPortFree( pxTCB );
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 ff9a 	bl	8008588 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007654:	e019      	b.n	800768a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800765c:	2b01      	cmp	r3, #1
 800765e:	d103      	bne.n	8007668 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 ff91 	bl	8008588 <vPortFree>
	}
 8007666:	e010      	b.n	800768a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 30b5 	ldrb.w	r3, [r3, #181]	@ 0xb5
 800766e:	2b02      	cmp	r3, #2
 8007670:	d00b      	beq.n	800768a <prvDeleteTCB+0x62>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60fb      	str	r3, [r7, #12]
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	e7fd      	b.n	8007686 <prvDeleteTCB+0x5e>
	}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769a:	4b0c      	ldr	r3, [pc, #48]	@ (80076cc <prvResetNextTaskUnblockTime+0x38>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076a4:	4b0a      	ldr	r3, [pc, #40]	@ (80076d0 <prvResetNextTaskUnblockTime+0x3c>)
 80076a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ac:	e008      	b.n	80076c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ae:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <prvResetNextTaskUnblockTime+0x38>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	4a04      	ldr	r2, [pc, #16]	@ (80076d0 <prvResetNextTaskUnblockTime+0x3c>)
 80076be:	6013      	str	r3, [r2, #0]
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20001004 	.word	0x20001004
 80076d0:	2000106c 	.word	0x2000106c

080076d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076da:	4b0b      	ldr	r3, [pc, #44]	@ (8007708 <xTaskGetSchedulerState+0x34>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d102      	bne.n	80076e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076e2:	2301      	movs	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
 80076e6:	e008      	b.n	80076fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e8:	4b08      	ldr	r3, [pc, #32]	@ (800770c <xTaskGetSchedulerState+0x38>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076f0:	2302      	movs	r3, #2
 80076f2:	607b      	str	r3, [r7, #4]
 80076f4:	e001      	b.n	80076fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076fa:	687b      	ldr	r3, [r7, #4]
	}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20001058 	.word	0x20001058
 800770c:	20001074 	.word	0x20001074

08007710 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d058      	beq.n	80077d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007726:	4b2f      	ldr	r3, [pc, #188]	@ (80077e4 <xTaskPriorityDisinherit+0xd4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	429a      	cmp	r2, r3
 800772e:	d00b      	beq.n	8007748 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60fb      	str	r3, [r7, #12]
}
 8007742:	bf00      	nop
 8007744:	bf00      	nop
 8007746:	e7fd      	b.n	8007744 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60bb      	str	r3, [r7, #8]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800776c:	1e5a      	subs	r2, r3, #1
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800777a:	429a      	cmp	r2, r3
 800777c:	d02c      	beq.n	80077d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007782:	2b00      	cmp	r3, #0
 8007784:	d128      	bne.n	80077d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fb56 	bl	8005e3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077a8:	4b0f      	ldr	r3, [pc, #60]	@ (80077e8 <xTaskPriorityDisinherit+0xd8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d903      	bls.n	80077b8 <xTaskPriorityDisinherit+0xa8>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	4a0c      	ldr	r2, [pc, #48]	@ (80077e8 <xTaskPriorityDisinherit+0xd8>)
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077bc:	4613      	mov	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4a09      	ldr	r2, [pc, #36]	@ (80077ec <xTaskPriorityDisinherit+0xdc>)
 80077c6:	441a      	add	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3304      	adds	r3, #4
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe fad7 	bl	8005d82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077d8:	697b      	ldr	r3, [r7, #20]
	}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	20000b78 	.word	0x20000b78
 80077e8:	20001054 	.word	0x20001054
 80077ec:	20000b7c 	.word	0x20000b7c

080077f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077fa:	4b21      	ldr	r3, [pc, #132]	@ (8007880 <prvAddCurrentTaskToDelayedList+0x90>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007800:	4b20      	ldr	r3, [pc, #128]	@ (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fb18 	bl	8005e3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007812:	d10a      	bne.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800781a:	4b1a      	ldr	r3, [pc, #104]	@ (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4819      	ldr	r0, [pc, #100]	@ (8007888 <prvAddCurrentTaskToDelayedList+0x98>)
 8007824:	f7fe faad 	bl	8005d82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007828:	e026      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007832:	4b14      	ldr	r3, [pc, #80]	@ (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	429a      	cmp	r2, r3
 8007840:	d209      	bcs.n	8007856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007842:	4b12      	ldr	r3, [pc, #72]	@ (800788c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b0f      	ldr	r3, [pc, #60]	@ (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe fabb 	bl	8005dca <vListInsert>
}
 8007854:	e010      	b.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007856:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <prvAddCurrentTaskToDelayedList+0x94>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3304      	adds	r3, #4
 8007860:	4619      	mov	r1, r3
 8007862:	4610      	mov	r0, r2
 8007864:	f7fe fab1 	bl	8005dca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007868:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	429a      	cmp	r2, r3
 8007870:	d202      	bcs.n	8007878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007872:	4a08      	ldr	r2, [pc, #32]	@ (8007894 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20001050 	.word	0x20001050
 8007884:	20000b78 	.word	0x20000b78
 8007888:	20001038 	.word	0x20001038
 800788c:	20001008 	.word	0x20001008
 8007890:	20001004 	.word	0x20001004
 8007894:	2000106c 	.word	0x2000106c

08007898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08a      	sub	sp, #40	@ 0x28
 800789c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078a2:	f000 fb13 	bl	8007ecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078a6:	4b1d      	ldr	r3, [pc, #116]	@ (800791c <xTimerCreateTimerTask+0x84>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078b6:	1d3a      	adds	r2, r7, #4
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	f107 030c 	add.w	r3, r7, #12
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fa17 	bl	8005cf4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	9202      	str	r2, [sp, #8]
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	2302      	movs	r3, #2
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	2300      	movs	r3, #0
 80078d6:	460a      	mov	r2, r1
 80078d8:	4911      	ldr	r1, [pc, #68]	@ (8007920 <xTimerCreateTimerTask+0x88>)
 80078da:	4812      	ldr	r0, [pc, #72]	@ (8007924 <xTimerCreateTimerTask+0x8c>)
 80078dc:	f7ff f890 	bl	8006a00 <xTaskCreateStatic>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a11      	ldr	r2, [pc, #68]	@ (8007928 <xTimerCreateTimerTask+0x90>)
 80078e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078e6:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <xTimerCreateTimerTask+0x90>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	613b      	str	r3, [r7, #16]
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007910:	697b      	ldr	r3, [r7, #20]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200010a8 	.word	0x200010a8
 8007920:	0800ba68 	.word	0x0800ba68
 8007924:	08007a65 	.word	0x08007a65
 8007928:	200010ac 	.word	0x200010ac

0800792c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	@ 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <xTimerGenericCommand+0x30>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	623b      	str	r3, [r7, #32]
}
 8007956:	bf00      	nop
 8007958:	bf00      	nop
 800795a:	e7fd      	b.n	8007958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800795c:	4b19      	ldr	r3, [pc, #100]	@ (80079c4 <xTimerGenericCommand+0x98>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02a      	beq.n	80079ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b05      	cmp	r3, #5
 8007974:	dc18      	bgt.n	80079a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007976:	f7ff fead 	bl	80076d4 <xTaskGetSchedulerState>
 800797a:	4603      	mov	r3, r0
 800797c:	2b02      	cmp	r3, #2
 800797e:	d109      	bne.n	8007994 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007980:	4b10      	ldr	r3, [pc, #64]	@ (80079c4 <xTimerGenericCommand+0x98>)
 8007982:	6818      	ldr	r0, [r3, #0]
 8007984:	f107 0110 	add.w	r1, r7, #16
 8007988:	2300      	movs	r3, #0
 800798a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800798c:	f7fe fbc6 	bl	800611c <xQueueGenericSend>
 8007990:	6278      	str	r0, [r7, #36]	@ 0x24
 8007992:	e012      	b.n	80079ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007994:	4b0b      	ldr	r3, [pc, #44]	@ (80079c4 <xTimerGenericCommand+0x98>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	f107 0110 	add.w	r1, r7, #16
 800799c:	2300      	movs	r3, #0
 800799e:	2200      	movs	r2, #0
 80079a0:	f7fe fbbc 	bl	800611c <xQueueGenericSend>
 80079a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80079a6:	e008      	b.n	80079ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079a8:	4b06      	ldr	r3, [pc, #24]	@ (80079c4 <xTimerGenericCommand+0x98>)
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	f107 0110 	add.w	r1, r7, #16
 80079b0:	2300      	movs	r3, #0
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	f7fe fcb4 	bl	8006320 <xQueueGenericSendFromISR>
 80079b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3728      	adds	r7, #40	@ 0x28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200010a8 	.word	0x200010a8

080079c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d2:	4b23      	ldr	r3, [pc, #140]	@ (8007a60 <prvProcessExpiredTimer+0x98>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3304      	adds	r3, #4
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe fa2b 	bl	8005e3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	699a      	ldr	r2, [r3, #24]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	18d1      	adds	r1, r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	6978      	ldr	r0, [r7, #20]
 8007a02:	f000 f8d5 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d020      	beq.n	8007a4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9300      	str	r3, [sp, #0]
 8007a10:	2300      	movs	r3, #0
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	2100      	movs	r1, #0
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f7ff ff88 	bl	800792c <xTimerGenericCommand>
 8007a1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d114      	bne.n	8007a4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a28:	f383 8811 	msr	BASEPRI, r3
 8007a2c:	f3bf 8f6f 	isb	sy
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	60fb      	str	r3, [r7, #12]
}
 8007a36:	bf00      	nop
 8007a38:	bf00      	nop
 8007a3a:	e7fd      	b.n	8007a38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	6978      	ldr	r0, [r7, #20]
 8007a54:	4798      	blx	r3
}
 8007a56:	bf00      	nop
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200010a0 	.word	0x200010a0

08007a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a6c:	f107 0308 	add.w	r3, r7, #8
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 f859 	bl	8007b28 <prvGetNextExpireTime>
 8007a76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 f805 	bl	8007a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a82:	f000 f8d7 	bl	8007c34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a86:	bf00      	nop
 8007a88:	e7f0      	b.n	8007a6c <prvTimerTask+0x8>
	...

08007a8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a96:	f7ff fa17 	bl	8006ec8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a9a:	f107 0308 	add.w	r3, r7, #8
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f866 	bl	8007b70 <prvSampleTimeNow>
 8007aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d130      	bne.n	8007b0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d806      	bhi.n	8007ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aba:	f7ff fa13 	bl	8006ee4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007abe:	68f9      	ldr	r1, [r7, #12]
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff ff81 	bl	80079c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ac6:	e024      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ace:	4b13      	ldr	r3, [pc, #76]	@ (8007b1c <prvProcessTimerOrBlockTask+0x90>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <prvProcessTimerOrBlockTask+0x50>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <prvProcessTimerOrBlockTask+0x52>
 8007adc:	2300      	movs	r3, #0
 8007ade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8007b20 <prvProcessTimerOrBlockTask+0x94>)
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	4619      	mov	r1, r3
 8007aee:	f7fe ff53 	bl	8006998 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007af2:	f7ff f9f7 	bl	8006ee4 <xTaskResumeAll>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007afc:	4b09      	ldr	r3, [pc, #36]	@ (8007b24 <prvProcessTimerOrBlockTask+0x98>)
 8007afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	f3bf 8f6f 	isb	sy
}
 8007b0c:	e001      	b.n	8007b12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b0e:	f7ff f9e9 	bl	8006ee4 <xTaskResumeAll>
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200010a4 	.word	0x200010a4
 8007b20:	200010a8 	.word	0x200010a8
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b30:	4b0e      	ldr	r3, [pc, #56]	@ (8007b6c <prvGetNextExpireTime+0x44>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <prvGetNextExpireTime+0x16>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e000      	b.n	8007b40 <prvGetNextExpireTime+0x18>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d105      	bne.n	8007b58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4c:	4b07      	ldr	r3, [pc, #28]	@ (8007b6c <prvGetNextExpireTime+0x44>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e001      	b.n	8007b5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	200010a0 	.word	0x200010a0

08007b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b78:	f7ff fa52 	bl	8007020 <xTaskGetTickCount>
 8007b7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bac <prvSampleTimeNow+0x3c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d205      	bcs.n	8007b94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b88:	f000 f93a 	bl	8007e00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b9a:	4a04      	ldr	r2, [pc, #16]	@ (8007bac <prvSampleTimeNow+0x3c>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	200010b0 	.word	0x200010b0

08007bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
 8007bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d812      	bhi.n	8007bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d302      	bcc.n	8007bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e01b      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bea:	4b10      	ldr	r3, [pc, #64]	@ (8007c2c <prvInsertTimerInActiveList+0x7c>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f7fe f8e8 	bl	8005dca <vListInsert>
 8007bfa:	e012      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d206      	bcs.n	8007c12 <prvInsertTimerInActiveList+0x62>
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e007      	b.n	8007c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c12:	4b07      	ldr	r3, [pc, #28]	@ (8007c30 <prvInsertTimerInActiveList+0x80>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f7fe f8d4 	bl	8005dca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c22:	697b      	ldr	r3, [r7, #20]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	200010a4 	.word	0x200010a4
 8007c30:	200010a0 	.word	0x200010a0

08007c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08e      	sub	sp, #56	@ 0x38
 8007c38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c3a:	e0ce      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	da19      	bge.n	8007c76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c42:	1d3b      	adds	r3, r7, #4
 8007c44:	3304      	adds	r3, #4
 8007c46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	61fb      	str	r3, [r7, #28]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c6c:	6850      	ldr	r0, [r2, #4]
 8007c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c70:	6892      	ldr	r2, [r2, #8]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f2c0 80ae 	blt.w	8007dda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fe f8d4 	bl	8005e3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c94:	463b      	mov	r3, r7
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ff6a 	bl	8007b70 <prvSampleTimeNow>
 8007c9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b09      	cmp	r3, #9
 8007ca2:	f200 8097 	bhi.w	8007dd4 <prvProcessReceivedCommands+0x1a0>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <prvProcessReceivedCommands+0x78>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cd5 	.word	0x08007cd5
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007d4b 	.word	0x08007d4b
 8007cbc:	08007d5f 	.word	0x08007d5f
 8007cc0:	08007dab 	.word	0x08007dab
 8007cc4:	08007cd5 	.word	0x08007cd5
 8007cc8:	08007cd5 	.word	0x08007cd5
 8007ccc:	08007d4b 	.word	0x08007d4b
 8007cd0:	08007d5f 	.word	0x08007d5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	18d1      	adds	r1, r2, r3
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf4:	f7ff ff5c 	bl	8007bb0 <prvInsertTimerInActiveList>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d06c      	beq.n	8007dd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d061      	beq.n	8007dd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	2100      	movs	r1, #0
 8007d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d26:	f7ff fe01 	bl	800792c <xTimerGenericCommand>
 8007d2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d152      	bne.n	8007dd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	61bb      	str	r3, [r7, #24]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d50:	f023 0301 	bic.w	r3, r3, #1
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d5c:	e03d      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10b      	bne.n	8007d96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	617b      	str	r3, [r7, #20]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	699a      	ldr	r2, [r3, #24]
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	18d1      	adds	r1, r2, r3
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007da4:	f7ff ff04 	bl	8007bb0 <prvInsertTimerInActiveList>
					break;
 8007da8:	e017      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007db0:	f003 0302 	and.w	r3, r3, #2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d103      	bne.n	8007dc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007db8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dba:	f000 fbe5 	bl	8008588 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007dbe:	e00c      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007dd2:	e002      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007dd4:	bf00      	nop
 8007dd6:	e000      	b.n	8007dda <prvProcessReceivedCommands+0x1a6>
					break;
 8007dd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dda:	4b08      	ldr	r3, [pc, #32]	@ (8007dfc <prvProcessReceivedCommands+0x1c8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	1d39      	adds	r1, r7, #4
 8007de0:	2200      	movs	r2, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fb3a 	bl	800645c <xQueueReceive>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f47f af26 	bne.w	8007c3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	3730      	adds	r7, #48	@ 0x30
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	200010a8 	.word	0x200010a8

08007e00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e06:	e049      	b.n	8007e9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e08:	4b2e      	ldr	r3, [pc, #184]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e12:	4b2c      	ldr	r3, [pc, #176]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe f80b 	bl	8005e3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a1b      	ldr	r3, [r3, #32]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d02f      	beq.n	8007e9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4413      	add	r3, r2
 8007e44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d90e      	bls.n	8007e6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3304      	adds	r3, #4
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fd ffb0 	bl	8005dca <vListInsert>
 8007e6a:	e017      	b.n	8007e9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	2300      	movs	r3, #0
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	2100      	movs	r1, #0
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fd58 	bl	800792c <xTimerGenericCommand>
 8007e7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10b      	bne.n	8007e9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e88:	f383 8811 	msr	BASEPRI, r3
 8007e8c:	f3bf 8f6f 	isb	sy
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	603b      	str	r3, [r7, #0]
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	e7fd      	b.n	8007e98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1b0      	bne.n	8007e08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007ea6:	4b07      	ldr	r3, [pc, #28]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007eac:	4b06      	ldr	r3, [pc, #24]	@ (8007ec8 <prvSwitchTimerLists+0xc8>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a04      	ldr	r2, [pc, #16]	@ (8007ec4 <prvSwitchTimerLists+0xc4>)
 8007eb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007eb4:	4a04      	ldr	r2, [pc, #16]	@ (8007ec8 <prvSwitchTimerLists+0xc8>)
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6013      	str	r3, [r2, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	200010a0 	.word	0x200010a0
 8007ec8:	200010a4 	.word	0x200010a4

08007ecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ed2:	f000 f969 	bl	80081a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ed6:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d120      	bne.n	8007f20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ede:	4814      	ldr	r0, [pc, #80]	@ (8007f30 <prvCheckForValidListAndQueue+0x64>)
 8007ee0:	f7fd ff22 	bl	8005d28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ee4:	4813      	ldr	r0, [pc, #76]	@ (8007f34 <prvCheckForValidListAndQueue+0x68>)
 8007ee6:	f7fd ff1f 	bl	8005d28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007eea:	4b13      	ldr	r3, [pc, #76]	@ (8007f38 <prvCheckForValidListAndQueue+0x6c>)
 8007eec:	4a10      	ldr	r2, [pc, #64]	@ (8007f30 <prvCheckForValidListAndQueue+0x64>)
 8007eee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ef0:	4b12      	ldr	r3, [pc, #72]	@ (8007f3c <prvCheckForValidListAndQueue+0x70>)
 8007ef2:	4a10      	ldr	r2, [pc, #64]	@ (8007f34 <prvCheckForValidListAndQueue+0x68>)
 8007ef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4b11      	ldr	r3, [pc, #68]	@ (8007f40 <prvCheckForValidListAndQueue+0x74>)
 8007efc:	4a11      	ldr	r2, [pc, #68]	@ (8007f44 <prvCheckForValidListAndQueue+0x78>)
 8007efe:	2110      	movs	r1, #16
 8007f00:	200a      	movs	r0, #10
 8007f02:	f7fe f82f 	bl	8005f64 <xQueueGenericCreateStatic>
 8007f06:	4603      	mov	r3, r0
 8007f08:	4a08      	ldr	r2, [pc, #32]	@ (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f0c:	4b07      	ldr	r3, [pc, #28]	@ (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f14:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <prvCheckForValidListAndQueue+0x60>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	490b      	ldr	r1, [pc, #44]	@ (8007f48 <prvCheckForValidListAndQueue+0x7c>)
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fd12 	bl	8006944 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f20:	f000 f974 	bl	800820c <vPortExitCritical>
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	200010a8 	.word	0x200010a8
 8007f30:	20001078 	.word	0x20001078
 8007f34:	2000108c 	.word	0x2000108c
 8007f38:	200010a0 	.word	0x200010a0
 8007f3c:	200010a4 	.word	0x200010a4
 8007f40:	20001154 	.word	0x20001154
 8007f44:	200010b4 	.word	0x200010b4
 8007f48:	0800ba70 	.word	0x0800ba70

08007f4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3b04      	subs	r3, #4
 8007f5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007fb0 <pxPortInitialiseStack+0x64>)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3b14      	subs	r3, #20
 8007f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3b04      	subs	r3, #4
 8007f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f06f 0202 	mvn.w	r2, #2
 8007f9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	3b20      	subs	r3, #32
 8007fa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	08007fb5 	.word	0x08007fb5

08007fb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007fbe:	4b13      	ldr	r3, [pc, #76]	@ (800800c <prvTaskExitError+0x58>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fc6:	d00b      	beq.n	8007fe0 <prvTaskExitError+0x2c>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	60fb      	str	r3, [r7, #12]
}
 8007fda:	bf00      	nop
 8007fdc:	bf00      	nop
 8007fde:	e7fd      	b.n	8007fdc <prvTaskExitError+0x28>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60bb      	str	r3, [r7, #8]
}
 8007ff2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ff4:	bf00      	nop
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0fc      	beq.n	8007ff6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000060 	.word	0x20000060

08008010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <pxCurrentTCBConst2>)
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	6808      	ldr	r0, [r1, #0]
 8008016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f380 8809 	msr	PSP, r0
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	4770      	bx	lr
 800802c:	f3af 8000 	nop.w

08008030 <pxCurrentTCBConst2>:
 8008030:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008038:	4808      	ldr	r0, [pc, #32]	@ (800805c <prvPortStartFirstTask+0x24>)
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	6800      	ldr	r0, [r0, #0]
 800803e:	f380 8808 	msr	MSP, r0
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f380 8814 	msr	CONTROL, r0
 800804a:	b662      	cpsie	i
 800804c:	b661      	cpsie	f
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	df00      	svc	0
 8008058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800805a:	bf00      	nop
 800805c:	e000ed08 	.word	0xe000ed08

08008060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008066:	4b47      	ldr	r3, [pc, #284]	@ (8008184 <xPortStartScheduler+0x124>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a47      	ldr	r2, [pc, #284]	@ (8008188 <xPortStartScheduler+0x128>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d10b      	bne.n	8008088 <xPortStartScheduler+0x28>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	e7fd      	b.n	8008084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008088:	4b3e      	ldr	r3, [pc, #248]	@ (8008184 <xPortStartScheduler+0x124>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3f      	ldr	r2, [pc, #252]	@ (800818c <xPortStartScheduler+0x12c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d10b      	bne.n	80080aa <xPortStartScheduler+0x4a>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	613b      	str	r3, [r7, #16]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080aa:	4b39      	ldr	r3, [pc, #228]	@ (8008190 <xPortStartScheduler+0x130>)
 80080ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	22ff      	movs	r2, #255	@ 0xff
 80080ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	4b31      	ldr	r3, [pc, #196]	@ (8008194 <xPortStartScheduler+0x134>)
 80080d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80080d2:	4b31      	ldr	r3, [pc, #196]	@ (8008198 <xPortStartScheduler+0x138>)
 80080d4:	2207      	movs	r2, #7
 80080d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080d8:	e009      	b.n	80080ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80080da:	4b2f      	ldr	r3, [pc, #188]	@ (8008198 <xPortStartScheduler+0x138>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3b01      	subs	r3, #1
 80080e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008198 <xPortStartScheduler+0x138>)
 80080e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80080ee:	78fb      	ldrb	r3, [r7, #3]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f6:	2b80      	cmp	r3, #128	@ 0x80
 80080f8:	d0ef      	beq.n	80080da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080fa:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <xPortStartScheduler+0x138>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f1c3 0307 	rsb	r3, r3, #7
 8008102:	2b04      	cmp	r3, #4
 8008104:	d00b      	beq.n	800811e <xPortStartScheduler+0xbe>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	60bb      	str	r3, [r7, #8]
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	e7fd      	b.n	800811a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800811e:	4b1e      	ldr	r3, [pc, #120]	@ (8008198 <xPortStartScheduler+0x138>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	4a1c      	ldr	r2, [pc, #112]	@ (8008198 <xPortStartScheduler+0x138>)
 8008126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008128:	4b1b      	ldr	r3, [pc, #108]	@ (8008198 <xPortStartScheduler+0x138>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008130:	4a19      	ldr	r2, [pc, #100]	@ (8008198 <xPortStartScheduler+0x138>)
 8008132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	b2da      	uxtb	r2, r3
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800813c:	4b17      	ldr	r3, [pc, #92]	@ (800819c <xPortStartScheduler+0x13c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a16      	ldr	r2, [pc, #88]	@ (800819c <xPortStartScheduler+0x13c>)
 8008142:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008148:	4b14      	ldr	r3, [pc, #80]	@ (800819c <xPortStartScheduler+0x13c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a13      	ldr	r2, [pc, #76]	@ (800819c <xPortStartScheduler+0x13c>)
 800814e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008154:	f000 f8da 	bl	800830c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008158:	4b11      	ldr	r3, [pc, #68]	@ (80081a0 <xPortStartScheduler+0x140>)
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800815e:	f000 f8f9 	bl	8008354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <xPortStartScheduler+0x144>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <xPortStartScheduler+0x144>)
 8008168:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800816c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800816e:	f7ff ff63 	bl	8008038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008172:	f7ff f831 	bl	80071d8 <vTaskSwitchContext>
	prvTaskExitError();
 8008176:	f7ff ff1d 	bl	8007fb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	e000ed00 	.word	0xe000ed00
 8008188:	410fc271 	.word	0x410fc271
 800818c:	410fc270 	.word	0x410fc270
 8008190:	e000e400 	.word	0xe000e400
 8008194:	200011a4 	.word	0x200011a4
 8008198:	200011a8 	.word	0x200011a8
 800819c:	e000ed20 	.word	0xe000ed20
 80081a0:	20000060 	.word	0x20000060
 80081a4:	e000ef34 	.word	0xe000ef34

080081a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081c2:	4b10      	ldr	r3, [pc, #64]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	3301      	adds	r3, #1
 80081c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008204 <vPortEnterCritical+0x5c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d110      	bne.n	80081f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008208 <vPortEnterCritical+0x60>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00b      	beq.n	80081f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80081de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	603b      	str	r3, [r7, #0]
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	e7fd      	b.n	80081f2 <vPortEnterCritical+0x4a>
	}
}
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000060 	.word	0x20000060
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008212:	4b12      	ldr	r3, [pc, #72]	@ (800825c <vPortExitCritical+0x50>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <vPortExitCritical+0x26>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	607b      	str	r3, [r7, #4]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <vPortExitCritical+0x50>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3b01      	subs	r3, #1
 8008238:	4a08      	ldr	r2, [pc, #32]	@ (800825c <vPortExitCritical+0x50>)
 800823a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800823c:	4b07      	ldr	r3, [pc, #28]	@ (800825c <vPortExitCritical+0x50>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <vPortExitCritical+0x44>
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f383 8811 	msr	BASEPRI, r3
}
 800824e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000060 	.word	0x20000060

08008260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008260:	f3ef 8009 	mrs	r0, PSP
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4b15      	ldr	r3, [pc, #84]	@ (80082c0 <pxCurrentTCBConst>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f01e 0f10 	tst.w	lr, #16
 8008270:	bf08      	it	eq
 8008272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	6010      	str	r0, [r2, #0]
 800827c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008280:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008284:	f380 8811 	msr	BASEPRI, r0
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f7fe ffa2 	bl	80071d8 <vTaskSwitchContext>
 8008294:	f04f 0000 	mov.w	r0, #0
 8008298:	f380 8811 	msr	BASEPRI, r0
 800829c:	bc09      	pop	{r0, r3}
 800829e:	6819      	ldr	r1, [r3, #0]
 80082a0:	6808      	ldr	r0, [r1, #0]
 80082a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a6:	f01e 0f10 	tst.w	lr, #16
 80082aa:	bf08      	it	eq
 80082ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80082b0:	f380 8809 	msr	PSP, r0
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w

080082c0 <pxCurrentTCBConst>:
 80082c0:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
}
 80082e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e2:	f7fe febf 	bl	8007064 <xTaskIncrementTick>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ec:	4b06      	ldr	r3, [pc, #24]	@ (8008308 <xPortSysTickHandler+0x40>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f383 8811 	msr	BASEPRI, r3
}
 80082fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed04 	.word	0xe000ed04

0800830c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008310:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <vPortSetupTimerInterrupt+0x38>)
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <vPortSetupTimerInterrupt+0x3c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a0a      	ldr	r2, [pc, #40]	@ (800834c <vPortSetupTimerInterrupt+0x40>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	099b      	lsrs	r3, r3, #6
 8008328:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <vPortSetupTimerInterrupt+0x44>)
 800832a:	3b01      	subs	r3, #1
 800832c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832e:	4b04      	ldr	r3, [pc, #16]	@ (8008340 <vPortSetupTimerInterrupt+0x34>)
 8008330:	2207      	movs	r2, #7
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	e000e010 	.word	0xe000e010
 8008344:	e000e018 	.word	0xe000e018
 8008348:	20000054 	.word	0x20000054
 800834c:	10624dd3 	.word	0x10624dd3
 8008350:	e000e014 	.word	0xe000e014

08008354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008354:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008364 <vPortEnableVFP+0x10>
 8008358:	6801      	ldr	r1, [r0, #0]
 800835a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800835e:	6001      	str	r1, [r0, #0]
 8008360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008362:	bf00      	nop
 8008364:	e000ed88 	.word	0xe000ed88

08008368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800836e:	f3ef 8305 	mrs	r3, IPSR
 8008372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b0f      	cmp	r3, #15
 8008378:	d915      	bls.n	80083a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800837a:	4a18      	ldr	r2, [pc, #96]	@ (80083dc <vPortValidateInterruptPriority+0x74>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008384:	4b16      	ldr	r3, [pc, #88]	@ (80083e0 <vPortValidateInterruptPriority+0x78>)
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	7afa      	ldrb	r2, [r7, #11]
 800838a:	429a      	cmp	r2, r3
 800838c:	d20b      	bcs.n	80083a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083a6:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <vPortValidateInterruptPriority+0x7c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80083ae:	4b0e      	ldr	r3, [pc, #56]	@ (80083e8 <vPortValidateInterruptPriority+0x80>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90b      	bls.n	80083ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	603b      	str	r3, [r7, #0]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <vPortValidateInterruptPriority+0x62>
	}
 80083ce:	bf00      	nop
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	e000e3f0 	.word	0xe000e3f0
 80083e0:	200011a4 	.word	0x200011a4
 80083e4:	e000ed0c 	.word	0xe000ed0c
 80083e8:	200011a8 	.word	0x200011a8

080083ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083f4:	2300      	movs	r3, #0
 80083f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083f8:	f7fe fd66 	bl	8006ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008570 <pvPortMalloc+0x184>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008404:	f000 f924 	bl	8008650 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008408:	4b5a      	ldr	r3, [pc, #360]	@ (8008574 <pvPortMalloc+0x188>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4013      	ands	r3, r2
 8008410:	2b00      	cmp	r3, #0
 8008412:	f040 8095 	bne.w	8008540 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d01e      	beq.n	800845a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800841c:	2208      	movs	r2, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4413      	add	r3, r2
 8008422:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	2b00      	cmp	r3, #0
 800842c:	d015      	beq.n	800845a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f023 0307 	bic.w	r3, r3, #7
 8008434:	3308      	adds	r3, #8
 8008436:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <pvPortMalloc+0x6e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	617b      	str	r3, [r7, #20]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d06f      	beq.n	8008540 <pvPortMalloc+0x154>
 8008460:	4b45      	ldr	r3, [pc, #276]	@ (8008578 <pvPortMalloc+0x18c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d86a      	bhi.n	8008540 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800846a:	4b44      	ldr	r3, [pc, #272]	@ (800857c <pvPortMalloc+0x190>)
 800846c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800846e:	4b43      	ldr	r3, [pc, #268]	@ (800857c <pvPortMalloc+0x190>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008474:	e004      	b.n	8008480 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d903      	bls.n	8008492 <pvPortMalloc+0xa6>
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f1      	bne.n	8008476 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008492:	4b37      	ldr	r3, [pc, #220]	@ (8008570 <pvPortMalloc+0x184>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008498:	429a      	cmp	r2, r3
 800849a:	d051      	beq.n	8008540 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2208      	movs	r2, #8
 80084a2:	4413      	add	r3, r2
 80084a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	1ad2      	subs	r2, r2, r3
 80084b6:	2308      	movs	r3, #8
 80084b8:	005b      	lsls	r3, r3, #1
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d920      	bls.n	8008500 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4413      	add	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <pvPortMalloc+0xfc>
	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	613b      	str	r3, [r7, #16]
}
 80084e2:	bf00      	nop
 80084e4:	bf00      	nop
 80084e6:	e7fd      	b.n	80084e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084fa:	69b8      	ldr	r0, [r7, #24]
 80084fc:	f000 f90a 	bl	8008714 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008500:	4b1d      	ldr	r3, [pc, #116]	@ (8008578 <pvPortMalloc+0x18c>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	4a1b      	ldr	r2, [pc, #108]	@ (8008578 <pvPortMalloc+0x18c>)
 800850c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800850e:	4b1a      	ldr	r3, [pc, #104]	@ (8008578 <pvPortMalloc+0x18c>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b1b      	ldr	r3, [pc, #108]	@ (8008580 <pvPortMalloc+0x194>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d203      	bcs.n	8008522 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800851a:	4b17      	ldr	r3, [pc, #92]	@ (8008578 <pvPortMalloc+0x18c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a18      	ldr	r2, [pc, #96]	@ (8008580 <pvPortMalloc+0x194>)
 8008520:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4b13      	ldr	r3, [pc, #76]	@ (8008574 <pvPortMalloc+0x188>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	431a      	orrs	r2, r3
 800852c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008536:	4b13      	ldr	r3, [pc, #76]	@ (8008584 <pvPortMalloc+0x198>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3301      	adds	r3, #1
 800853c:	4a11      	ldr	r2, [pc, #68]	@ (8008584 <pvPortMalloc+0x198>)
 800853e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008540:	f7fe fcd0 	bl	8006ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00b      	beq.n	8008566 <pvPortMalloc+0x17a>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60fb      	str	r3, [r7, #12]
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	e7fd      	b.n	8008562 <pvPortMalloc+0x176>
	return pvReturn;
 8008566:	69fb      	ldr	r3, [r7, #28]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3728      	adds	r7, #40	@ 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20006214 	.word	0x20006214
 8008574:	20006228 	.word	0x20006228
 8008578:	20006218 	.word	0x20006218
 800857c:	2000620c 	.word	0x2000620c
 8008580:	2000621c 	.word	0x2000621c
 8008584:	20006220 	.word	0x20006220

08008588 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d04f      	beq.n	800863a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800859a:	2308      	movs	r3, #8
 800859c:	425b      	negs	r3, r3
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4413      	add	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	4b25      	ldr	r3, [pc, #148]	@ (8008644 <vPortFree+0xbc>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4013      	ands	r3, r2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10b      	bne.n	80085ce <vPortFree+0x46>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	60fb      	str	r3, [r7, #12]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00b      	beq.n	80085ee <vPortFree+0x66>
	__asm volatile
 80085d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085da:	f383 8811 	msr	BASEPRI, r3
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	f3bf 8f4f 	dsb	sy
 80085e6:	60bb      	str	r3, [r7, #8]
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	e7fd      	b.n	80085ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	685a      	ldr	r2, [r3, #4]
 80085f2:	4b14      	ldr	r3, [pc, #80]	@ (8008644 <vPortFree+0xbc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01e      	beq.n	800863a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d11a      	bne.n	800863a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	4b0e      	ldr	r3, [pc, #56]	@ (8008644 <vPortFree+0xbc>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	43db      	mvns	r3, r3
 800860e:	401a      	ands	r2, r3
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008614:	f7fe fc58 	bl	8006ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4b0a      	ldr	r3, [pc, #40]	@ (8008648 <vPortFree+0xc0>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4413      	add	r3, r2
 8008622:	4a09      	ldr	r2, [pc, #36]	@ (8008648 <vPortFree+0xc0>)
 8008624:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008626:	6938      	ldr	r0, [r7, #16]
 8008628:	f000 f874 	bl	8008714 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800862c:	4b07      	ldr	r3, [pc, #28]	@ (800864c <vPortFree+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a06      	ldr	r2, [pc, #24]	@ (800864c <vPortFree+0xc4>)
 8008634:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008636:	f7fe fc55 	bl	8006ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800863a:	bf00      	nop
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20006228 	.word	0x20006228
 8008648:	20006218 	.word	0x20006218
 800864c:	20006224 	.word	0x20006224

08008650 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008656:	f245 0360 	movw	r3, #20576	@ 0x5060
 800865a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800865c:	4b27      	ldr	r3, [pc, #156]	@ (80086fc <prvHeapInit+0xac>)
 800865e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00c      	beq.n	8008684 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	3307      	adds	r3, #7
 800866e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <prvHeapInit+0xac>)
 8008680:	4413      	add	r3, r2
 8008682:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008688:	4a1d      	ldr	r2, [pc, #116]	@ (8008700 <prvHeapInit+0xb0>)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800868e:	4b1c      	ldr	r3, [pc, #112]	@ (8008700 <prvHeapInit+0xb0>)
 8008690:	2200      	movs	r2, #0
 8008692:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	4413      	add	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800869c:	2208      	movs	r2, #8
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0307 	bic.w	r3, r3, #7
 80086aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a15      	ldr	r2, [pc, #84]	@ (8008704 <prvHeapInit+0xb4>)
 80086b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086b2:	4b14      	ldr	r3, [pc, #80]	@ (8008704 <prvHeapInit+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086ba:	4b12      	ldr	r3, [pc, #72]	@ (8008704 <prvHeapInit+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008704 <prvHeapInit+0xb4>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008708 <prvHeapInit+0xb8>)
 80086de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a09      	ldr	r2, [pc, #36]	@ (800870c <prvHeapInit+0xbc>)
 80086e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80086e8:	4b09      	ldr	r3, [pc, #36]	@ (8008710 <prvHeapInit+0xc0>)
 80086ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80086ee:	601a      	str	r2, [r3, #0]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	200011ac 	.word	0x200011ac
 8008700:	2000620c 	.word	0x2000620c
 8008704:	20006214 	.word	0x20006214
 8008708:	2000621c 	.word	0x2000621c
 800870c:	20006218 	.word	0x20006218
 8008710:	20006228 	.word	0x20006228

08008714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800871c:	4b28      	ldr	r3, [pc, #160]	@ (80087c0 <prvInsertBlockIntoFreeList+0xac>)
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	e002      	b.n	8008728 <prvInsertBlockIntoFreeList+0x14>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	429a      	cmp	r2, r3
 8008730:	d8f7      	bhi.n	8008722 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	429a      	cmp	r2, r3
 8008742:	d108      	bne.n	8008756 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	441a      	add	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	441a      	add	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	429a      	cmp	r2, r3
 8008768:	d118      	bne.n	800879c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	429a      	cmp	r2, r3
 8008774:	d00d      	beq.n	8008792 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	601a      	str	r2, [r3, #0]
 8008790:	e008      	b.n	80087a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008792:	4b0c      	ldr	r3, [pc, #48]	@ (80087c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e003      	b.n	80087a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d002      	beq.n	80087b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	2000620c 	.word	0x2000620c
 80087c4:	20006214 	.word	0x20006214

080087c8 <__cvt>:
 80087c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087cc:	ec57 6b10 	vmov	r6, r7, d0
 80087d0:	2f00      	cmp	r7, #0
 80087d2:	460c      	mov	r4, r1
 80087d4:	4619      	mov	r1, r3
 80087d6:	463b      	mov	r3, r7
 80087d8:	bfbb      	ittet	lt
 80087da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80087de:	461f      	movlt	r7, r3
 80087e0:	2300      	movge	r3, #0
 80087e2:	232d      	movlt	r3, #45	@ 0x2d
 80087e4:	700b      	strb	r3, [r1, #0]
 80087e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80087ec:	4691      	mov	r9, r2
 80087ee:	f023 0820 	bic.w	r8, r3, #32
 80087f2:	bfbc      	itt	lt
 80087f4:	4632      	movlt	r2, r6
 80087f6:	4616      	movlt	r6, r2
 80087f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087fc:	d005      	beq.n	800880a <__cvt+0x42>
 80087fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008802:	d100      	bne.n	8008806 <__cvt+0x3e>
 8008804:	3401      	adds	r4, #1
 8008806:	2102      	movs	r1, #2
 8008808:	e000      	b.n	800880c <__cvt+0x44>
 800880a:	2103      	movs	r1, #3
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9301      	str	r3, [sp, #4]
 8008810:	ab02      	add	r3, sp, #8
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	ec47 6b10 	vmov	d0, r6, r7
 8008818:	4653      	mov	r3, sl
 800881a:	4622      	mov	r2, r4
 800881c:	f001 f804 	bl	8009828 <_dtoa_r>
 8008820:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008824:	4605      	mov	r5, r0
 8008826:	d119      	bne.n	800885c <__cvt+0x94>
 8008828:	f019 0f01 	tst.w	r9, #1
 800882c:	d00e      	beq.n	800884c <__cvt+0x84>
 800882e:	eb00 0904 	add.w	r9, r0, r4
 8008832:	2200      	movs	r2, #0
 8008834:	2300      	movs	r3, #0
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f8 f975 	bl	8000b28 <__aeabi_dcmpeq>
 800883e:	b108      	cbz	r0, 8008844 <__cvt+0x7c>
 8008840:	f8cd 900c 	str.w	r9, [sp, #12]
 8008844:	2230      	movs	r2, #48	@ 0x30
 8008846:	9b03      	ldr	r3, [sp, #12]
 8008848:	454b      	cmp	r3, r9
 800884a:	d31e      	bcc.n	800888a <__cvt+0xc2>
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008850:	1b5b      	subs	r3, r3, r5
 8008852:	4628      	mov	r0, r5
 8008854:	6013      	str	r3, [r2, #0]
 8008856:	b004      	add	sp, #16
 8008858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008860:	eb00 0904 	add.w	r9, r0, r4
 8008864:	d1e5      	bne.n	8008832 <__cvt+0x6a>
 8008866:	7803      	ldrb	r3, [r0, #0]
 8008868:	2b30      	cmp	r3, #48	@ 0x30
 800886a:	d10a      	bne.n	8008882 <__cvt+0xba>
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f8 f958 	bl	8000b28 <__aeabi_dcmpeq>
 8008878:	b918      	cbnz	r0, 8008882 <__cvt+0xba>
 800887a:	f1c4 0401 	rsb	r4, r4, #1
 800887e:	f8ca 4000 	str.w	r4, [sl]
 8008882:	f8da 3000 	ldr.w	r3, [sl]
 8008886:	4499      	add	r9, r3
 8008888:	e7d3      	b.n	8008832 <__cvt+0x6a>
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	9103      	str	r1, [sp, #12]
 800888e:	701a      	strb	r2, [r3, #0]
 8008890:	e7d9      	b.n	8008846 <__cvt+0x7e>

08008892 <__exponent>:
 8008892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008894:	2900      	cmp	r1, #0
 8008896:	bfba      	itte	lt
 8008898:	4249      	neglt	r1, r1
 800889a:	232d      	movlt	r3, #45	@ 0x2d
 800889c:	232b      	movge	r3, #43	@ 0x2b
 800889e:	2909      	cmp	r1, #9
 80088a0:	7002      	strb	r2, [r0, #0]
 80088a2:	7043      	strb	r3, [r0, #1]
 80088a4:	dd29      	ble.n	80088fa <__exponent+0x68>
 80088a6:	f10d 0307 	add.w	r3, sp, #7
 80088aa:	461d      	mov	r5, r3
 80088ac:	270a      	movs	r7, #10
 80088ae:	461a      	mov	r2, r3
 80088b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80088b4:	fb07 1416 	mls	r4, r7, r6, r1
 80088b8:	3430      	adds	r4, #48	@ 0x30
 80088ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80088be:	460c      	mov	r4, r1
 80088c0:	2c63      	cmp	r4, #99	@ 0x63
 80088c2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80088c6:	4631      	mov	r1, r6
 80088c8:	dcf1      	bgt.n	80088ae <__exponent+0x1c>
 80088ca:	3130      	adds	r1, #48	@ 0x30
 80088cc:	1e94      	subs	r4, r2, #2
 80088ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088d2:	1c41      	adds	r1, r0, #1
 80088d4:	4623      	mov	r3, r4
 80088d6:	42ab      	cmp	r3, r5
 80088d8:	d30a      	bcc.n	80088f0 <__exponent+0x5e>
 80088da:	f10d 0309 	add.w	r3, sp, #9
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	42ac      	cmp	r4, r5
 80088e2:	bf88      	it	hi
 80088e4:	2300      	movhi	r3, #0
 80088e6:	3302      	adds	r3, #2
 80088e8:	4403      	add	r3, r0
 80088ea:	1a18      	subs	r0, r3, r0
 80088ec:	b003      	add	sp, #12
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088f8:	e7ed      	b.n	80088d6 <__exponent+0x44>
 80088fa:	2330      	movs	r3, #48	@ 0x30
 80088fc:	3130      	adds	r1, #48	@ 0x30
 80088fe:	7083      	strb	r3, [r0, #2]
 8008900:	70c1      	strb	r1, [r0, #3]
 8008902:	1d03      	adds	r3, r0, #4
 8008904:	e7f1      	b.n	80088ea <__exponent+0x58>
	...

08008908 <_printf_float>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	b08d      	sub	sp, #52	@ 0x34
 800890e:	460c      	mov	r4, r1
 8008910:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008914:	4616      	mov	r6, r2
 8008916:	461f      	mov	r7, r3
 8008918:	4605      	mov	r5, r0
 800891a:	f000 fe17 	bl	800954c <_localeconv_r>
 800891e:	6803      	ldr	r3, [r0, #0]
 8008920:	9304      	str	r3, [sp, #16]
 8008922:	4618      	mov	r0, r3
 8008924:	f7f7 fcd4 	bl	80002d0 <strlen>
 8008928:	2300      	movs	r3, #0
 800892a:	930a      	str	r3, [sp, #40]	@ 0x28
 800892c:	f8d8 3000 	ldr.w	r3, [r8]
 8008930:	9005      	str	r0, [sp, #20]
 8008932:	3307      	adds	r3, #7
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	f103 0208 	add.w	r2, r3, #8
 800893c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008940:	f8d4 b000 	ldr.w	fp, [r4]
 8008944:	f8c8 2000 	str.w	r2, [r8]
 8008948:	e9d3 8900 	ldrd	r8, r9, [r3]
 800894c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008950:	9307      	str	r3, [sp, #28]
 8008952:	f8cd 8018 	str.w	r8, [sp, #24]
 8008956:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800895a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800895e:	4b9c      	ldr	r3, [pc, #624]	@ (8008bd0 <_printf_float+0x2c8>)
 8008960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008964:	f7f8 f912 	bl	8000b8c <__aeabi_dcmpun>
 8008968:	bb70      	cbnz	r0, 80089c8 <_printf_float+0xc0>
 800896a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800896e:	4b98      	ldr	r3, [pc, #608]	@ (8008bd0 <_printf_float+0x2c8>)
 8008970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008974:	f7f8 f8ec 	bl	8000b50 <__aeabi_dcmple>
 8008978:	bb30      	cbnz	r0, 80089c8 <_printf_float+0xc0>
 800897a:	2200      	movs	r2, #0
 800897c:	2300      	movs	r3, #0
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f7f8 f8db 	bl	8000b3c <__aeabi_dcmplt>
 8008986:	b110      	cbz	r0, 800898e <_printf_float+0x86>
 8008988:	232d      	movs	r3, #45	@ 0x2d
 800898a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800898e:	4a91      	ldr	r2, [pc, #580]	@ (8008bd4 <_printf_float+0x2cc>)
 8008990:	4b91      	ldr	r3, [pc, #580]	@ (8008bd8 <_printf_float+0x2d0>)
 8008992:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008996:	bf8c      	ite	hi
 8008998:	4690      	movhi	r8, r2
 800899a:	4698      	movls	r8, r3
 800899c:	2303      	movs	r3, #3
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	f02b 0304 	bic.w	r3, fp, #4
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	f04f 0900 	mov.w	r9, #0
 80089aa:	9700      	str	r7, [sp, #0]
 80089ac:	4633      	mov	r3, r6
 80089ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089b0:	4621      	mov	r1, r4
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 f9d2 	bl	8008d5c <_printf_common>
 80089b8:	3001      	adds	r0, #1
 80089ba:	f040 808d 	bne.w	8008ad8 <_printf_float+0x1d0>
 80089be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089c2:	b00d      	add	sp, #52	@ 0x34
 80089c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	4640      	mov	r0, r8
 80089ce:	4649      	mov	r1, r9
 80089d0:	f7f8 f8dc 	bl	8000b8c <__aeabi_dcmpun>
 80089d4:	b140      	cbz	r0, 80089e8 <_printf_float+0xe0>
 80089d6:	464b      	mov	r3, r9
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bfbc      	itt	lt
 80089dc:	232d      	movlt	r3, #45	@ 0x2d
 80089de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80089e2:	4a7e      	ldr	r2, [pc, #504]	@ (8008bdc <_printf_float+0x2d4>)
 80089e4:	4b7e      	ldr	r3, [pc, #504]	@ (8008be0 <_printf_float+0x2d8>)
 80089e6:	e7d4      	b.n	8008992 <_printf_float+0x8a>
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80089ee:	9206      	str	r2, [sp, #24]
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	d13b      	bne.n	8008a6c <_printf_float+0x164>
 80089f4:	2306      	movs	r3, #6
 80089f6:	6063      	str	r3, [r4, #4]
 80089f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089fc:	2300      	movs	r3, #0
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a08:	ab09      	add	r3, sp, #36	@ 0x24
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	6861      	ldr	r1, [r4, #4]
 8008a0e:	ec49 8b10 	vmov	d0, r8, r9
 8008a12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a16:	4628      	mov	r0, r5
 8008a18:	f7ff fed6 	bl	80087c8 <__cvt>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a20:	2b47      	cmp	r3, #71	@ 0x47
 8008a22:	4680      	mov	r8, r0
 8008a24:	d129      	bne.n	8008a7a <_printf_float+0x172>
 8008a26:	1cc8      	adds	r0, r1, #3
 8008a28:	db02      	blt.n	8008a30 <_printf_float+0x128>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	4299      	cmp	r1, r3
 8008a2e:	dd41      	ble.n	8008ab4 <_printf_float+0x1ac>
 8008a30:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a34:	fa5f fa8a 	uxtb.w	sl, sl
 8008a38:	3901      	subs	r1, #1
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a40:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a42:	f7ff ff26 	bl	8008892 <__exponent>
 8008a46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a48:	1813      	adds	r3, r2, r0
 8008a4a:	2a01      	cmp	r2, #1
 8008a4c:	4681      	mov	r9, r0
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	dc02      	bgt.n	8008a58 <_printf_float+0x150>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	07d2      	lsls	r2, r2, #31
 8008a56:	d501      	bpl.n	8008a5c <_printf_float+0x154>
 8008a58:	3301      	adds	r3, #1
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d0a2      	beq.n	80089aa <_printf_float+0xa2>
 8008a64:	232d      	movs	r3, #45	@ 0x2d
 8008a66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a6a:	e79e      	b.n	80089aa <_printf_float+0xa2>
 8008a6c:	9a06      	ldr	r2, [sp, #24]
 8008a6e:	2a47      	cmp	r2, #71	@ 0x47
 8008a70:	d1c2      	bne.n	80089f8 <_printf_float+0xf0>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1c0      	bne.n	80089f8 <_printf_float+0xf0>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7bd      	b.n	80089f6 <_printf_float+0xee>
 8008a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a7e:	d9db      	bls.n	8008a38 <_printf_float+0x130>
 8008a80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a84:	d118      	bne.n	8008ab8 <_printf_float+0x1b0>
 8008a86:	2900      	cmp	r1, #0
 8008a88:	6863      	ldr	r3, [r4, #4]
 8008a8a:	dd0b      	ble.n	8008aa4 <_printf_float+0x19c>
 8008a8c:	6121      	str	r1, [r4, #16]
 8008a8e:	b913      	cbnz	r3, 8008a96 <_printf_float+0x18e>
 8008a90:	6822      	ldr	r2, [r4, #0]
 8008a92:	07d0      	lsls	r0, r2, #31
 8008a94:	d502      	bpl.n	8008a9c <_printf_float+0x194>
 8008a96:	3301      	adds	r3, #1
 8008a98:	440b      	add	r3, r1
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a9e:	f04f 0900 	mov.w	r9, #0
 8008aa2:	e7db      	b.n	8008a5c <_printf_float+0x154>
 8008aa4:	b913      	cbnz	r3, 8008aac <_printf_float+0x1a4>
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	07d2      	lsls	r2, r2, #31
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_float+0x1a8>
 8008aac:	3302      	adds	r3, #2
 8008aae:	e7f4      	b.n	8008a9a <_printf_float+0x192>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e7f2      	b.n	8008a9a <_printf_float+0x192>
 8008ab4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ab8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008aba:	4299      	cmp	r1, r3
 8008abc:	db05      	blt.n	8008aca <_printf_float+0x1c2>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	6121      	str	r1, [r4, #16]
 8008ac2:	07d8      	lsls	r0, r3, #31
 8008ac4:	d5ea      	bpl.n	8008a9c <_printf_float+0x194>
 8008ac6:	1c4b      	adds	r3, r1, #1
 8008ac8:	e7e7      	b.n	8008a9a <_printf_float+0x192>
 8008aca:	2900      	cmp	r1, #0
 8008acc:	bfd4      	ite	le
 8008ace:	f1c1 0202 	rsble	r2, r1, #2
 8008ad2:	2201      	movgt	r2, #1
 8008ad4:	4413      	add	r3, r2
 8008ad6:	e7e0      	b.n	8008a9a <_printf_float+0x192>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	055a      	lsls	r2, r3, #21
 8008adc:	d407      	bmi.n	8008aee <_printf_float+0x1e6>
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	4642      	mov	r2, r8
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	47b8      	blx	r7
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d12b      	bne.n	8008b44 <_printf_float+0x23c>
 8008aec:	e767      	b.n	80089be <_printf_float+0xb6>
 8008aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008af2:	f240 80dd 	bls.w	8008cb0 <_printf_float+0x3a8>
 8008af6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008afa:	2200      	movs	r2, #0
 8008afc:	2300      	movs	r3, #0
 8008afe:	f7f8 f813 	bl	8000b28 <__aeabi_dcmpeq>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d033      	beq.n	8008b6e <_printf_float+0x266>
 8008b06:	4a37      	ldr	r2, [pc, #220]	@ (8008be4 <_printf_float+0x2dc>)
 8008b08:	2301      	movs	r3, #1
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f af54 	beq.w	80089be <_printf_float+0xb6>
 8008b16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b1a:	4543      	cmp	r3, r8
 8008b1c:	db02      	blt.n	8008b24 <_printf_float+0x21c>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	07d8      	lsls	r0, r3, #31
 8008b22:	d50f      	bpl.n	8008b44 <_printf_float+0x23c>
 8008b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f43f af45 	beq.w	80089be <_printf_float+0xb6>
 8008b34:	f04f 0900 	mov.w	r9, #0
 8008b38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b3c:	f104 0a1a 	add.w	sl, r4, #26
 8008b40:	45c8      	cmp	r8, r9
 8008b42:	dc09      	bgt.n	8008b58 <_printf_float+0x250>
 8008b44:	6823      	ldr	r3, [r4, #0]
 8008b46:	079b      	lsls	r3, r3, #30
 8008b48:	f100 8103 	bmi.w	8008d52 <_printf_float+0x44a>
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b50:	4298      	cmp	r0, r3
 8008b52:	bfb8      	it	lt
 8008b54:	4618      	movlt	r0, r3
 8008b56:	e734      	b.n	80089c2 <_printf_float+0xba>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4631      	mov	r1, r6
 8008b5e:	4628      	mov	r0, r5
 8008b60:	47b8      	blx	r7
 8008b62:	3001      	adds	r0, #1
 8008b64:	f43f af2b 	beq.w	80089be <_printf_float+0xb6>
 8008b68:	f109 0901 	add.w	r9, r9, #1
 8008b6c:	e7e8      	b.n	8008b40 <_printf_float+0x238>
 8008b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc39      	bgt.n	8008be8 <_printf_float+0x2e0>
 8008b74:	4a1b      	ldr	r2, [pc, #108]	@ (8008be4 <_printf_float+0x2dc>)
 8008b76:	2301      	movs	r3, #1
 8008b78:	4631      	mov	r1, r6
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	47b8      	blx	r7
 8008b7e:	3001      	adds	r0, #1
 8008b80:	f43f af1d 	beq.w	80089be <_printf_float+0xb6>
 8008b84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b88:	ea59 0303 	orrs.w	r3, r9, r3
 8008b8c:	d102      	bne.n	8008b94 <_printf_float+0x28c>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	07d9      	lsls	r1, r3, #31
 8008b92:	d5d7      	bpl.n	8008b44 <_printf_float+0x23c>
 8008b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f af0d 	beq.w	80089be <_printf_float+0xb6>
 8008ba4:	f04f 0a00 	mov.w	sl, #0
 8008ba8:	f104 0b1a 	add.w	fp, r4, #26
 8008bac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bae:	425b      	negs	r3, r3
 8008bb0:	4553      	cmp	r3, sl
 8008bb2:	dc01      	bgt.n	8008bb8 <_printf_float+0x2b0>
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	e793      	b.n	8008ae0 <_printf_float+0x1d8>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	465a      	mov	r2, fp
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f43f aefb 	beq.w	80089be <_printf_float+0xb6>
 8008bc8:	f10a 0a01 	add.w	sl, sl, #1
 8008bcc:	e7ee      	b.n	8008bac <_printf_float+0x2a4>
 8008bce:	bf00      	nop
 8008bd0:	7fefffff 	.word	0x7fefffff
 8008bd4:	0800bb3c 	.word	0x0800bb3c
 8008bd8:	0800bb38 	.word	0x0800bb38
 8008bdc:	0800bb44 	.word	0x0800bb44
 8008be0:	0800bb40 	.word	0x0800bb40
 8008be4:	0800bb48 	.word	0x0800bb48
 8008be8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bee:	4553      	cmp	r3, sl
 8008bf0:	bfa8      	it	ge
 8008bf2:	4653      	movge	r3, sl
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	4699      	mov	r9, r3
 8008bf8:	dc36      	bgt.n	8008c68 <_printf_float+0x360>
 8008bfa:	f04f 0b00 	mov.w	fp, #0
 8008bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c02:	f104 021a 	add.w	r2, r4, #26
 8008c06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c08:	9306      	str	r3, [sp, #24]
 8008c0a:	eba3 0309 	sub.w	r3, r3, r9
 8008c0e:	455b      	cmp	r3, fp
 8008c10:	dc31      	bgt.n	8008c76 <_printf_float+0x36e>
 8008c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c14:	459a      	cmp	sl, r3
 8008c16:	dc3a      	bgt.n	8008c8e <_printf_float+0x386>
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	07da      	lsls	r2, r3, #31
 8008c1c:	d437      	bmi.n	8008c8e <_printf_float+0x386>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c20:	ebaa 0903 	sub.w	r9, sl, r3
 8008c24:	9b06      	ldr	r3, [sp, #24]
 8008c26:	ebaa 0303 	sub.w	r3, sl, r3
 8008c2a:	4599      	cmp	r9, r3
 8008c2c:	bfa8      	it	ge
 8008c2e:	4699      	movge	r9, r3
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	dc33      	bgt.n	8008c9e <_printf_float+0x396>
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c3e:	f104 0b1a 	add.w	fp, r4, #26
 8008c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c44:	ebaa 0303 	sub.w	r3, sl, r3
 8008c48:	eba3 0309 	sub.w	r3, r3, r9
 8008c4c:	4543      	cmp	r3, r8
 8008c4e:	f77f af79 	ble.w	8008b44 <_printf_float+0x23c>
 8008c52:	2301      	movs	r3, #1
 8008c54:	465a      	mov	r2, fp
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f43f aeae 	beq.w	80089be <_printf_float+0xb6>
 8008c62:	f108 0801 	add.w	r8, r8, #1
 8008c66:	e7ec      	b.n	8008c42 <_printf_float+0x33a>
 8008c68:	4642      	mov	r2, r8
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	47b8      	blx	r7
 8008c70:	3001      	adds	r0, #1
 8008c72:	d1c2      	bne.n	8008bfa <_printf_float+0x2f2>
 8008c74:	e6a3      	b.n	80089be <_printf_float+0xb6>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	9206      	str	r2, [sp, #24]
 8008c7e:	47b8      	blx	r7
 8008c80:	3001      	adds	r0, #1
 8008c82:	f43f ae9c 	beq.w	80089be <_printf_float+0xb6>
 8008c86:	9a06      	ldr	r2, [sp, #24]
 8008c88:	f10b 0b01 	add.w	fp, fp, #1
 8008c8c:	e7bb      	b.n	8008c06 <_printf_float+0x2fe>
 8008c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d1c0      	bne.n	8008c1e <_printf_float+0x316>
 8008c9c:	e68f      	b.n	80089be <_printf_float+0xb6>
 8008c9e:	9a06      	ldr	r2, [sp, #24]
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	4442      	add	r2, r8
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	47b8      	blx	r7
 8008caa:	3001      	adds	r0, #1
 8008cac:	d1c3      	bne.n	8008c36 <_printf_float+0x32e>
 8008cae:	e686      	b.n	80089be <_printf_float+0xb6>
 8008cb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008cb4:	f1ba 0f01 	cmp.w	sl, #1
 8008cb8:	dc01      	bgt.n	8008cbe <_printf_float+0x3b6>
 8008cba:	07db      	lsls	r3, r3, #31
 8008cbc:	d536      	bpl.n	8008d2c <_printf_float+0x424>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4642      	mov	r2, r8
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b8      	blx	r7
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f43f ae78 	beq.w	80089be <_printf_float+0xb6>
 8008cce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	f43f ae70 	beq.w	80089be <_printf_float+0xb6>
 8008cde:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008cea:	f7f7 ff1d 	bl	8000b28 <__aeabi_dcmpeq>
 8008cee:	b9c0      	cbnz	r0, 8008d22 <_printf_float+0x41a>
 8008cf0:	4653      	mov	r3, sl
 8008cf2:	f108 0201 	add.w	r2, r8, #1
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	47b8      	blx	r7
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	d10c      	bne.n	8008d1a <_printf_float+0x412>
 8008d00:	e65d      	b.n	80089be <_printf_float+0xb6>
 8008d02:	2301      	movs	r3, #1
 8008d04:	465a      	mov	r2, fp
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f43f ae56 	beq.w	80089be <_printf_float+0xb6>
 8008d12:	f108 0801 	add.w	r8, r8, #1
 8008d16:	45d0      	cmp	r8, sl
 8008d18:	dbf3      	blt.n	8008d02 <_printf_float+0x3fa>
 8008d1a:	464b      	mov	r3, r9
 8008d1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d20:	e6df      	b.n	8008ae2 <_printf_float+0x1da>
 8008d22:	f04f 0800 	mov.w	r8, #0
 8008d26:	f104 0b1a 	add.w	fp, r4, #26
 8008d2a:	e7f4      	b.n	8008d16 <_printf_float+0x40e>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4642      	mov	r2, r8
 8008d30:	e7e1      	b.n	8008cf6 <_printf_float+0x3ee>
 8008d32:	2301      	movs	r3, #1
 8008d34:	464a      	mov	r2, r9
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae3e 	beq.w	80089be <_printf_float+0xb6>
 8008d42:	f108 0801 	add.w	r8, r8, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	dcf0      	bgt.n	8008d32 <_printf_float+0x42a>
 8008d50:	e6fc      	b.n	8008b4c <_printf_float+0x244>
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	f104 0919 	add.w	r9, r4, #25
 8008d5a:	e7f4      	b.n	8008d46 <_printf_float+0x43e>

08008d5c <_printf_common>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	4616      	mov	r6, r2
 8008d62:	4698      	mov	r8, r3
 8008d64:	688a      	ldr	r2, [r1, #8]
 8008d66:	690b      	ldr	r3, [r1, #16]
 8008d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	bfb8      	it	lt
 8008d70:	4613      	movlt	r3, r2
 8008d72:	6033      	str	r3, [r6, #0]
 8008d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d78:	4607      	mov	r7, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	b10a      	cbz	r2, 8008d82 <_printf_common+0x26>
 8008d7e:	3301      	adds	r3, #1
 8008d80:	6033      	str	r3, [r6, #0]
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	0699      	lsls	r1, r3, #26
 8008d86:	bf42      	ittt	mi
 8008d88:	6833      	ldrmi	r3, [r6, #0]
 8008d8a:	3302      	addmi	r3, #2
 8008d8c:	6033      	strmi	r3, [r6, #0]
 8008d8e:	6825      	ldr	r5, [r4, #0]
 8008d90:	f015 0506 	ands.w	r5, r5, #6
 8008d94:	d106      	bne.n	8008da4 <_printf_common+0x48>
 8008d96:	f104 0a19 	add.w	sl, r4, #25
 8008d9a:	68e3      	ldr	r3, [r4, #12]
 8008d9c:	6832      	ldr	r2, [r6, #0]
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	dc26      	bgt.n	8008df2 <_printf_common+0x96>
 8008da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008da8:	6822      	ldr	r2, [r4, #0]
 8008daa:	3b00      	subs	r3, #0
 8008dac:	bf18      	it	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	0692      	lsls	r2, r2, #26
 8008db2:	d42b      	bmi.n	8008e0c <_printf_common+0xb0>
 8008db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008db8:	4641      	mov	r1, r8
 8008dba:	4638      	mov	r0, r7
 8008dbc:	47c8      	blx	r9
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d01e      	beq.n	8008e00 <_printf_common+0xa4>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	6922      	ldr	r2, [r4, #16]
 8008dc6:	f003 0306 	and.w	r3, r3, #6
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	bf02      	ittt	eq
 8008dce:	68e5      	ldreq	r5, [r4, #12]
 8008dd0:	6833      	ldreq	r3, [r6, #0]
 8008dd2:	1aed      	subeq	r5, r5, r3
 8008dd4:	68a3      	ldr	r3, [r4, #8]
 8008dd6:	bf0c      	ite	eq
 8008dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ddc:	2500      	movne	r5, #0
 8008dde:	4293      	cmp	r3, r2
 8008de0:	bfc4      	itt	gt
 8008de2:	1a9b      	subgt	r3, r3, r2
 8008de4:	18ed      	addgt	r5, r5, r3
 8008de6:	2600      	movs	r6, #0
 8008de8:	341a      	adds	r4, #26
 8008dea:	42b5      	cmp	r5, r6
 8008dec:	d11a      	bne.n	8008e24 <_printf_common+0xc8>
 8008dee:	2000      	movs	r0, #0
 8008df0:	e008      	b.n	8008e04 <_printf_common+0xa8>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4652      	mov	r2, sl
 8008df6:	4641      	mov	r1, r8
 8008df8:	4638      	mov	r0, r7
 8008dfa:	47c8      	blx	r9
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d103      	bne.n	8008e08 <_printf_common+0xac>
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	3501      	adds	r5, #1
 8008e0a:	e7c6      	b.n	8008d9a <_printf_common+0x3e>
 8008e0c:	18e1      	adds	r1, r4, r3
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	2030      	movs	r0, #48	@ 0x30
 8008e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e16:	4422      	add	r2, r4
 8008e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e20:	3302      	adds	r3, #2
 8008e22:	e7c7      	b.n	8008db4 <_printf_common+0x58>
 8008e24:	2301      	movs	r3, #1
 8008e26:	4622      	mov	r2, r4
 8008e28:	4641      	mov	r1, r8
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c8      	blx	r9
 8008e2e:	3001      	adds	r0, #1
 8008e30:	d0e6      	beq.n	8008e00 <_printf_common+0xa4>
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7d9      	b.n	8008dea <_printf_common+0x8e>
	...

08008e38 <_printf_i>:
 8008e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	7e0f      	ldrb	r7, [r1, #24]
 8008e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e40:	2f78      	cmp	r7, #120	@ 0x78
 8008e42:	4691      	mov	r9, r2
 8008e44:	4680      	mov	r8, r0
 8008e46:	460c      	mov	r4, r1
 8008e48:	469a      	mov	sl, r3
 8008e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e4e:	d807      	bhi.n	8008e60 <_printf_i+0x28>
 8008e50:	2f62      	cmp	r7, #98	@ 0x62
 8008e52:	d80a      	bhi.n	8008e6a <_printf_i+0x32>
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	f000 80d1 	beq.w	8008ffc <_printf_i+0x1c4>
 8008e5a:	2f58      	cmp	r7, #88	@ 0x58
 8008e5c:	f000 80b8 	beq.w	8008fd0 <_printf_i+0x198>
 8008e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e68:	e03a      	b.n	8008ee0 <_printf_i+0xa8>
 8008e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e6e:	2b15      	cmp	r3, #21
 8008e70:	d8f6      	bhi.n	8008e60 <_printf_i+0x28>
 8008e72:	a101      	add	r1, pc, #4	@ (adr r1, 8008e78 <_printf_i+0x40>)
 8008e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e78:	08008ed1 	.word	0x08008ed1
 8008e7c:	08008ee5 	.word	0x08008ee5
 8008e80:	08008e61 	.word	0x08008e61
 8008e84:	08008e61 	.word	0x08008e61
 8008e88:	08008e61 	.word	0x08008e61
 8008e8c:	08008e61 	.word	0x08008e61
 8008e90:	08008ee5 	.word	0x08008ee5
 8008e94:	08008e61 	.word	0x08008e61
 8008e98:	08008e61 	.word	0x08008e61
 8008e9c:	08008e61 	.word	0x08008e61
 8008ea0:	08008e61 	.word	0x08008e61
 8008ea4:	08008fe3 	.word	0x08008fe3
 8008ea8:	08008f0f 	.word	0x08008f0f
 8008eac:	08008f9d 	.word	0x08008f9d
 8008eb0:	08008e61 	.word	0x08008e61
 8008eb4:	08008e61 	.word	0x08008e61
 8008eb8:	08009005 	.word	0x08009005
 8008ebc:	08008e61 	.word	0x08008e61
 8008ec0:	08008f0f 	.word	0x08008f0f
 8008ec4:	08008e61 	.word	0x08008e61
 8008ec8:	08008e61 	.word	0x08008e61
 8008ecc:	08008fa5 	.word	0x08008fa5
 8008ed0:	6833      	ldr	r3, [r6, #0]
 8008ed2:	1d1a      	adds	r2, r3, #4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6032      	str	r2, [r6, #0]
 8008ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e09c      	b.n	800901e <_printf_i+0x1e6>
 8008ee4:	6833      	ldr	r3, [r6, #0]
 8008ee6:	6820      	ldr	r0, [r4, #0]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	6031      	str	r1, [r6, #0]
 8008eec:	0606      	lsls	r6, r0, #24
 8008eee:	d501      	bpl.n	8008ef4 <_printf_i+0xbc>
 8008ef0:	681d      	ldr	r5, [r3, #0]
 8008ef2:	e003      	b.n	8008efc <_printf_i+0xc4>
 8008ef4:	0645      	lsls	r5, r0, #25
 8008ef6:	d5fb      	bpl.n	8008ef0 <_printf_i+0xb8>
 8008ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008efc:	2d00      	cmp	r5, #0
 8008efe:	da03      	bge.n	8008f08 <_printf_i+0xd0>
 8008f00:	232d      	movs	r3, #45	@ 0x2d
 8008f02:	426d      	negs	r5, r5
 8008f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f08:	4858      	ldr	r0, [pc, #352]	@ (800906c <_printf_i+0x234>)
 8008f0a:	230a      	movs	r3, #10
 8008f0c:	e011      	b.n	8008f32 <_printf_i+0xfa>
 8008f0e:	6821      	ldr	r1, [r4, #0]
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	0608      	lsls	r0, r1, #24
 8008f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f18:	d402      	bmi.n	8008f20 <_printf_i+0xe8>
 8008f1a:	0649      	lsls	r1, r1, #25
 8008f1c:	bf48      	it	mi
 8008f1e:	b2ad      	uxthmi	r5, r5
 8008f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f22:	4852      	ldr	r0, [pc, #328]	@ (800906c <_printf_i+0x234>)
 8008f24:	6033      	str	r3, [r6, #0]
 8008f26:	bf14      	ite	ne
 8008f28:	230a      	movne	r3, #10
 8008f2a:	2308      	moveq	r3, #8
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f32:	6866      	ldr	r6, [r4, #4]
 8008f34:	60a6      	str	r6, [r4, #8]
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	db05      	blt.n	8008f46 <_printf_i+0x10e>
 8008f3a:	6821      	ldr	r1, [r4, #0]
 8008f3c:	432e      	orrs	r6, r5
 8008f3e:	f021 0104 	bic.w	r1, r1, #4
 8008f42:	6021      	str	r1, [r4, #0]
 8008f44:	d04b      	beq.n	8008fde <_printf_i+0x1a6>
 8008f46:	4616      	mov	r6, r2
 8008f48:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f4c:	fb03 5711 	mls	r7, r3, r1, r5
 8008f50:	5dc7      	ldrb	r7, [r0, r7]
 8008f52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f56:	462f      	mov	r7, r5
 8008f58:	42bb      	cmp	r3, r7
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	d9f4      	bls.n	8008f48 <_printf_i+0x110>
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d10b      	bne.n	8008f7a <_printf_i+0x142>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	07df      	lsls	r7, r3, #31
 8008f66:	d508      	bpl.n	8008f7a <_printf_i+0x142>
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	6861      	ldr	r1, [r4, #4]
 8008f6c:	4299      	cmp	r1, r3
 8008f6e:	bfde      	ittt	le
 8008f70:	2330      	movle	r3, #48	@ 0x30
 8008f72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f7a:	1b92      	subs	r2, r2, r6
 8008f7c:	6122      	str	r2, [r4, #16]
 8008f7e:	f8cd a000 	str.w	sl, [sp]
 8008f82:	464b      	mov	r3, r9
 8008f84:	aa03      	add	r2, sp, #12
 8008f86:	4621      	mov	r1, r4
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f7ff fee7 	bl	8008d5c <_printf_common>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d14a      	bne.n	8009028 <_printf_i+0x1f0>
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f96:	b004      	add	sp, #16
 8008f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	f043 0320 	orr.w	r3, r3, #32
 8008fa2:	6023      	str	r3, [r4, #0]
 8008fa4:	4832      	ldr	r0, [pc, #200]	@ (8009070 <_printf_i+0x238>)
 8008fa6:	2778      	movs	r7, #120	@ 0x78
 8008fa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	6831      	ldr	r1, [r6, #0]
 8008fb0:	061f      	lsls	r7, r3, #24
 8008fb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fb6:	d402      	bmi.n	8008fbe <_printf_i+0x186>
 8008fb8:	065f      	lsls	r7, r3, #25
 8008fba:	bf48      	it	mi
 8008fbc:	b2ad      	uxthmi	r5, r5
 8008fbe:	6031      	str	r1, [r6, #0]
 8008fc0:	07d9      	lsls	r1, r3, #31
 8008fc2:	bf44      	itt	mi
 8008fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8008fc8:	6023      	strmi	r3, [r4, #0]
 8008fca:	b11d      	cbz	r5, 8008fd4 <_printf_i+0x19c>
 8008fcc:	2310      	movs	r3, #16
 8008fce:	e7ad      	b.n	8008f2c <_printf_i+0xf4>
 8008fd0:	4826      	ldr	r0, [pc, #152]	@ (800906c <_printf_i+0x234>)
 8008fd2:	e7e9      	b.n	8008fa8 <_printf_i+0x170>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	f023 0320 	bic.w	r3, r3, #32
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	e7f6      	b.n	8008fcc <_printf_i+0x194>
 8008fde:	4616      	mov	r6, r2
 8008fe0:	e7bd      	b.n	8008f5e <_printf_i+0x126>
 8008fe2:	6833      	ldr	r3, [r6, #0]
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	6961      	ldr	r1, [r4, #20]
 8008fe8:	1d18      	adds	r0, r3, #4
 8008fea:	6030      	str	r0, [r6, #0]
 8008fec:	062e      	lsls	r6, r5, #24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	d501      	bpl.n	8008ff6 <_printf_i+0x1be>
 8008ff2:	6019      	str	r1, [r3, #0]
 8008ff4:	e002      	b.n	8008ffc <_printf_i+0x1c4>
 8008ff6:	0668      	lsls	r0, r5, #25
 8008ff8:	d5fb      	bpl.n	8008ff2 <_printf_i+0x1ba>
 8008ffa:	8019      	strh	r1, [r3, #0]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	6123      	str	r3, [r4, #16]
 8009000:	4616      	mov	r6, r2
 8009002:	e7bc      	b.n	8008f7e <_printf_i+0x146>
 8009004:	6833      	ldr	r3, [r6, #0]
 8009006:	1d1a      	adds	r2, r3, #4
 8009008:	6032      	str	r2, [r6, #0]
 800900a:	681e      	ldr	r6, [r3, #0]
 800900c:	6862      	ldr	r2, [r4, #4]
 800900e:	2100      	movs	r1, #0
 8009010:	4630      	mov	r0, r6
 8009012:	f7f7 f90d 	bl	8000230 <memchr>
 8009016:	b108      	cbz	r0, 800901c <_printf_i+0x1e4>
 8009018:	1b80      	subs	r0, r0, r6
 800901a:	6060      	str	r0, [r4, #4]
 800901c:	6863      	ldr	r3, [r4, #4]
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	2300      	movs	r3, #0
 8009022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009026:	e7aa      	b.n	8008f7e <_printf_i+0x146>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	4632      	mov	r2, r6
 800902c:	4649      	mov	r1, r9
 800902e:	4640      	mov	r0, r8
 8009030:	47d0      	blx	sl
 8009032:	3001      	adds	r0, #1
 8009034:	d0ad      	beq.n	8008f92 <_printf_i+0x15a>
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	079b      	lsls	r3, r3, #30
 800903a:	d413      	bmi.n	8009064 <_printf_i+0x22c>
 800903c:	68e0      	ldr	r0, [r4, #12]
 800903e:	9b03      	ldr	r3, [sp, #12]
 8009040:	4298      	cmp	r0, r3
 8009042:	bfb8      	it	lt
 8009044:	4618      	movlt	r0, r3
 8009046:	e7a6      	b.n	8008f96 <_printf_i+0x15e>
 8009048:	2301      	movs	r3, #1
 800904a:	4632      	mov	r2, r6
 800904c:	4649      	mov	r1, r9
 800904e:	4640      	mov	r0, r8
 8009050:	47d0      	blx	sl
 8009052:	3001      	adds	r0, #1
 8009054:	d09d      	beq.n	8008f92 <_printf_i+0x15a>
 8009056:	3501      	adds	r5, #1
 8009058:	68e3      	ldr	r3, [r4, #12]
 800905a:	9903      	ldr	r1, [sp, #12]
 800905c:	1a5b      	subs	r3, r3, r1
 800905e:	42ab      	cmp	r3, r5
 8009060:	dcf2      	bgt.n	8009048 <_printf_i+0x210>
 8009062:	e7eb      	b.n	800903c <_printf_i+0x204>
 8009064:	2500      	movs	r5, #0
 8009066:	f104 0619 	add.w	r6, r4, #25
 800906a:	e7f5      	b.n	8009058 <_printf_i+0x220>
 800906c:	0800bb4a 	.word	0x0800bb4a
 8009070:	0800bb5b 	.word	0x0800bb5b

08009074 <std>:
 8009074:	2300      	movs	r3, #0
 8009076:	b510      	push	{r4, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	e9c0 3300 	strd	r3, r3, [r0]
 800907e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009082:	6083      	str	r3, [r0, #8]
 8009084:	8181      	strh	r1, [r0, #12]
 8009086:	6643      	str	r3, [r0, #100]	@ 0x64
 8009088:	81c2      	strh	r2, [r0, #14]
 800908a:	6183      	str	r3, [r0, #24]
 800908c:	4619      	mov	r1, r3
 800908e:	2208      	movs	r2, #8
 8009090:	305c      	adds	r0, #92	@ 0x5c
 8009092:	f000 fa53 	bl	800953c <memset>
 8009096:	4b0d      	ldr	r3, [pc, #52]	@ (80090cc <std+0x58>)
 8009098:	6263      	str	r3, [r4, #36]	@ 0x24
 800909a:	4b0d      	ldr	r3, [pc, #52]	@ (80090d0 <std+0x5c>)
 800909c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800909e:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <std+0x60>)
 80090a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090a2:	4b0d      	ldr	r3, [pc, #52]	@ (80090d8 <std+0x64>)
 80090a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80090a6:	4b0d      	ldr	r3, [pc, #52]	@ (80090dc <std+0x68>)
 80090a8:	6224      	str	r4, [r4, #32]
 80090aa:	429c      	cmp	r4, r3
 80090ac:	d006      	beq.n	80090bc <std+0x48>
 80090ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090b2:	4294      	cmp	r4, r2
 80090b4:	d002      	beq.n	80090bc <std+0x48>
 80090b6:	33d0      	adds	r3, #208	@ 0xd0
 80090b8:	429c      	cmp	r4, r3
 80090ba:	d105      	bne.n	80090c8 <std+0x54>
 80090bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80090c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c4:	f000 bb14 	b.w	80096f0 <__retarget_lock_init_recursive>
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	bf00      	nop
 80090cc:	08009315 	.word	0x08009315
 80090d0:	08009337 	.word	0x08009337
 80090d4:	0800936f 	.word	0x0800936f
 80090d8:	08009393 	.word	0x08009393
 80090dc:	2000622c 	.word	0x2000622c

080090e0 <stdio_exit_handler>:
 80090e0:	4a02      	ldr	r2, [pc, #8]	@ (80090ec <stdio_exit_handler+0xc>)
 80090e2:	4903      	ldr	r1, [pc, #12]	@ (80090f0 <stdio_exit_handler+0x10>)
 80090e4:	4803      	ldr	r0, [pc, #12]	@ (80090f4 <stdio_exit_handler+0x14>)
 80090e6:	f000 b8c1 	b.w	800926c <_fwalk_sglue>
 80090ea:	bf00      	nop
 80090ec:	20000064 	.word	0x20000064
 80090f0:	0800b075 	.word	0x0800b075
 80090f4:	20000074 	.word	0x20000074

080090f8 <cleanup_stdio>:
 80090f8:	6841      	ldr	r1, [r0, #4]
 80090fa:	4b0c      	ldr	r3, [pc, #48]	@ (800912c <cleanup_stdio+0x34>)
 80090fc:	4299      	cmp	r1, r3
 80090fe:	b510      	push	{r4, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	d001      	beq.n	8009108 <cleanup_stdio+0x10>
 8009104:	f001 ffb6 	bl	800b074 <_fflush_r>
 8009108:	68a1      	ldr	r1, [r4, #8]
 800910a:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <cleanup_stdio+0x38>)
 800910c:	4299      	cmp	r1, r3
 800910e:	d002      	beq.n	8009116 <cleanup_stdio+0x1e>
 8009110:	4620      	mov	r0, r4
 8009112:	f001 ffaf 	bl	800b074 <_fflush_r>
 8009116:	68e1      	ldr	r1, [r4, #12]
 8009118:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <cleanup_stdio+0x3c>)
 800911a:	4299      	cmp	r1, r3
 800911c:	d004      	beq.n	8009128 <cleanup_stdio+0x30>
 800911e:	4620      	mov	r0, r4
 8009120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009124:	f001 bfa6 	b.w	800b074 <_fflush_r>
 8009128:	bd10      	pop	{r4, pc}
 800912a:	bf00      	nop
 800912c:	2000622c 	.word	0x2000622c
 8009130:	20006294 	.word	0x20006294
 8009134:	200062fc 	.word	0x200062fc

08009138 <global_stdio_init.part.0>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4b0b      	ldr	r3, [pc, #44]	@ (8009168 <global_stdio_init.part.0+0x30>)
 800913c:	4c0b      	ldr	r4, [pc, #44]	@ (800916c <global_stdio_init.part.0+0x34>)
 800913e:	4a0c      	ldr	r2, [pc, #48]	@ (8009170 <global_stdio_init.part.0+0x38>)
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	4620      	mov	r0, r4
 8009144:	2200      	movs	r2, #0
 8009146:	2104      	movs	r1, #4
 8009148:	f7ff ff94 	bl	8009074 <std>
 800914c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009150:	2201      	movs	r2, #1
 8009152:	2109      	movs	r1, #9
 8009154:	f7ff ff8e 	bl	8009074 <std>
 8009158:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800915c:	2202      	movs	r2, #2
 800915e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009162:	2112      	movs	r1, #18
 8009164:	f7ff bf86 	b.w	8009074 <std>
 8009168:	20006364 	.word	0x20006364
 800916c:	2000622c 	.word	0x2000622c
 8009170:	080090e1 	.word	0x080090e1

08009174 <__sfp_lock_acquire>:
 8009174:	4801      	ldr	r0, [pc, #4]	@ (800917c <__sfp_lock_acquire+0x8>)
 8009176:	f000 babc 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	2000636d 	.word	0x2000636d

08009180 <__sfp_lock_release>:
 8009180:	4801      	ldr	r0, [pc, #4]	@ (8009188 <__sfp_lock_release+0x8>)
 8009182:	f000 bab7 	b.w	80096f4 <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	2000636d 	.word	0x2000636d

0800918c <__sinit>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4604      	mov	r4, r0
 8009190:	f7ff fff0 	bl	8009174 <__sfp_lock_acquire>
 8009194:	6a23      	ldr	r3, [r4, #32]
 8009196:	b11b      	cbz	r3, 80091a0 <__sinit+0x14>
 8009198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800919c:	f7ff bff0 	b.w	8009180 <__sfp_lock_release>
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <__sinit+0x28>)
 80091a2:	6223      	str	r3, [r4, #32]
 80091a4:	4b04      	ldr	r3, [pc, #16]	@ (80091b8 <__sinit+0x2c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1f5      	bne.n	8009198 <__sinit+0xc>
 80091ac:	f7ff ffc4 	bl	8009138 <global_stdio_init.part.0>
 80091b0:	e7f2      	b.n	8009198 <__sinit+0xc>
 80091b2:	bf00      	nop
 80091b4:	080090f9 	.word	0x080090f9
 80091b8:	20006364 	.word	0x20006364

080091bc <_fputs_r>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	460d      	mov	r5, r1
 80091c0:	4614      	mov	r4, r2
 80091c2:	4606      	mov	r6, r0
 80091c4:	b118      	cbz	r0, 80091ce <_fputs_r+0x12>
 80091c6:	6a03      	ldr	r3, [r0, #32]
 80091c8:	b90b      	cbnz	r3, 80091ce <_fputs_r+0x12>
 80091ca:	f7ff ffdf 	bl	800918c <__sinit>
 80091ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d0:	07d9      	lsls	r1, r3, #31
 80091d2:	d405      	bmi.n	80091e0 <_fputs_r+0x24>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	059a      	lsls	r2, r3, #22
 80091d8:	d402      	bmi.n	80091e0 <_fputs_r+0x24>
 80091da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091dc:	f000 fa89 	bl	80096f2 <__retarget_lock_acquire_recursive>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	071b      	lsls	r3, r3, #28
 80091e4:	d501      	bpl.n	80091ea <_fputs_r+0x2e>
 80091e6:	6923      	ldr	r3, [r4, #16]
 80091e8:	bb73      	cbnz	r3, 8009248 <_fputs_r+0x8c>
 80091ea:	4621      	mov	r1, r4
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 f94f 	bl	8009490 <__swsetup_r>
 80091f2:	b348      	cbz	r0, 8009248 <_fputs_r+0x8c>
 80091f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f6:	07da      	lsls	r2, r3, #31
 80091f8:	d402      	bmi.n	8009200 <_fputs_r+0x44>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	059b      	lsls	r3, r3, #22
 80091fe:	d529      	bpl.n	8009254 <_fputs_r+0x98>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009204:	e018      	b.n	8009238 <_fputs_r+0x7c>
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	3b01      	subs	r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	60a3      	str	r3, [r4, #8]
 800920e:	da04      	bge.n	800921a <_fputs_r+0x5e>
 8009210:	69a2      	ldr	r2, [r4, #24]
 8009212:	4293      	cmp	r3, r2
 8009214:	db11      	blt.n	800923a <_fputs_r+0x7e>
 8009216:	290a      	cmp	r1, #10
 8009218:	d00f      	beq.n	800923a <_fputs_r+0x7e>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	6022      	str	r2, [r4, #0]
 8009220:	7019      	strb	r1, [r3, #0]
 8009222:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8009226:	2900      	cmp	r1, #0
 8009228:	d1ed      	bne.n	8009206 <_fputs_r+0x4a>
 800922a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800922c:	07d8      	lsls	r0, r3, #31
 800922e:	d402      	bmi.n	8009236 <_fputs_r+0x7a>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	0599      	lsls	r1, r3, #22
 8009234:	d50a      	bpl.n	800924c <_fputs_r+0x90>
 8009236:	2000      	movs	r0, #0
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	4622      	mov	r2, r4
 800923c:	4630      	mov	r0, r6
 800923e:	f000 f8e9 	bl	8009414 <__swbuf_r>
 8009242:	3001      	adds	r0, #1
 8009244:	d1ed      	bne.n	8009222 <_fputs_r+0x66>
 8009246:	e7d5      	b.n	80091f4 <_fputs_r+0x38>
 8009248:	3d01      	subs	r5, #1
 800924a:	e7ea      	b.n	8009222 <_fputs_r+0x66>
 800924c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800924e:	f000 fa51 	bl	80096f4 <__retarget_lock_release_recursive>
 8009252:	e7f0      	b.n	8009236 <_fputs_r+0x7a>
 8009254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009256:	f000 fa4d 	bl	80096f4 <__retarget_lock_release_recursive>
 800925a:	e7d1      	b.n	8009200 <_fputs_r+0x44>

0800925c <fputs>:
 800925c:	4b02      	ldr	r3, [pc, #8]	@ (8009268 <fputs+0xc>)
 800925e:	460a      	mov	r2, r1
 8009260:	4601      	mov	r1, r0
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	f7ff bfaa 	b.w	80091bc <_fputs_r>
 8009268:	20000070 	.word	0x20000070

0800926c <_fwalk_sglue>:
 800926c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009270:	4607      	mov	r7, r0
 8009272:	4688      	mov	r8, r1
 8009274:	4614      	mov	r4, r2
 8009276:	2600      	movs	r6, #0
 8009278:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800927c:	f1b9 0901 	subs.w	r9, r9, #1
 8009280:	d505      	bpl.n	800928e <_fwalk_sglue+0x22>
 8009282:	6824      	ldr	r4, [r4, #0]
 8009284:	2c00      	cmp	r4, #0
 8009286:	d1f7      	bne.n	8009278 <_fwalk_sglue+0xc>
 8009288:	4630      	mov	r0, r6
 800928a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800928e:	89ab      	ldrh	r3, [r5, #12]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d907      	bls.n	80092a4 <_fwalk_sglue+0x38>
 8009294:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009298:	3301      	adds	r3, #1
 800929a:	d003      	beq.n	80092a4 <_fwalk_sglue+0x38>
 800929c:	4629      	mov	r1, r5
 800929e:	4638      	mov	r0, r7
 80092a0:	47c0      	blx	r8
 80092a2:	4306      	orrs	r6, r0
 80092a4:	3568      	adds	r5, #104	@ 0x68
 80092a6:	e7e9      	b.n	800927c <_fwalk_sglue+0x10>

080092a8 <sniprintf>:
 80092a8:	b40c      	push	{r2, r3}
 80092aa:	b530      	push	{r4, r5, lr}
 80092ac:	4b18      	ldr	r3, [pc, #96]	@ (8009310 <sniprintf+0x68>)
 80092ae:	1e0c      	subs	r4, r1, #0
 80092b0:	681d      	ldr	r5, [r3, #0]
 80092b2:	b09d      	sub	sp, #116	@ 0x74
 80092b4:	da08      	bge.n	80092c8 <sniprintf+0x20>
 80092b6:	238b      	movs	r3, #139	@ 0x8b
 80092b8:	602b      	str	r3, [r5, #0]
 80092ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092be:	b01d      	add	sp, #116	@ 0x74
 80092c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092c4:	b002      	add	sp, #8
 80092c6:	4770      	bx	lr
 80092c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092d0:	f04f 0300 	mov.w	r3, #0
 80092d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80092d6:	bf14      	ite	ne
 80092d8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80092dc:	4623      	moveq	r3, r4
 80092de:	9304      	str	r3, [sp, #16]
 80092e0:	9307      	str	r3, [sp, #28]
 80092e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092e6:	9002      	str	r0, [sp, #8]
 80092e8:	9006      	str	r0, [sp, #24]
 80092ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092f0:	ab21      	add	r3, sp, #132	@ 0x84
 80092f2:	a902      	add	r1, sp, #8
 80092f4:	4628      	mov	r0, r5
 80092f6:	9301      	str	r3, [sp, #4]
 80092f8:	f001 fd3c 	bl	800ad74 <_svfiprintf_r>
 80092fc:	1c43      	adds	r3, r0, #1
 80092fe:	bfbc      	itt	lt
 8009300:	238b      	movlt	r3, #139	@ 0x8b
 8009302:	602b      	strlt	r3, [r5, #0]
 8009304:	2c00      	cmp	r4, #0
 8009306:	d0da      	beq.n	80092be <sniprintf+0x16>
 8009308:	9b02      	ldr	r3, [sp, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
 800930e:	e7d6      	b.n	80092be <sniprintf+0x16>
 8009310:	20000070 	.word	0x20000070

08009314 <__sread>:
 8009314:	b510      	push	{r4, lr}
 8009316:	460c      	mov	r4, r1
 8009318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931c:	f000 f99a 	bl	8009654 <_read_r>
 8009320:	2800      	cmp	r0, #0
 8009322:	bfab      	itete	ge
 8009324:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009326:	89a3      	ldrhlt	r3, [r4, #12]
 8009328:	181b      	addge	r3, r3, r0
 800932a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800932e:	bfac      	ite	ge
 8009330:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009332:	81a3      	strhlt	r3, [r4, #12]
 8009334:	bd10      	pop	{r4, pc}

08009336 <__swrite>:
 8009336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	461f      	mov	r7, r3
 800933c:	898b      	ldrh	r3, [r1, #12]
 800933e:	05db      	lsls	r3, r3, #23
 8009340:	4605      	mov	r5, r0
 8009342:	460c      	mov	r4, r1
 8009344:	4616      	mov	r6, r2
 8009346:	d505      	bpl.n	8009354 <__swrite+0x1e>
 8009348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934c:	2302      	movs	r3, #2
 800934e:	2200      	movs	r2, #0
 8009350:	f000 f96e 	bl	8009630 <_lseek_r>
 8009354:	89a3      	ldrh	r3, [r4, #12]
 8009356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	4632      	mov	r2, r6
 8009362:	463b      	mov	r3, r7
 8009364:	4628      	mov	r0, r5
 8009366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800936a:	f000 b985 	b.w	8009678 <_write_r>

0800936e <__sseek>:
 800936e:	b510      	push	{r4, lr}
 8009370:	460c      	mov	r4, r1
 8009372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009376:	f000 f95b 	bl	8009630 <_lseek_r>
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	bf15      	itete	ne
 8009380:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009382:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009386:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800938a:	81a3      	strheq	r3, [r4, #12]
 800938c:	bf18      	it	ne
 800938e:	81a3      	strhne	r3, [r4, #12]
 8009390:	bd10      	pop	{r4, pc}

08009392 <__sclose>:
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 b8dd 	b.w	8009554 <_close_r>

0800939a <_vsniprintf_r>:
 800939a:	b530      	push	{r4, r5, lr}
 800939c:	4614      	mov	r4, r2
 800939e:	2c00      	cmp	r4, #0
 80093a0:	b09b      	sub	sp, #108	@ 0x6c
 80093a2:	4605      	mov	r5, r0
 80093a4:	461a      	mov	r2, r3
 80093a6:	da05      	bge.n	80093b4 <_vsniprintf_r+0x1a>
 80093a8:	238b      	movs	r3, #139	@ 0x8b
 80093aa:	6003      	str	r3, [r0, #0]
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093b0:	b01b      	add	sp, #108	@ 0x6c
 80093b2:	bd30      	pop	{r4, r5, pc}
 80093b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80093b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80093c2:	bf14      	ite	ne
 80093c4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80093c8:	4623      	moveq	r3, r4
 80093ca:	9302      	str	r3, [sp, #8]
 80093cc:	9305      	str	r3, [sp, #20]
 80093ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093d2:	9100      	str	r1, [sp, #0]
 80093d4:	9104      	str	r1, [sp, #16]
 80093d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80093da:	4669      	mov	r1, sp
 80093dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80093de:	f001 fcc9 	bl	800ad74 <_svfiprintf_r>
 80093e2:	1c43      	adds	r3, r0, #1
 80093e4:	bfbc      	itt	lt
 80093e6:	238b      	movlt	r3, #139	@ 0x8b
 80093e8:	602b      	strlt	r3, [r5, #0]
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	d0e0      	beq.n	80093b0 <_vsniprintf_r+0x16>
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
 80093f4:	e7dc      	b.n	80093b0 <_vsniprintf_r+0x16>
	...

080093f8 <vsniprintf>:
 80093f8:	b507      	push	{r0, r1, r2, lr}
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	460a      	mov	r2, r1
 8009400:	4601      	mov	r1, r0
 8009402:	4803      	ldr	r0, [pc, #12]	@ (8009410 <vsniprintf+0x18>)
 8009404:	6800      	ldr	r0, [r0, #0]
 8009406:	f7ff ffc8 	bl	800939a <_vsniprintf_r>
 800940a:	b003      	add	sp, #12
 800940c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009410:	20000070 	.word	0x20000070

08009414 <__swbuf_r>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	460e      	mov	r6, r1
 8009418:	4614      	mov	r4, r2
 800941a:	4605      	mov	r5, r0
 800941c:	b118      	cbz	r0, 8009426 <__swbuf_r+0x12>
 800941e:	6a03      	ldr	r3, [r0, #32]
 8009420:	b90b      	cbnz	r3, 8009426 <__swbuf_r+0x12>
 8009422:	f7ff feb3 	bl	800918c <__sinit>
 8009426:	69a3      	ldr	r3, [r4, #24]
 8009428:	60a3      	str	r3, [r4, #8]
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	071a      	lsls	r2, r3, #28
 800942e:	d501      	bpl.n	8009434 <__swbuf_r+0x20>
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	b943      	cbnz	r3, 8009446 <__swbuf_r+0x32>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f000 f82a 	bl	8009490 <__swsetup_r>
 800943c:	b118      	cbz	r0, 8009446 <__swbuf_r+0x32>
 800943e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009442:	4638      	mov	r0, r7
 8009444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	6922      	ldr	r2, [r4, #16]
 800944a:	1a98      	subs	r0, r3, r2
 800944c:	6963      	ldr	r3, [r4, #20]
 800944e:	b2f6      	uxtb	r6, r6
 8009450:	4283      	cmp	r3, r0
 8009452:	4637      	mov	r7, r6
 8009454:	dc05      	bgt.n	8009462 <__swbuf_r+0x4e>
 8009456:	4621      	mov	r1, r4
 8009458:	4628      	mov	r0, r5
 800945a:	f001 fe0b 	bl	800b074 <_fflush_r>
 800945e:	2800      	cmp	r0, #0
 8009460:	d1ed      	bne.n	800943e <__swbuf_r+0x2a>
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	3b01      	subs	r3, #1
 8009466:	60a3      	str	r3, [r4, #8]
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	6022      	str	r2, [r4, #0]
 800946e:	701e      	strb	r6, [r3, #0]
 8009470:	6962      	ldr	r2, [r4, #20]
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	429a      	cmp	r2, r3
 8009476:	d004      	beq.n	8009482 <__swbuf_r+0x6e>
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	07db      	lsls	r3, r3, #31
 800947c:	d5e1      	bpl.n	8009442 <__swbuf_r+0x2e>
 800947e:	2e0a      	cmp	r6, #10
 8009480:	d1df      	bne.n	8009442 <__swbuf_r+0x2e>
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f001 fdf5 	bl	800b074 <_fflush_r>
 800948a:	2800      	cmp	r0, #0
 800948c:	d0d9      	beq.n	8009442 <__swbuf_r+0x2e>
 800948e:	e7d6      	b.n	800943e <__swbuf_r+0x2a>

08009490 <__swsetup_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4b29      	ldr	r3, [pc, #164]	@ (8009538 <__swsetup_r+0xa8>)
 8009494:	4605      	mov	r5, r0
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	460c      	mov	r4, r1
 800949a:	b118      	cbz	r0, 80094a4 <__swsetup_r+0x14>
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b90b      	cbnz	r3, 80094a4 <__swsetup_r+0x14>
 80094a0:	f7ff fe74 	bl	800918c <__sinit>
 80094a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a8:	0719      	lsls	r1, r3, #28
 80094aa:	d422      	bmi.n	80094f2 <__swsetup_r+0x62>
 80094ac:	06da      	lsls	r2, r3, #27
 80094ae:	d407      	bmi.n	80094c0 <__swsetup_r+0x30>
 80094b0:	2209      	movs	r2, #9
 80094b2:	602a      	str	r2, [r5, #0]
 80094b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094be:	e033      	b.n	8009528 <__swsetup_r+0x98>
 80094c0:	0758      	lsls	r0, r3, #29
 80094c2:	d512      	bpl.n	80094ea <__swsetup_r+0x5a>
 80094c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094c6:	b141      	cbz	r1, 80094da <__swsetup_r+0x4a>
 80094c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094cc:	4299      	cmp	r1, r3
 80094ce:	d002      	beq.n	80094d6 <__swsetup_r+0x46>
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 ff79 	bl	800a3c8 <_free_r>
 80094d6:	2300      	movs	r3, #0
 80094d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	2300      	movs	r3, #0
 80094e4:	6063      	str	r3, [r4, #4]
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f043 0308 	orr.w	r3, r3, #8
 80094f0:	81a3      	strh	r3, [r4, #12]
 80094f2:	6923      	ldr	r3, [r4, #16]
 80094f4:	b94b      	cbnz	r3, 800950a <__swsetup_r+0x7a>
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009500:	d003      	beq.n	800950a <__swsetup_r+0x7a>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f001 fe03 	bl	800b110 <__smakebuf_r>
 800950a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800950e:	f013 0201 	ands.w	r2, r3, #1
 8009512:	d00a      	beq.n	800952a <__swsetup_r+0x9a>
 8009514:	2200      	movs	r2, #0
 8009516:	60a2      	str	r2, [r4, #8]
 8009518:	6962      	ldr	r2, [r4, #20]
 800951a:	4252      	negs	r2, r2
 800951c:	61a2      	str	r2, [r4, #24]
 800951e:	6922      	ldr	r2, [r4, #16]
 8009520:	b942      	cbnz	r2, 8009534 <__swsetup_r+0xa4>
 8009522:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009526:	d1c5      	bne.n	80094b4 <__swsetup_r+0x24>
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	0799      	lsls	r1, r3, #30
 800952c:	bf58      	it	pl
 800952e:	6962      	ldrpl	r2, [r4, #20]
 8009530:	60a2      	str	r2, [r4, #8]
 8009532:	e7f4      	b.n	800951e <__swsetup_r+0x8e>
 8009534:	2000      	movs	r0, #0
 8009536:	e7f7      	b.n	8009528 <__swsetup_r+0x98>
 8009538:	20000070 	.word	0x20000070

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <_localeconv_r>:
 800954c:	4800      	ldr	r0, [pc, #0]	@ (8009550 <_localeconv_r+0x4>)
 800954e:	4770      	bx	lr
 8009550:	200001b0 	.word	0x200001b0

08009554 <_close_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	@ (8009570 <_close_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f8 fdb8 	bl	80020d4 <_close>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_close_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_close_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20006368 	.word	0x20006368

08009574 <_reclaim_reent>:
 8009574:	4b2d      	ldr	r3, [pc, #180]	@ (800962c <_reclaim_reent+0xb8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4283      	cmp	r3, r0
 800957a:	b570      	push	{r4, r5, r6, lr}
 800957c:	4604      	mov	r4, r0
 800957e:	d053      	beq.n	8009628 <_reclaim_reent+0xb4>
 8009580:	69c3      	ldr	r3, [r0, #28]
 8009582:	b31b      	cbz	r3, 80095cc <_reclaim_reent+0x58>
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	b163      	cbz	r3, 80095a2 <_reclaim_reent+0x2e>
 8009588:	2500      	movs	r5, #0
 800958a:	69e3      	ldr	r3, [r4, #28]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	5959      	ldr	r1, [r3, r5]
 8009590:	b9b1      	cbnz	r1, 80095c0 <_reclaim_reent+0x4c>
 8009592:	3504      	adds	r5, #4
 8009594:	2d80      	cmp	r5, #128	@ 0x80
 8009596:	d1f8      	bne.n	800958a <_reclaim_reent+0x16>
 8009598:	69e3      	ldr	r3, [r4, #28]
 800959a:	4620      	mov	r0, r4
 800959c:	68d9      	ldr	r1, [r3, #12]
 800959e:	f000 ff13 	bl	800a3c8 <_free_r>
 80095a2:	69e3      	ldr	r3, [r4, #28]
 80095a4:	6819      	ldr	r1, [r3, #0]
 80095a6:	b111      	cbz	r1, 80095ae <_reclaim_reent+0x3a>
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 ff0d 	bl	800a3c8 <_free_r>
 80095ae:	69e3      	ldr	r3, [r4, #28]
 80095b0:	689d      	ldr	r5, [r3, #8]
 80095b2:	b15d      	cbz	r5, 80095cc <_reclaim_reent+0x58>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4620      	mov	r0, r4
 80095b8:	682d      	ldr	r5, [r5, #0]
 80095ba:	f000 ff05 	bl	800a3c8 <_free_r>
 80095be:	e7f8      	b.n	80095b2 <_reclaim_reent+0x3e>
 80095c0:	680e      	ldr	r6, [r1, #0]
 80095c2:	4620      	mov	r0, r4
 80095c4:	f000 ff00 	bl	800a3c8 <_free_r>
 80095c8:	4631      	mov	r1, r6
 80095ca:	e7e1      	b.n	8009590 <_reclaim_reent+0x1c>
 80095cc:	6961      	ldr	r1, [r4, #20]
 80095ce:	b111      	cbz	r1, 80095d6 <_reclaim_reent+0x62>
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fef9 	bl	800a3c8 <_free_r>
 80095d6:	69e1      	ldr	r1, [r4, #28]
 80095d8:	b111      	cbz	r1, 80095e0 <_reclaim_reent+0x6c>
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fef4 	bl	800a3c8 <_free_r>
 80095e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80095e2:	b111      	cbz	r1, 80095ea <_reclaim_reent+0x76>
 80095e4:	4620      	mov	r0, r4
 80095e6:	f000 feef 	bl	800a3c8 <_free_r>
 80095ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80095ec:	b111      	cbz	r1, 80095f4 <_reclaim_reent+0x80>
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 feea 	bl	800a3c8 <_free_r>
 80095f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80095f6:	b111      	cbz	r1, 80095fe <_reclaim_reent+0x8a>
 80095f8:	4620      	mov	r0, r4
 80095fa:	f000 fee5 	bl	800a3c8 <_free_r>
 80095fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009600:	b111      	cbz	r1, 8009608 <_reclaim_reent+0x94>
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fee0 	bl	800a3c8 <_free_r>
 8009608:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800960a:	b111      	cbz	r1, 8009612 <_reclaim_reent+0x9e>
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fedb 	bl	800a3c8 <_free_r>
 8009612:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009614:	b111      	cbz	r1, 800961c <_reclaim_reent+0xa8>
 8009616:	4620      	mov	r0, r4
 8009618:	f000 fed6 	bl	800a3c8 <_free_r>
 800961c:	6a23      	ldr	r3, [r4, #32]
 800961e:	b11b      	cbz	r3, 8009628 <_reclaim_reent+0xb4>
 8009620:	4620      	mov	r0, r4
 8009622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009626:	4718      	bx	r3
 8009628:	bd70      	pop	{r4, r5, r6, pc}
 800962a:	bf00      	nop
 800962c:	20000070 	.word	0x20000070

08009630 <_lseek_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d07      	ldr	r5, [pc, #28]	@ (8009650 <_lseek_r+0x20>)
 8009634:	4604      	mov	r4, r0
 8009636:	4608      	mov	r0, r1
 8009638:	4611      	mov	r1, r2
 800963a:	2200      	movs	r2, #0
 800963c:	602a      	str	r2, [r5, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f7f8 fd6f 	bl	8002122 <_lseek>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_lseek_r+0x1e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_lseek_r+0x1e>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	20006368 	.word	0x20006368

08009654 <_read_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	@ (8009674 <_read_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f8 fd19 	bl	800209a <_read>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_read_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_read_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	20006368 	.word	0x20006368

08009678 <_write_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	@ (8009698 <_write_r+0x20>)
 800967c:	4604      	mov	r4, r0
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	2200      	movs	r2, #0
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f7 fd8a 	bl	80011a0 <_write>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_write_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_write_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20006368 	.word	0x20006368

0800969c <__errno>:
 800969c:	4b01      	ldr	r3, [pc, #4]	@ (80096a4 <__errno+0x8>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000070 	.word	0x20000070

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	@ (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	@ (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	@ (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	@ (80096ec <__libc_init_array+0x44>)
 80096bc:	f002 f878 	bl	800b7b0 <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	0800bebc 	.word	0x0800bebc
 80096e4:	0800bebc 	.word	0x0800bebc
 80096e8:	0800bebc 	.word	0x0800bebc
 80096ec:	0800bec0 	.word	0x0800bec0

080096f0 <__retarget_lock_init_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_acquire_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <__retarget_lock_release_recursive>:
 80096f4:	4770      	bx	lr

080096f6 <memcpy>:
 80096f6:	440a      	add	r2, r1
 80096f8:	4291      	cmp	r1, r2
 80096fa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80096fe:	d100      	bne.n	8009702 <memcpy+0xc>
 8009700:	4770      	bx	lr
 8009702:	b510      	push	{r4, lr}
 8009704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970c:	4291      	cmp	r1, r2
 800970e:	d1f9      	bne.n	8009704 <memcpy+0xe>
 8009710:	bd10      	pop	{r4, pc}

08009712 <quorem>:
 8009712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009716:	6903      	ldr	r3, [r0, #16]
 8009718:	690c      	ldr	r4, [r1, #16]
 800971a:	42a3      	cmp	r3, r4
 800971c:	4607      	mov	r7, r0
 800971e:	db7e      	blt.n	800981e <quorem+0x10c>
 8009720:	3c01      	subs	r4, #1
 8009722:	f101 0814 	add.w	r8, r1, #20
 8009726:	00a3      	lsls	r3, r4, #2
 8009728:	f100 0514 	add.w	r5, r0, #20
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800973c:	3301      	adds	r3, #1
 800973e:	429a      	cmp	r2, r3
 8009740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009744:	fbb2 f6f3 	udiv	r6, r2, r3
 8009748:	d32e      	bcc.n	80097a8 <quorem+0x96>
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	46c4      	mov	ip, r8
 8009750:	46ae      	mov	lr, r5
 8009752:	46d3      	mov	fp, sl
 8009754:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009758:	b298      	uxth	r0, r3
 800975a:	fb06 a000 	mla	r0, r6, r0, sl
 800975e:	0c02      	lsrs	r2, r0, #16
 8009760:	0c1b      	lsrs	r3, r3, #16
 8009762:	fb06 2303 	mla	r3, r6, r3, r2
 8009766:	f8de 2000 	ldr.w	r2, [lr]
 800976a:	b280      	uxth	r0, r0
 800976c:	b292      	uxth	r2, r2
 800976e:	1a12      	subs	r2, r2, r0
 8009770:	445a      	add	r2, fp
 8009772:	f8de 0000 	ldr.w	r0, [lr]
 8009776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800977a:	b29b      	uxth	r3, r3
 800977c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009780:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009784:	b292      	uxth	r2, r2
 8009786:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800978a:	45e1      	cmp	r9, ip
 800978c:	f84e 2b04 	str.w	r2, [lr], #4
 8009790:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009794:	d2de      	bcs.n	8009754 <quorem+0x42>
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	58eb      	ldr	r3, [r5, r3]
 800979a:	b92b      	cbnz	r3, 80097a8 <quorem+0x96>
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	3b04      	subs	r3, #4
 80097a0:	429d      	cmp	r5, r3
 80097a2:	461a      	mov	r2, r3
 80097a4:	d32f      	bcc.n	8009806 <quorem+0xf4>
 80097a6:	613c      	str	r4, [r7, #16]
 80097a8:	4638      	mov	r0, r7
 80097aa:	f001 f97f 	bl	800aaac <__mcmp>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	db25      	blt.n	80097fe <quorem+0xec>
 80097b2:	4629      	mov	r1, r5
 80097b4:	2000      	movs	r0, #0
 80097b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80097ba:	f8d1 c000 	ldr.w	ip, [r1]
 80097be:	fa1f fe82 	uxth.w	lr, r2
 80097c2:	fa1f f38c 	uxth.w	r3, ip
 80097c6:	eba3 030e 	sub.w	r3, r3, lr
 80097ca:	4403      	add	r3, r0
 80097cc:	0c12      	lsrs	r2, r2, #16
 80097ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097dc:	45c1      	cmp	r9, r8
 80097de:	f841 3b04 	str.w	r3, [r1], #4
 80097e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097e6:	d2e6      	bcs.n	80097b6 <quorem+0xa4>
 80097e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097f0:	b922      	cbnz	r2, 80097fc <quorem+0xea>
 80097f2:	3b04      	subs	r3, #4
 80097f4:	429d      	cmp	r5, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	d30b      	bcc.n	8009812 <quorem+0x100>
 80097fa:	613c      	str	r4, [r7, #16]
 80097fc:	3601      	adds	r6, #1
 80097fe:	4630      	mov	r0, r6
 8009800:	b003      	add	sp, #12
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	3b04      	subs	r3, #4
 800980a:	2a00      	cmp	r2, #0
 800980c:	d1cb      	bne.n	80097a6 <quorem+0x94>
 800980e:	3c01      	subs	r4, #1
 8009810:	e7c6      	b.n	80097a0 <quorem+0x8e>
 8009812:	6812      	ldr	r2, [r2, #0]
 8009814:	3b04      	subs	r3, #4
 8009816:	2a00      	cmp	r2, #0
 8009818:	d1ef      	bne.n	80097fa <quorem+0xe8>
 800981a:	3c01      	subs	r4, #1
 800981c:	e7ea      	b.n	80097f4 <quorem+0xe2>
 800981e:	2000      	movs	r0, #0
 8009820:	e7ee      	b.n	8009800 <quorem+0xee>
 8009822:	0000      	movs	r0, r0
 8009824:	0000      	movs	r0, r0
	...

08009828 <_dtoa_r>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	69c7      	ldr	r7, [r0, #28]
 800982e:	b097      	sub	sp, #92	@ 0x5c
 8009830:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009834:	ec55 4b10 	vmov	r4, r5, d0
 8009838:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800983a:	9107      	str	r1, [sp, #28]
 800983c:	4681      	mov	r9, r0
 800983e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009840:	9311      	str	r3, [sp, #68]	@ 0x44
 8009842:	b97f      	cbnz	r7, 8009864 <_dtoa_r+0x3c>
 8009844:	2010      	movs	r0, #16
 8009846:	f000 fe09 	bl	800a45c <malloc>
 800984a:	4602      	mov	r2, r0
 800984c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009850:	b920      	cbnz	r0, 800985c <_dtoa_r+0x34>
 8009852:	4ba9      	ldr	r3, [pc, #676]	@ (8009af8 <_dtoa_r+0x2d0>)
 8009854:	21ef      	movs	r1, #239	@ 0xef
 8009856:	48a9      	ldr	r0, [pc, #676]	@ (8009afc <_dtoa_r+0x2d4>)
 8009858:	f001 fce2 	bl	800b220 <__assert_func>
 800985c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009860:	6007      	str	r7, [r0, #0]
 8009862:	60c7      	str	r7, [r0, #12]
 8009864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	b159      	cbz	r1, 8009884 <_dtoa_r+0x5c>
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	604a      	str	r2, [r1, #4]
 8009870:	2301      	movs	r3, #1
 8009872:	4093      	lsls	r3, r2
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	4648      	mov	r0, r9
 8009878:	f000 fee6 	bl	800a648 <_Bfree>
 800987c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	1e2b      	subs	r3, r5, #0
 8009886:	bfb9      	ittee	lt
 8009888:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800988c:	9305      	strlt	r3, [sp, #20]
 800988e:	2300      	movge	r3, #0
 8009890:	6033      	strge	r3, [r6, #0]
 8009892:	9f05      	ldr	r7, [sp, #20]
 8009894:	4b9a      	ldr	r3, [pc, #616]	@ (8009b00 <_dtoa_r+0x2d8>)
 8009896:	bfbc      	itt	lt
 8009898:	2201      	movlt	r2, #1
 800989a:	6032      	strlt	r2, [r6, #0]
 800989c:	43bb      	bics	r3, r7
 800989e:	d112      	bne.n	80098c6 <_dtoa_r+0x9e>
 80098a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098ac:	4323      	orrs	r3, r4
 80098ae:	f000 855a 	beq.w	800a366 <_dtoa_r+0xb3e>
 80098b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009b14 <_dtoa_r+0x2ec>
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 855c 	beq.w	800a376 <_dtoa_r+0xb4e>
 80098be:	f10a 0303 	add.w	r3, sl, #3
 80098c2:	f000 bd56 	b.w	800a372 <_dtoa_r+0xb4a>
 80098c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80098ca:	2200      	movs	r2, #0
 80098cc:	ec51 0b17 	vmov	r0, r1, d7
 80098d0:	2300      	movs	r3, #0
 80098d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80098d6:	f7f7 f927 	bl	8000b28 <__aeabi_dcmpeq>
 80098da:	4680      	mov	r8, r0
 80098dc:	b158      	cbz	r0, 80098f6 <_dtoa_r+0xce>
 80098de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098e0:	2301      	movs	r3, #1
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098e6:	b113      	cbz	r3, 80098ee <_dtoa_r+0xc6>
 80098e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80098ea:	4b86      	ldr	r3, [pc, #536]	@ (8009b04 <_dtoa_r+0x2dc>)
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009b18 <_dtoa_r+0x2f0>
 80098f2:	f000 bd40 	b.w	800a376 <_dtoa_r+0xb4e>
 80098f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80098fa:	aa14      	add	r2, sp, #80	@ 0x50
 80098fc:	a915      	add	r1, sp, #84	@ 0x54
 80098fe:	4648      	mov	r0, r9
 8009900:	f001 f984 	bl	800ac0c <__d2b>
 8009904:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009908:	9002      	str	r0, [sp, #8]
 800990a:	2e00      	cmp	r6, #0
 800990c:	d078      	beq.n	8009a00 <_dtoa_r+0x1d8>
 800990e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009910:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800991c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009920:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009924:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009928:	4619      	mov	r1, r3
 800992a:	2200      	movs	r2, #0
 800992c:	4b76      	ldr	r3, [pc, #472]	@ (8009b08 <_dtoa_r+0x2e0>)
 800992e:	f7f6 fcdb 	bl	80002e8 <__aeabi_dsub>
 8009932:	a36b      	add	r3, pc, #428	@ (adr r3, 8009ae0 <_dtoa_r+0x2b8>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fe8e 	bl	8000658 <__aeabi_dmul>
 800993c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009ae8 <_dtoa_r+0x2c0>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	f7f6 fcd3 	bl	80002ec <__adddf3>
 8009946:	4604      	mov	r4, r0
 8009948:	4630      	mov	r0, r6
 800994a:	460d      	mov	r5, r1
 800994c:	f7f6 fe1a 	bl	8000584 <__aeabi_i2d>
 8009950:	a367      	add	r3, pc, #412	@ (adr r3, 8009af0 <_dtoa_r+0x2c8>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fe7f 	bl	8000658 <__aeabi_dmul>
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	f7f6 fcc3 	bl	80002ec <__adddf3>
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	f7f7 f925 	bl	8000bb8 <__aeabi_d2iz>
 800996e:	2200      	movs	r2, #0
 8009970:	4607      	mov	r7, r0
 8009972:	2300      	movs	r3, #0
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f7 f8e0 	bl	8000b3c <__aeabi_dcmplt>
 800997c:	b140      	cbz	r0, 8009990 <_dtoa_r+0x168>
 800997e:	4638      	mov	r0, r7
 8009980:	f7f6 fe00 	bl	8000584 <__aeabi_i2d>
 8009984:	4622      	mov	r2, r4
 8009986:	462b      	mov	r3, r5
 8009988:	f7f7 f8ce 	bl	8000b28 <__aeabi_dcmpeq>
 800998c:	b900      	cbnz	r0, 8009990 <_dtoa_r+0x168>
 800998e:	3f01      	subs	r7, #1
 8009990:	2f16      	cmp	r7, #22
 8009992:	d852      	bhi.n	8009a3a <_dtoa_r+0x212>
 8009994:	4b5d      	ldr	r3, [pc, #372]	@ (8009b0c <_dtoa_r+0x2e4>)
 8009996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099a2:	f7f7 f8cb 	bl	8000b3c <__aeabi_dcmplt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d049      	beq.n	8009a3e <_dtoa_r+0x216>
 80099aa:	3f01      	subs	r7, #1
 80099ac:	2300      	movs	r3, #0
 80099ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80099b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099b2:	1b9b      	subs	r3, r3, r6
 80099b4:	1e5a      	subs	r2, r3, #1
 80099b6:	bf45      	ittet	mi
 80099b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80099bc:	9300      	strmi	r3, [sp, #0]
 80099be:	2300      	movpl	r3, #0
 80099c0:	2300      	movmi	r3, #0
 80099c2:	9206      	str	r2, [sp, #24]
 80099c4:	bf54      	ite	pl
 80099c6:	9300      	strpl	r3, [sp, #0]
 80099c8:	9306      	strmi	r3, [sp, #24]
 80099ca:	2f00      	cmp	r7, #0
 80099cc:	db39      	blt.n	8009a42 <_dtoa_r+0x21a>
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80099d2:	443b      	add	r3, r7
 80099d4:	9306      	str	r3, [sp, #24]
 80099d6:	2300      	movs	r3, #0
 80099d8:	9308      	str	r3, [sp, #32]
 80099da:	9b07      	ldr	r3, [sp, #28]
 80099dc:	2b09      	cmp	r3, #9
 80099de:	d863      	bhi.n	8009aa8 <_dtoa_r+0x280>
 80099e0:	2b05      	cmp	r3, #5
 80099e2:	bfc4      	itt	gt
 80099e4:	3b04      	subgt	r3, #4
 80099e6:	9307      	strgt	r3, [sp, #28]
 80099e8:	9b07      	ldr	r3, [sp, #28]
 80099ea:	f1a3 0302 	sub.w	r3, r3, #2
 80099ee:	bfcc      	ite	gt
 80099f0:	2400      	movgt	r4, #0
 80099f2:	2401      	movle	r4, #1
 80099f4:	2b03      	cmp	r3, #3
 80099f6:	d863      	bhi.n	8009ac0 <_dtoa_r+0x298>
 80099f8:	e8df f003 	tbb	[pc, r3]
 80099fc:	2b375452 	.word	0x2b375452
 8009a00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a04:	441e      	add	r6, r3
 8009a06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	bfc1      	itttt	gt
 8009a0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a12:	409f      	lslgt	r7, r3
 8009a14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a18:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a1c:	bfd6      	itet	le
 8009a1e:	f1c3 0320 	rsble	r3, r3, #32
 8009a22:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a26:	fa04 f003 	lslle.w	r0, r4, r3
 8009a2a:	f7f6 fd9b 	bl	8000564 <__aeabi_ui2d>
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a34:	3e01      	subs	r6, #1
 8009a36:	9212      	str	r2, [sp, #72]	@ 0x48
 8009a38:	e776      	b.n	8009928 <_dtoa_r+0x100>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e7b7      	b.n	80099ae <_dtoa_r+0x186>
 8009a3e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009a40:	e7b6      	b.n	80099b0 <_dtoa_r+0x188>
 8009a42:	9b00      	ldr	r3, [sp, #0]
 8009a44:	1bdb      	subs	r3, r3, r7
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	427b      	negs	r3, r7
 8009a4a:	9308      	str	r3, [sp, #32]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a50:	e7c3      	b.n	80099da <_dtoa_r+0x1b2>
 8009a52:	2301      	movs	r3, #1
 8009a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a58:	eb07 0b03 	add.w	fp, r7, r3
 8009a5c:	f10b 0301 	add.w	r3, fp, #1
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	bfb8      	it	lt
 8009a66:	2301      	movlt	r3, #1
 8009a68:	e006      	b.n	8009a78 <_dtoa_r+0x250>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	dd28      	ble.n	8009ac6 <_dtoa_r+0x29e>
 8009a74:	469b      	mov	fp, r3
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	2204      	movs	r2, #4
 8009a80:	f102 0514 	add.w	r5, r2, #20
 8009a84:	429d      	cmp	r5, r3
 8009a86:	d926      	bls.n	8009ad6 <_dtoa_r+0x2ae>
 8009a88:	6041      	str	r1, [r0, #4]
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	f000 fd9c 	bl	800a5c8 <_Balloc>
 8009a90:	4682      	mov	sl, r0
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d142      	bne.n	8009b1c <_dtoa_r+0x2f4>
 8009a96:	4b1e      	ldr	r3, [pc, #120]	@ (8009b10 <_dtoa_r+0x2e8>)
 8009a98:	4602      	mov	r2, r0
 8009a9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009a9e:	e6da      	b.n	8009856 <_dtoa_r+0x2e>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e7e3      	b.n	8009a6c <_dtoa_r+0x244>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e7d5      	b.n	8009a54 <_dtoa_r+0x22c>
 8009aa8:	2401      	movs	r4, #1
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	9409      	str	r4, [sp, #36]	@ 0x24
 8009ab0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f8cd b00c 	str.w	fp, [sp, #12]
 8009aba:	2312      	movs	r3, #18
 8009abc:	920c      	str	r2, [sp, #48]	@ 0x30
 8009abe:	e7db      	b.n	8009a78 <_dtoa_r+0x250>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac4:	e7f4      	b.n	8009ab0 <_dtoa_r+0x288>
 8009ac6:	f04f 0b01 	mov.w	fp, #1
 8009aca:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ace:	465b      	mov	r3, fp
 8009ad0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009ad4:	e7d0      	b.n	8009a78 <_dtoa_r+0x250>
 8009ad6:	3101      	adds	r1, #1
 8009ad8:	0052      	lsls	r2, r2, #1
 8009ada:	e7d1      	b.n	8009a80 <_dtoa_r+0x258>
 8009adc:	f3af 8000 	nop.w
 8009ae0:	636f4361 	.word	0x636f4361
 8009ae4:	3fd287a7 	.word	0x3fd287a7
 8009ae8:	8b60c8b3 	.word	0x8b60c8b3
 8009aec:	3fc68a28 	.word	0x3fc68a28
 8009af0:	509f79fb 	.word	0x509f79fb
 8009af4:	3fd34413 	.word	0x3fd34413
 8009af8:	0800bb79 	.word	0x0800bb79
 8009afc:	0800bb90 	.word	0x0800bb90
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	0800bb49 	.word	0x0800bb49
 8009b08:	3ff80000 	.word	0x3ff80000
 8009b0c:	0800bce0 	.word	0x0800bce0
 8009b10:	0800bbe8 	.word	0x0800bbe8
 8009b14:	0800bb75 	.word	0x0800bb75
 8009b18:	0800bb48 	.word	0x0800bb48
 8009b1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009b20:	6018      	str	r0, [r3, #0]
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	2b0e      	cmp	r3, #14
 8009b26:	f200 80a1 	bhi.w	8009c6c <_dtoa_r+0x444>
 8009b2a:	2c00      	cmp	r4, #0
 8009b2c:	f000 809e 	beq.w	8009c6c <_dtoa_r+0x444>
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	dd33      	ble.n	8009b9c <_dtoa_r+0x374>
 8009b34:	4b9c      	ldr	r3, [pc, #624]	@ (8009da8 <_dtoa_r+0x580>)
 8009b36:	f007 020f 	and.w	r2, r7, #15
 8009b3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b3e:	ed93 7b00 	vldr	d7, [r3]
 8009b42:	05f8      	lsls	r0, r7, #23
 8009b44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009b48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b4c:	d516      	bpl.n	8009b7c <_dtoa_r+0x354>
 8009b4e:	4b97      	ldr	r3, [pc, #604]	@ (8009dac <_dtoa_r+0x584>)
 8009b50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b58:	f7f6 fea8 	bl	80008ac <__aeabi_ddiv>
 8009b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b60:	f004 040f 	and.w	r4, r4, #15
 8009b64:	2603      	movs	r6, #3
 8009b66:	4d91      	ldr	r5, [pc, #580]	@ (8009dac <_dtoa_r+0x584>)
 8009b68:	b954      	cbnz	r4, 8009b80 <_dtoa_r+0x358>
 8009b6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b72:	f7f6 fe9b 	bl	80008ac <__aeabi_ddiv>
 8009b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b7a:	e028      	b.n	8009bce <_dtoa_r+0x3a6>
 8009b7c:	2602      	movs	r6, #2
 8009b7e:	e7f2      	b.n	8009b66 <_dtoa_r+0x33e>
 8009b80:	07e1      	lsls	r1, r4, #31
 8009b82:	d508      	bpl.n	8009b96 <_dtoa_r+0x36e>
 8009b84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b8c:	f7f6 fd64 	bl	8000658 <__aeabi_dmul>
 8009b90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b94:	3601      	adds	r6, #1
 8009b96:	1064      	asrs	r4, r4, #1
 8009b98:	3508      	adds	r5, #8
 8009b9a:	e7e5      	b.n	8009b68 <_dtoa_r+0x340>
 8009b9c:	f000 80af 	beq.w	8009cfe <_dtoa_r+0x4d6>
 8009ba0:	427c      	negs	r4, r7
 8009ba2:	4b81      	ldr	r3, [pc, #516]	@ (8009da8 <_dtoa_r+0x580>)
 8009ba4:	4d81      	ldr	r5, [pc, #516]	@ (8009dac <_dtoa_r+0x584>)
 8009ba6:	f004 020f 	and.w	r2, r4, #15
 8009baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009bb6:	f7f6 fd4f 	bl	8000658 <__aeabi_dmul>
 8009bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bbe:	1124      	asrs	r4, r4, #4
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2602      	movs	r6, #2
 8009bc4:	2c00      	cmp	r4, #0
 8009bc6:	f040 808f 	bne.w	8009ce8 <_dtoa_r+0x4c0>
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1d3      	bne.n	8009b76 <_dtoa_r+0x34e>
 8009bce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009bd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f000 8094 	beq.w	8009d02 <_dtoa_r+0x4da>
 8009bda:	4b75      	ldr	r3, [pc, #468]	@ (8009db0 <_dtoa_r+0x588>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	4620      	mov	r0, r4
 8009be0:	4629      	mov	r1, r5
 8009be2:	f7f6 ffab 	bl	8000b3c <__aeabi_dcmplt>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f000 808b 	beq.w	8009d02 <_dtoa_r+0x4da>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	f000 8087 	beq.w	8009d02 <_dtoa_r+0x4da>
 8009bf4:	f1bb 0f00 	cmp.w	fp, #0
 8009bf8:	dd34      	ble.n	8009c64 <_dtoa_r+0x43c>
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	4b6d      	ldr	r3, [pc, #436]	@ (8009db4 <_dtoa_r+0x58c>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 fd29 	bl	8000658 <__aeabi_dmul>
 8009c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c0a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009c0e:	3601      	adds	r6, #1
 8009c10:	465c      	mov	r4, fp
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7f6 fcb6 	bl	8000584 <__aeabi_i2d>
 8009c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c1c:	f7f6 fd1c 	bl	8000658 <__aeabi_dmul>
 8009c20:	4b65      	ldr	r3, [pc, #404]	@ (8009db8 <_dtoa_r+0x590>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	f7f6 fb62 	bl	80002ec <__adddf3>
 8009c28:	4605      	mov	r5, r0
 8009c2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d16a      	bne.n	8009d08 <_dtoa_r+0x4e0>
 8009c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c36:	4b61      	ldr	r3, [pc, #388]	@ (8009dbc <_dtoa_r+0x594>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f7f6 fb55 	bl	80002e8 <__aeabi_dsub>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c46:	462a      	mov	r2, r5
 8009c48:	4633      	mov	r3, r6
 8009c4a:	f7f6 ff95 	bl	8000b78 <__aeabi_dcmpgt>
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f040 8298 	bne.w	800a184 <_dtoa_r+0x95c>
 8009c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c58:	462a      	mov	r2, r5
 8009c5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c5e:	f7f6 ff6d 	bl	8000b3c <__aeabi_dcmplt>
 8009c62:	bb38      	cbnz	r0, 8009cb4 <_dtoa_r+0x48c>
 8009c64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009c68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f2c0 8157 	blt.w	8009f22 <_dtoa_r+0x6fa>
 8009c74:	2f0e      	cmp	r7, #14
 8009c76:	f300 8154 	bgt.w	8009f22 <_dtoa_r+0x6fa>
 8009c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8009da8 <_dtoa_r+0x580>)
 8009c7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c80:	ed93 7b00 	vldr	d7, [r3]
 8009c84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	ed8d 7b00 	vstr	d7, [sp]
 8009c8c:	f280 80e5 	bge.w	8009e5a <_dtoa_r+0x632>
 8009c90:	9b03      	ldr	r3, [sp, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f300 80e1 	bgt.w	8009e5a <_dtoa_r+0x632>
 8009c98:	d10c      	bne.n	8009cb4 <_dtoa_r+0x48c>
 8009c9a:	4b48      	ldr	r3, [pc, #288]	@ (8009dbc <_dtoa_r+0x594>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	ec51 0b17 	vmov	r0, r1, d7
 8009ca2:	f7f6 fcd9 	bl	8000658 <__aeabi_dmul>
 8009ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009caa:	f7f6 ff5b 	bl	8000b64 <__aeabi_dcmpge>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	f000 8266 	beq.w	800a180 <_dtoa_r+0x958>
 8009cb4:	2400      	movs	r4, #0
 8009cb6:	4625      	mov	r5, r4
 8009cb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cba:	4656      	mov	r6, sl
 8009cbc:	ea6f 0803 	mvn.w	r8, r3
 8009cc0:	2700      	movs	r7, #0
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 fcbf 	bl	800a648 <_Bfree>
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	f000 80bd 	beq.w	8009e4a <_dtoa_r+0x622>
 8009cd0:	b12f      	cbz	r7, 8009cde <_dtoa_r+0x4b6>
 8009cd2:	42af      	cmp	r7, r5
 8009cd4:	d003      	beq.n	8009cde <_dtoa_r+0x4b6>
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	4648      	mov	r0, r9
 8009cda:	f000 fcb5 	bl	800a648 <_Bfree>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4648      	mov	r0, r9
 8009ce2:	f000 fcb1 	bl	800a648 <_Bfree>
 8009ce6:	e0b0      	b.n	8009e4a <_dtoa_r+0x622>
 8009ce8:	07e2      	lsls	r2, r4, #31
 8009cea:	d505      	bpl.n	8009cf8 <_dtoa_r+0x4d0>
 8009cec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009cf0:	f7f6 fcb2 	bl	8000658 <__aeabi_dmul>
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	1064      	asrs	r4, r4, #1
 8009cfa:	3508      	adds	r5, #8
 8009cfc:	e762      	b.n	8009bc4 <_dtoa_r+0x39c>
 8009cfe:	2602      	movs	r6, #2
 8009d00:	e765      	b.n	8009bce <_dtoa_r+0x3a6>
 8009d02:	9c03      	ldr	r4, [sp, #12]
 8009d04:	46b8      	mov	r8, r7
 8009d06:	e784      	b.n	8009c12 <_dtoa_r+0x3ea>
 8009d08:	4b27      	ldr	r3, [pc, #156]	@ (8009da8 <_dtoa_r+0x580>)
 8009d0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d14:	4454      	add	r4, sl
 8009d16:	2900      	cmp	r1, #0
 8009d18:	d054      	beq.n	8009dc4 <_dtoa_r+0x59c>
 8009d1a:	4929      	ldr	r1, [pc, #164]	@ (8009dc0 <_dtoa_r+0x598>)
 8009d1c:	2000      	movs	r0, #0
 8009d1e:	f7f6 fdc5 	bl	80008ac <__aeabi_ddiv>
 8009d22:	4633      	mov	r3, r6
 8009d24:	462a      	mov	r2, r5
 8009d26:	f7f6 fadf 	bl	80002e8 <__aeabi_dsub>
 8009d2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d2e:	4656      	mov	r6, sl
 8009d30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d34:	f7f6 ff40 	bl	8000bb8 <__aeabi_d2iz>
 8009d38:	4605      	mov	r5, r0
 8009d3a:	f7f6 fc23 	bl	8000584 <__aeabi_i2d>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d46:	f7f6 facf 	bl	80002e8 <__aeabi_dsub>
 8009d4a:	3530      	adds	r5, #48	@ 0x30
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d54:	f806 5b01 	strb.w	r5, [r6], #1
 8009d58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d5c:	f7f6 feee 	bl	8000b3c <__aeabi_dcmplt>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d172      	bne.n	8009e4a <_dtoa_r+0x622>
 8009d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d68:	4911      	ldr	r1, [pc, #68]	@ (8009db0 <_dtoa_r+0x588>)
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	f7f6 fabc 	bl	80002e8 <__aeabi_dsub>
 8009d70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d74:	f7f6 fee2 	bl	8000b3c <__aeabi_dcmplt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	f040 80b4 	bne.w	8009ee6 <_dtoa_r+0x6be>
 8009d7e:	42a6      	cmp	r6, r4
 8009d80:	f43f af70 	beq.w	8009c64 <_dtoa_r+0x43c>
 8009d84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d88:	4b0a      	ldr	r3, [pc, #40]	@ (8009db4 <_dtoa_r+0x58c>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f7f6 fc64 	bl	8000658 <__aeabi_dmul>
 8009d90:	4b08      	ldr	r3, [pc, #32]	@ (8009db4 <_dtoa_r+0x58c>)
 8009d92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d96:	2200      	movs	r2, #0
 8009d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d9c:	f7f6 fc5c 	bl	8000658 <__aeabi_dmul>
 8009da0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009da4:	e7c4      	b.n	8009d30 <_dtoa_r+0x508>
 8009da6:	bf00      	nop
 8009da8:	0800bce0 	.word	0x0800bce0
 8009dac:	0800bcb8 	.word	0x0800bcb8
 8009db0:	3ff00000 	.word	0x3ff00000
 8009db4:	40240000 	.word	0x40240000
 8009db8:	401c0000 	.word	0x401c0000
 8009dbc:	40140000 	.word	0x40140000
 8009dc0:	3fe00000 	.word	0x3fe00000
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fc46 	bl	8000658 <__aeabi_dmul>
 8009dcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009dd0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009dd2:	4656      	mov	r6, sl
 8009dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd8:	f7f6 feee 	bl	8000bb8 <__aeabi_d2iz>
 8009ddc:	4605      	mov	r5, r0
 8009dde:	f7f6 fbd1 	bl	8000584 <__aeabi_i2d>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dea:	f7f6 fa7d 	bl	80002e8 <__aeabi_dsub>
 8009dee:	3530      	adds	r5, #48	@ 0x30
 8009df0:	f806 5b01 	strb.w	r5, [r6], #1
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009dfe:	f04f 0200 	mov.w	r2, #0
 8009e02:	d124      	bne.n	8009e4e <_dtoa_r+0x626>
 8009e04:	4baf      	ldr	r3, [pc, #700]	@ (800a0c4 <_dtoa_r+0x89c>)
 8009e06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e0a:	f7f6 fa6f 	bl	80002ec <__adddf3>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e16:	f7f6 feaf 	bl	8000b78 <__aeabi_dcmpgt>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d163      	bne.n	8009ee6 <_dtoa_r+0x6be>
 8009e1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e22:	49a8      	ldr	r1, [pc, #672]	@ (800a0c4 <_dtoa_r+0x89c>)
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7f6 fa5f 	bl	80002e8 <__aeabi_dsub>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e32:	f7f6 fe83 	bl	8000b3c <__aeabi_dcmplt>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f43f af14 	beq.w	8009c64 <_dtoa_r+0x43c>
 8009e3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009e3e:	1e73      	subs	r3, r6, #1
 8009e40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e46:	2b30      	cmp	r3, #48	@ 0x30
 8009e48:	d0f8      	beq.n	8009e3c <_dtoa_r+0x614>
 8009e4a:	4647      	mov	r7, r8
 8009e4c:	e03b      	b.n	8009ec6 <_dtoa_r+0x69e>
 8009e4e:	4b9e      	ldr	r3, [pc, #632]	@ (800a0c8 <_dtoa_r+0x8a0>)
 8009e50:	f7f6 fc02 	bl	8000658 <__aeabi_dmul>
 8009e54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e58:	e7bc      	b.n	8009dd4 <_dtoa_r+0x5ac>
 8009e5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009e5e:	4656      	mov	r6, sl
 8009e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	f7f6 fd20 	bl	80008ac <__aeabi_ddiv>
 8009e6c:	f7f6 fea4 	bl	8000bb8 <__aeabi_d2iz>
 8009e70:	4680      	mov	r8, r0
 8009e72:	f7f6 fb87 	bl	8000584 <__aeabi_i2d>
 8009e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e7a:	f7f6 fbed 	bl	8000658 <__aeabi_dmul>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4620      	mov	r0, r4
 8009e84:	4629      	mov	r1, r5
 8009e86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e8a:	f7f6 fa2d 	bl	80002e8 <__aeabi_dsub>
 8009e8e:	f806 4b01 	strb.w	r4, [r6], #1
 8009e92:	9d03      	ldr	r5, [sp, #12]
 8009e94:	eba6 040a 	sub.w	r4, r6, sl
 8009e98:	42a5      	cmp	r5, r4
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	d133      	bne.n	8009f08 <_dtoa_r+0x6e0>
 8009ea0:	f7f6 fa24 	bl	80002ec <__adddf3>
 8009ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	f7f6 fe64 	bl	8000b78 <__aeabi_dcmpgt>
 8009eb0:	b9c0      	cbnz	r0, 8009ee4 <_dtoa_r+0x6bc>
 8009eb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7f6 fe35 	bl	8000b28 <__aeabi_dcmpeq>
 8009ebe:	b110      	cbz	r0, 8009ec6 <_dtoa_r+0x69e>
 8009ec0:	f018 0f01 	tst.w	r8, #1
 8009ec4:	d10e      	bne.n	8009ee4 <_dtoa_r+0x6bc>
 8009ec6:	9902      	ldr	r1, [sp, #8]
 8009ec8:	4648      	mov	r0, r9
 8009eca:	f000 fbbd 	bl	800a648 <_Bfree>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	7033      	strb	r3, [r6, #0]
 8009ed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ed4:	3701      	adds	r7, #1
 8009ed6:	601f      	str	r7, [r3, #0]
 8009ed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 824b 	beq.w	800a376 <_dtoa_r+0xb4e>
 8009ee0:	601e      	str	r6, [r3, #0]
 8009ee2:	e248      	b.n	800a376 <_dtoa_r+0xb4e>
 8009ee4:	46b8      	mov	r8, r7
 8009ee6:	4633      	mov	r3, r6
 8009ee8:	461e      	mov	r6, r3
 8009eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eee:	2a39      	cmp	r2, #57	@ 0x39
 8009ef0:	d106      	bne.n	8009f00 <_dtoa_r+0x6d8>
 8009ef2:	459a      	cmp	sl, r3
 8009ef4:	d1f8      	bne.n	8009ee8 <_dtoa_r+0x6c0>
 8009ef6:	2230      	movs	r2, #48	@ 0x30
 8009ef8:	f108 0801 	add.w	r8, r8, #1
 8009efc:	f88a 2000 	strb.w	r2, [sl]
 8009f00:	781a      	ldrb	r2, [r3, #0]
 8009f02:	3201      	adds	r2, #1
 8009f04:	701a      	strb	r2, [r3, #0]
 8009f06:	e7a0      	b.n	8009e4a <_dtoa_r+0x622>
 8009f08:	4b6f      	ldr	r3, [pc, #444]	@ (800a0c8 <_dtoa_r+0x8a0>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f7f6 fba4 	bl	8000658 <__aeabi_dmul>
 8009f10:	2200      	movs	r2, #0
 8009f12:	2300      	movs	r3, #0
 8009f14:	4604      	mov	r4, r0
 8009f16:	460d      	mov	r5, r1
 8009f18:	f7f6 fe06 	bl	8000b28 <__aeabi_dcmpeq>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d09f      	beq.n	8009e60 <_dtoa_r+0x638>
 8009f20:	e7d1      	b.n	8009ec6 <_dtoa_r+0x69e>
 8009f22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	f000 80ea 	beq.w	800a0fe <_dtoa_r+0x8d6>
 8009f2a:	9a07      	ldr	r2, [sp, #28]
 8009f2c:	2a01      	cmp	r2, #1
 8009f2e:	f300 80cd 	bgt.w	800a0cc <_dtoa_r+0x8a4>
 8009f32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	f000 80c1 	beq.w	800a0bc <_dtoa_r+0x894>
 8009f3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f3e:	9c08      	ldr	r4, [sp, #32]
 8009f40:	9e00      	ldr	r6, [sp, #0]
 8009f42:	9a00      	ldr	r2, [sp, #0]
 8009f44:	441a      	add	r2, r3
 8009f46:	9200      	str	r2, [sp, #0]
 8009f48:	9a06      	ldr	r2, [sp, #24]
 8009f4a:	2101      	movs	r1, #1
 8009f4c:	441a      	add	r2, r3
 8009f4e:	4648      	mov	r0, r9
 8009f50:	9206      	str	r2, [sp, #24]
 8009f52:	f000 fc2d 	bl	800a7b0 <__i2b>
 8009f56:	4605      	mov	r5, r0
 8009f58:	b166      	cbz	r6, 8009f74 <_dtoa_r+0x74c>
 8009f5a:	9b06      	ldr	r3, [sp, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	dd09      	ble.n	8009f74 <_dtoa_r+0x74c>
 8009f60:	42b3      	cmp	r3, r6
 8009f62:	9a00      	ldr	r2, [sp, #0]
 8009f64:	bfa8      	it	ge
 8009f66:	4633      	movge	r3, r6
 8009f68:	1ad2      	subs	r2, r2, r3
 8009f6a:	9200      	str	r2, [sp, #0]
 8009f6c:	9a06      	ldr	r2, [sp, #24]
 8009f6e:	1af6      	subs	r6, r6, r3
 8009f70:	1ad3      	subs	r3, r2, r3
 8009f72:	9306      	str	r3, [sp, #24]
 8009f74:	9b08      	ldr	r3, [sp, #32]
 8009f76:	b30b      	cbz	r3, 8009fbc <_dtoa_r+0x794>
 8009f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80c6 	beq.w	800a10c <_dtoa_r+0x8e4>
 8009f80:	2c00      	cmp	r4, #0
 8009f82:	f000 80c0 	beq.w	800a106 <_dtoa_r+0x8de>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4622      	mov	r2, r4
 8009f8a:	4648      	mov	r0, r9
 8009f8c:	f000 fcc8 	bl	800a920 <__pow5mult>
 8009f90:	9a02      	ldr	r2, [sp, #8]
 8009f92:	4601      	mov	r1, r0
 8009f94:	4605      	mov	r5, r0
 8009f96:	4648      	mov	r0, r9
 8009f98:	f000 fc20 	bl	800a7dc <__multiply>
 8009f9c:	9902      	ldr	r1, [sp, #8]
 8009f9e:	4680      	mov	r8, r0
 8009fa0:	4648      	mov	r0, r9
 8009fa2:	f000 fb51 	bl	800a648 <_Bfree>
 8009fa6:	9b08      	ldr	r3, [sp, #32]
 8009fa8:	1b1b      	subs	r3, r3, r4
 8009faa:	9308      	str	r3, [sp, #32]
 8009fac:	f000 80b1 	beq.w	800a112 <_dtoa_r+0x8ea>
 8009fb0:	9a08      	ldr	r2, [sp, #32]
 8009fb2:	4641      	mov	r1, r8
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f000 fcb3 	bl	800a920 <__pow5mult>
 8009fba:	9002      	str	r0, [sp, #8]
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	4648      	mov	r0, r9
 8009fc0:	f000 fbf6 	bl	800a7b0 <__i2b>
 8009fc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 81d8 	beq.w	800a37e <_dtoa_r+0xb56>
 8009fce:	461a      	mov	r2, r3
 8009fd0:	4601      	mov	r1, r0
 8009fd2:	4648      	mov	r0, r9
 8009fd4:	f000 fca4 	bl	800a920 <__pow5mult>
 8009fd8:	9b07      	ldr	r3, [sp, #28]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	4604      	mov	r4, r0
 8009fde:	f300 809f 	bgt.w	800a120 <_dtoa_r+0x8f8>
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f040 8097 	bne.w	800a118 <_dtoa_r+0x8f0>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 8093 	bne.w	800a11c <_dtoa_r+0x8f4>
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ffc:	0d1b      	lsrs	r3, r3, #20
 8009ffe:	051b      	lsls	r3, r3, #20
 800a000:	b133      	cbz	r3, 800a010 <_dtoa_r+0x7e8>
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	9b06      	ldr	r3, [sp, #24]
 800a00a:	3301      	adds	r3, #1
 800a00c:	9306      	str	r3, [sp, #24]
 800a00e:	2301      	movs	r3, #1
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 81b8 	beq.w	800a38a <_dtoa_r+0xb62>
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a020:	6918      	ldr	r0, [r3, #16]
 800a022:	f000 fb79 	bl	800a718 <__hi0bits>
 800a026:	f1c0 0020 	rsb	r0, r0, #32
 800a02a:	9b06      	ldr	r3, [sp, #24]
 800a02c:	4418      	add	r0, r3
 800a02e:	f010 001f 	ands.w	r0, r0, #31
 800a032:	f000 8082 	beq.w	800a13a <_dtoa_r+0x912>
 800a036:	f1c0 0320 	rsb	r3, r0, #32
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	dd73      	ble.n	800a126 <_dtoa_r+0x8fe>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	f1c0 001c 	rsb	r0, r0, #28
 800a044:	4403      	add	r3, r0
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	9b06      	ldr	r3, [sp, #24]
 800a04a:	4403      	add	r3, r0
 800a04c:	4406      	add	r6, r0
 800a04e:	9306      	str	r3, [sp, #24]
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	dd05      	ble.n	800a062 <_dtoa_r+0x83a>
 800a056:	9902      	ldr	r1, [sp, #8]
 800a058:	461a      	mov	r2, r3
 800a05a:	4648      	mov	r0, r9
 800a05c:	f000 fcba 	bl	800a9d4 <__lshift>
 800a060:	9002      	str	r0, [sp, #8]
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dd05      	ble.n	800a074 <_dtoa_r+0x84c>
 800a068:	4621      	mov	r1, r4
 800a06a:	461a      	mov	r2, r3
 800a06c:	4648      	mov	r0, r9
 800a06e:	f000 fcb1 	bl	800a9d4 <__lshift>
 800a072:	4604      	mov	r4, r0
 800a074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a076:	2b00      	cmp	r3, #0
 800a078:	d061      	beq.n	800a13e <_dtoa_r+0x916>
 800a07a:	9802      	ldr	r0, [sp, #8]
 800a07c:	4621      	mov	r1, r4
 800a07e:	f000 fd15 	bl	800aaac <__mcmp>
 800a082:	2800      	cmp	r0, #0
 800a084:	da5b      	bge.n	800a13e <_dtoa_r+0x916>
 800a086:	2300      	movs	r3, #0
 800a088:	9902      	ldr	r1, [sp, #8]
 800a08a:	220a      	movs	r2, #10
 800a08c:	4648      	mov	r0, r9
 800a08e:	f000 fafd 	bl	800a68c <__multadd>
 800a092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a094:	9002      	str	r0, [sp, #8]
 800a096:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 8177 	beq.w	800a38e <_dtoa_r+0xb66>
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	220a      	movs	r2, #10
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f000 faf0 	bl	800a68c <__multadd>
 800a0ac:	f1bb 0f00 	cmp.w	fp, #0
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	dc6f      	bgt.n	800a194 <_dtoa_r+0x96c>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	dc49      	bgt.n	800a14e <_dtoa_r+0x926>
 800a0ba:	e06b      	b.n	800a194 <_dtoa_r+0x96c>
 800a0bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a0c2:	e73c      	b.n	8009f3e <_dtoa_r+0x716>
 800a0c4:	3fe00000 	.word	0x3fe00000
 800a0c8:	40240000 	.word	0x40240000
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	1e5c      	subs	r4, r3, #1
 800a0d0:	9b08      	ldr	r3, [sp, #32]
 800a0d2:	42a3      	cmp	r3, r4
 800a0d4:	db09      	blt.n	800a0ea <_dtoa_r+0x8c2>
 800a0d6:	1b1c      	subs	r4, r3, r4
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f6bf af30 	bge.w	8009f40 <_dtoa_r+0x718>
 800a0e0:	9b00      	ldr	r3, [sp, #0]
 800a0e2:	9a03      	ldr	r2, [sp, #12]
 800a0e4:	1a9e      	subs	r6, r3, r2
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e72b      	b.n	8009f42 <_dtoa_r+0x71a>
 800a0ea:	9b08      	ldr	r3, [sp, #32]
 800a0ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0ee:	9408      	str	r4, [sp, #32]
 800a0f0:	1ae3      	subs	r3, r4, r3
 800a0f2:	441a      	add	r2, r3
 800a0f4:	9e00      	ldr	r6, [sp, #0]
 800a0f6:	9b03      	ldr	r3, [sp, #12]
 800a0f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a0fa:	2400      	movs	r4, #0
 800a0fc:	e721      	b.n	8009f42 <_dtoa_r+0x71a>
 800a0fe:	9c08      	ldr	r4, [sp, #32]
 800a100:	9e00      	ldr	r6, [sp, #0]
 800a102:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a104:	e728      	b.n	8009f58 <_dtoa_r+0x730>
 800a106:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a10a:	e751      	b.n	8009fb0 <_dtoa_r+0x788>
 800a10c:	9a08      	ldr	r2, [sp, #32]
 800a10e:	9902      	ldr	r1, [sp, #8]
 800a110:	e750      	b.n	8009fb4 <_dtoa_r+0x78c>
 800a112:	f8cd 8008 	str.w	r8, [sp, #8]
 800a116:	e751      	b.n	8009fbc <_dtoa_r+0x794>
 800a118:	2300      	movs	r3, #0
 800a11a:	e779      	b.n	800a010 <_dtoa_r+0x7e8>
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	e777      	b.n	800a010 <_dtoa_r+0x7e8>
 800a120:	2300      	movs	r3, #0
 800a122:	9308      	str	r3, [sp, #32]
 800a124:	e779      	b.n	800a01a <_dtoa_r+0x7f2>
 800a126:	d093      	beq.n	800a050 <_dtoa_r+0x828>
 800a128:	9a00      	ldr	r2, [sp, #0]
 800a12a:	331c      	adds	r3, #28
 800a12c:	441a      	add	r2, r3
 800a12e:	9200      	str	r2, [sp, #0]
 800a130:	9a06      	ldr	r2, [sp, #24]
 800a132:	441a      	add	r2, r3
 800a134:	441e      	add	r6, r3
 800a136:	9206      	str	r2, [sp, #24]
 800a138:	e78a      	b.n	800a050 <_dtoa_r+0x828>
 800a13a:	4603      	mov	r3, r0
 800a13c:	e7f4      	b.n	800a128 <_dtoa_r+0x900>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	46b8      	mov	r8, r7
 800a144:	dc20      	bgt.n	800a188 <_dtoa_r+0x960>
 800a146:	469b      	mov	fp, r3
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	dd1e      	ble.n	800a18c <_dtoa_r+0x964>
 800a14e:	f1bb 0f00 	cmp.w	fp, #0
 800a152:	f47f adb1 	bne.w	8009cb8 <_dtoa_r+0x490>
 800a156:	4621      	mov	r1, r4
 800a158:	465b      	mov	r3, fp
 800a15a:	2205      	movs	r2, #5
 800a15c:	4648      	mov	r0, r9
 800a15e:	f000 fa95 	bl	800a68c <__multadd>
 800a162:	4601      	mov	r1, r0
 800a164:	4604      	mov	r4, r0
 800a166:	9802      	ldr	r0, [sp, #8]
 800a168:	f000 fca0 	bl	800aaac <__mcmp>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f77f ada3 	ble.w	8009cb8 <_dtoa_r+0x490>
 800a172:	4656      	mov	r6, sl
 800a174:	2331      	movs	r3, #49	@ 0x31
 800a176:	f806 3b01 	strb.w	r3, [r6], #1
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	e59f      	b.n	8009cc0 <_dtoa_r+0x498>
 800a180:	9c03      	ldr	r4, [sp, #12]
 800a182:	46b8      	mov	r8, r7
 800a184:	4625      	mov	r5, r4
 800a186:	e7f4      	b.n	800a172 <_dtoa_r+0x94a>
 800a188:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 8101 	beq.w	800a396 <_dtoa_r+0xb6e>
 800a194:	2e00      	cmp	r6, #0
 800a196:	dd05      	ble.n	800a1a4 <_dtoa_r+0x97c>
 800a198:	4629      	mov	r1, r5
 800a19a:	4632      	mov	r2, r6
 800a19c:	4648      	mov	r0, r9
 800a19e:	f000 fc19 	bl	800a9d4 <__lshift>
 800a1a2:	4605      	mov	r5, r0
 800a1a4:	9b08      	ldr	r3, [sp, #32]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d05c      	beq.n	800a264 <_dtoa_r+0xa3c>
 800a1aa:	6869      	ldr	r1, [r5, #4]
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f000 fa0b 	bl	800a5c8 <_Balloc>
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	b928      	cbnz	r0, 800a1c2 <_dtoa_r+0x99a>
 800a1b6:	4b82      	ldr	r3, [pc, #520]	@ (800a3c0 <_dtoa_r+0xb98>)
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1be:	f7ff bb4a 	b.w	8009856 <_dtoa_r+0x2e>
 800a1c2:	692a      	ldr	r2, [r5, #16]
 800a1c4:	3202      	adds	r2, #2
 800a1c6:	0092      	lsls	r2, r2, #2
 800a1c8:	f105 010c 	add.w	r1, r5, #12
 800a1cc:	300c      	adds	r0, #12
 800a1ce:	f7ff fa92 	bl	80096f6 <memcpy>
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4631      	mov	r1, r6
 800a1d6:	4648      	mov	r0, r9
 800a1d8:	f000 fbfc 	bl	800a9d4 <__lshift>
 800a1dc:	f10a 0301 	add.w	r3, sl, #1
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	eb0a 030b 	add.w	r3, sl, fp
 800a1e6:	9308      	str	r3, [sp, #32]
 800a1e8:	9b04      	ldr	r3, [sp, #16]
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	462f      	mov	r7, r5
 800a1f0:	9306      	str	r3, [sp, #24]
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	9b00      	ldr	r3, [sp, #0]
 800a1f6:	9802      	ldr	r0, [sp, #8]
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a1fe:	f7ff fa88 	bl	8009712 <quorem>
 800a202:	4603      	mov	r3, r0
 800a204:	3330      	adds	r3, #48	@ 0x30
 800a206:	9003      	str	r0, [sp, #12]
 800a208:	4639      	mov	r1, r7
 800a20a:	9802      	ldr	r0, [sp, #8]
 800a20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a20e:	f000 fc4d 	bl	800aaac <__mcmp>
 800a212:	462a      	mov	r2, r5
 800a214:	9004      	str	r0, [sp, #16]
 800a216:	4621      	mov	r1, r4
 800a218:	4648      	mov	r0, r9
 800a21a:	f000 fc63 	bl	800aae4 <__mdiff>
 800a21e:	68c2      	ldr	r2, [r0, #12]
 800a220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a222:	4606      	mov	r6, r0
 800a224:	bb02      	cbnz	r2, 800a268 <_dtoa_r+0xa40>
 800a226:	4601      	mov	r1, r0
 800a228:	9802      	ldr	r0, [sp, #8]
 800a22a:	f000 fc3f 	bl	800aaac <__mcmp>
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	4602      	mov	r2, r0
 800a232:	4631      	mov	r1, r6
 800a234:	4648      	mov	r0, r9
 800a236:	920c      	str	r2, [sp, #48]	@ 0x30
 800a238:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23a:	f000 fa05 	bl	800a648 <_Bfree>
 800a23e:	9b07      	ldr	r3, [sp, #28]
 800a240:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a242:	9e00      	ldr	r6, [sp, #0]
 800a244:	ea42 0103 	orr.w	r1, r2, r3
 800a248:	9b06      	ldr	r3, [sp, #24]
 800a24a:	4319      	orrs	r1, r3
 800a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24e:	d10d      	bne.n	800a26c <_dtoa_r+0xa44>
 800a250:	2b39      	cmp	r3, #57	@ 0x39
 800a252:	d027      	beq.n	800a2a4 <_dtoa_r+0xa7c>
 800a254:	9a04      	ldr	r2, [sp, #16]
 800a256:	2a00      	cmp	r2, #0
 800a258:	dd01      	ble.n	800a25e <_dtoa_r+0xa36>
 800a25a:	9b03      	ldr	r3, [sp, #12]
 800a25c:	3331      	adds	r3, #49	@ 0x31
 800a25e:	f88b 3000 	strb.w	r3, [fp]
 800a262:	e52e      	b.n	8009cc2 <_dtoa_r+0x49a>
 800a264:	4628      	mov	r0, r5
 800a266:	e7b9      	b.n	800a1dc <_dtoa_r+0x9b4>
 800a268:	2201      	movs	r2, #1
 800a26a:	e7e2      	b.n	800a232 <_dtoa_r+0xa0a>
 800a26c:	9904      	ldr	r1, [sp, #16]
 800a26e:	2900      	cmp	r1, #0
 800a270:	db04      	blt.n	800a27c <_dtoa_r+0xa54>
 800a272:	9807      	ldr	r0, [sp, #28]
 800a274:	4301      	orrs	r1, r0
 800a276:	9806      	ldr	r0, [sp, #24]
 800a278:	4301      	orrs	r1, r0
 800a27a:	d120      	bne.n	800a2be <_dtoa_r+0xa96>
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	ddee      	ble.n	800a25e <_dtoa_r+0xa36>
 800a280:	9902      	ldr	r1, [sp, #8]
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	2201      	movs	r2, #1
 800a286:	4648      	mov	r0, r9
 800a288:	f000 fba4 	bl	800a9d4 <__lshift>
 800a28c:	4621      	mov	r1, r4
 800a28e:	9002      	str	r0, [sp, #8]
 800a290:	f000 fc0c 	bl	800aaac <__mcmp>
 800a294:	2800      	cmp	r0, #0
 800a296:	9b00      	ldr	r3, [sp, #0]
 800a298:	dc02      	bgt.n	800a2a0 <_dtoa_r+0xa78>
 800a29a:	d1e0      	bne.n	800a25e <_dtoa_r+0xa36>
 800a29c:	07da      	lsls	r2, r3, #31
 800a29e:	d5de      	bpl.n	800a25e <_dtoa_r+0xa36>
 800a2a0:	2b39      	cmp	r3, #57	@ 0x39
 800a2a2:	d1da      	bne.n	800a25a <_dtoa_r+0xa32>
 800a2a4:	2339      	movs	r3, #57	@ 0x39
 800a2a6:	f88b 3000 	strb.w	r3, [fp]
 800a2aa:	4633      	mov	r3, r6
 800a2ac:	461e      	mov	r6, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2b4:	2a39      	cmp	r2, #57	@ 0x39
 800a2b6:	d04e      	beq.n	800a356 <_dtoa_r+0xb2e>
 800a2b8:	3201      	adds	r2, #1
 800a2ba:	701a      	strb	r2, [r3, #0]
 800a2bc:	e501      	b.n	8009cc2 <_dtoa_r+0x49a>
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	dd03      	ble.n	800a2ca <_dtoa_r+0xaa2>
 800a2c2:	2b39      	cmp	r3, #57	@ 0x39
 800a2c4:	d0ee      	beq.n	800a2a4 <_dtoa_r+0xa7c>
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	e7c9      	b.n	800a25e <_dtoa_r+0xa36>
 800a2ca:	9a00      	ldr	r2, [sp, #0]
 800a2cc:	9908      	ldr	r1, [sp, #32]
 800a2ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2d2:	428a      	cmp	r2, r1
 800a2d4:	d028      	beq.n	800a328 <_dtoa_r+0xb00>
 800a2d6:	9902      	ldr	r1, [sp, #8]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	220a      	movs	r2, #10
 800a2dc:	4648      	mov	r0, r9
 800a2de:	f000 f9d5 	bl	800a68c <__multadd>
 800a2e2:	42af      	cmp	r7, r5
 800a2e4:	9002      	str	r0, [sp, #8]
 800a2e6:	f04f 0300 	mov.w	r3, #0
 800a2ea:	f04f 020a 	mov.w	r2, #10
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4648      	mov	r0, r9
 800a2f2:	d107      	bne.n	800a304 <_dtoa_r+0xadc>
 800a2f4:	f000 f9ca 	bl	800a68c <__multadd>
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	9b00      	ldr	r3, [sp, #0]
 800a2fe:	3301      	adds	r3, #1
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	e777      	b.n	800a1f4 <_dtoa_r+0x9cc>
 800a304:	f000 f9c2 	bl	800a68c <__multadd>
 800a308:	4629      	mov	r1, r5
 800a30a:	4607      	mov	r7, r0
 800a30c:	2300      	movs	r3, #0
 800a30e:	220a      	movs	r2, #10
 800a310:	4648      	mov	r0, r9
 800a312:	f000 f9bb 	bl	800a68c <__multadd>
 800a316:	4605      	mov	r5, r0
 800a318:	e7f0      	b.n	800a2fc <_dtoa_r+0xad4>
 800a31a:	f1bb 0f00 	cmp.w	fp, #0
 800a31e:	bfcc      	ite	gt
 800a320:	465e      	movgt	r6, fp
 800a322:	2601      	movle	r6, #1
 800a324:	4456      	add	r6, sl
 800a326:	2700      	movs	r7, #0
 800a328:	9902      	ldr	r1, [sp, #8]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	2201      	movs	r2, #1
 800a32e:	4648      	mov	r0, r9
 800a330:	f000 fb50 	bl	800a9d4 <__lshift>
 800a334:	4621      	mov	r1, r4
 800a336:	9002      	str	r0, [sp, #8]
 800a338:	f000 fbb8 	bl	800aaac <__mcmp>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	dcb4      	bgt.n	800a2aa <_dtoa_r+0xa82>
 800a340:	d102      	bne.n	800a348 <_dtoa_r+0xb20>
 800a342:	9b00      	ldr	r3, [sp, #0]
 800a344:	07db      	lsls	r3, r3, #31
 800a346:	d4b0      	bmi.n	800a2aa <_dtoa_r+0xa82>
 800a348:	4633      	mov	r3, r6
 800a34a:	461e      	mov	r6, r3
 800a34c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a350:	2a30      	cmp	r2, #48	@ 0x30
 800a352:	d0fa      	beq.n	800a34a <_dtoa_r+0xb22>
 800a354:	e4b5      	b.n	8009cc2 <_dtoa_r+0x49a>
 800a356:	459a      	cmp	sl, r3
 800a358:	d1a8      	bne.n	800a2ac <_dtoa_r+0xa84>
 800a35a:	2331      	movs	r3, #49	@ 0x31
 800a35c:	f108 0801 	add.w	r8, r8, #1
 800a360:	f88a 3000 	strb.w	r3, [sl]
 800a364:	e4ad      	b.n	8009cc2 <_dtoa_r+0x49a>
 800a366:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a368:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a3c4 <_dtoa_r+0xb9c>
 800a36c:	b11b      	cbz	r3, 800a376 <_dtoa_r+0xb4e>
 800a36e:	f10a 0308 	add.w	r3, sl, #8
 800a372:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	4650      	mov	r0, sl
 800a378:	b017      	add	sp, #92	@ 0x5c
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	9b07      	ldr	r3, [sp, #28]
 800a380:	2b01      	cmp	r3, #1
 800a382:	f77f ae2e 	ble.w	8009fe2 <_dtoa_r+0x7ba>
 800a386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	2001      	movs	r0, #1
 800a38c:	e64d      	b.n	800a02a <_dtoa_r+0x802>
 800a38e:	f1bb 0f00 	cmp.w	fp, #0
 800a392:	f77f aed9 	ble.w	800a148 <_dtoa_r+0x920>
 800a396:	4656      	mov	r6, sl
 800a398:	9802      	ldr	r0, [sp, #8]
 800a39a:	4621      	mov	r1, r4
 800a39c:	f7ff f9b9 	bl	8009712 <quorem>
 800a3a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a3a4:	f806 3b01 	strb.w	r3, [r6], #1
 800a3a8:	eba6 020a 	sub.w	r2, r6, sl
 800a3ac:	4593      	cmp	fp, r2
 800a3ae:	ddb4      	ble.n	800a31a <_dtoa_r+0xaf2>
 800a3b0:	9902      	ldr	r1, [sp, #8]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	220a      	movs	r2, #10
 800a3b6:	4648      	mov	r0, r9
 800a3b8:	f000 f968 	bl	800a68c <__multadd>
 800a3bc:	9002      	str	r0, [sp, #8]
 800a3be:	e7eb      	b.n	800a398 <_dtoa_r+0xb70>
 800a3c0:	0800bbe8 	.word	0x0800bbe8
 800a3c4:	0800bb6c 	.word	0x0800bb6c

0800a3c8 <_free_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d041      	beq.n	800a454 <_free_r+0x8c>
 800a3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d4:	1f0c      	subs	r4, r1, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfb8      	it	lt
 800a3da:	18e4      	addlt	r4, r4, r3
 800a3dc:	f000 f8e8 	bl	800a5b0 <__malloc_lock>
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a458 <_free_r+0x90>)
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	b933      	cbnz	r3, 800a3f4 <_free_r+0x2c>
 800a3e6:	6063      	str	r3, [r4, #4]
 800a3e8:	6014      	str	r4, [r2, #0]
 800a3ea:	4628      	mov	r0, r5
 800a3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3f0:	f000 b8e4 	b.w	800a5bc <__malloc_unlock>
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d908      	bls.n	800a40a <_free_r+0x42>
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	1821      	adds	r1, r4, r0
 800a3fc:	428b      	cmp	r3, r1
 800a3fe:	bf01      	itttt	eq
 800a400:	6819      	ldreq	r1, [r3, #0]
 800a402:	685b      	ldreq	r3, [r3, #4]
 800a404:	1809      	addeq	r1, r1, r0
 800a406:	6021      	streq	r1, [r4, #0]
 800a408:	e7ed      	b.n	800a3e6 <_free_r+0x1e>
 800a40a:	461a      	mov	r2, r3
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	b10b      	cbz	r3, 800a414 <_free_r+0x4c>
 800a410:	42a3      	cmp	r3, r4
 800a412:	d9fa      	bls.n	800a40a <_free_r+0x42>
 800a414:	6811      	ldr	r1, [r2, #0]
 800a416:	1850      	adds	r0, r2, r1
 800a418:	42a0      	cmp	r0, r4
 800a41a:	d10b      	bne.n	800a434 <_free_r+0x6c>
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	4401      	add	r1, r0
 800a420:	1850      	adds	r0, r2, r1
 800a422:	4283      	cmp	r3, r0
 800a424:	6011      	str	r1, [r2, #0]
 800a426:	d1e0      	bne.n	800a3ea <_free_r+0x22>
 800a428:	6818      	ldr	r0, [r3, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	6053      	str	r3, [r2, #4]
 800a42e:	4408      	add	r0, r1
 800a430:	6010      	str	r0, [r2, #0]
 800a432:	e7da      	b.n	800a3ea <_free_r+0x22>
 800a434:	d902      	bls.n	800a43c <_free_r+0x74>
 800a436:	230c      	movs	r3, #12
 800a438:	602b      	str	r3, [r5, #0]
 800a43a:	e7d6      	b.n	800a3ea <_free_r+0x22>
 800a43c:	6820      	ldr	r0, [r4, #0]
 800a43e:	1821      	adds	r1, r4, r0
 800a440:	428b      	cmp	r3, r1
 800a442:	bf04      	itt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	6063      	str	r3, [r4, #4]
 800a44a:	bf04      	itt	eq
 800a44c:	1809      	addeq	r1, r1, r0
 800a44e:	6021      	streq	r1, [r4, #0]
 800a450:	6054      	str	r4, [r2, #4]
 800a452:	e7ca      	b.n	800a3ea <_free_r+0x22>
 800a454:	bd38      	pop	{r3, r4, r5, pc}
 800a456:	bf00      	nop
 800a458:	20006374 	.word	0x20006374

0800a45c <malloc>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	@ (800a468 <malloc+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f000 b825 	b.w	800a4b0 <_malloc_r>
 800a466:	bf00      	nop
 800a468:	20000070 	.word	0x20000070

0800a46c <sbrk_aligned>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4e0f      	ldr	r6, [pc, #60]	@ (800a4ac <sbrk_aligned+0x40>)
 800a470:	460c      	mov	r4, r1
 800a472:	6831      	ldr	r1, [r6, #0]
 800a474:	4605      	mov	r5, r0
 800a476:	b911      	cbnz	r1, 800a47e <sbrk_aligned+0x12>
 800a478:	f000 fec2 	bl	800b200 <_sbrk_r>
 800a47c:	6030      	str	r0, [r6, #0]
 800a47e:	4621      	mov	r1, r4
 800a480:	4628      	mov	r0, r5
 800a482:	f000 febd 	bl	800b200 <_sbrk_r>
 800a486:	1c43      	adds	r3, r0, #1
 800a488:	d103      	bne.n	800a492 <sbrk_aligned+0x26>
 800a48a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a48e:	4620      	mov	r0, r4
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	1cc4      	adds	r4, r0, #3
 800a494:	f024 0403 	bic.w	r4, r4, #3
 800a498:	42a0      	cmp	r0, r4
 800a49a:	d0f8      	beq.n	800a48e <sbrk_aligned+0x22>
 800a49c:	1a21      	subs	r1, r4, r0
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 feae 	bl	800b200 <_sbrk_r>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	d1f2      	bne.n	800a48e <sbrk_aligned+0x22>
 800a4a8:	e7ef      	b.n	800a48a <sbrk_aligned+0x1e>
 800a4aa:	bf00      	nop
 800a4ac:	20006370 	.word	0x20006370

0800a4b0 <_malloc_r>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	1ccd      	adds	r5, r1, #3
 800a4b6:	f025 0503 	bic.w	r5, r5, #3
 800a4ba:	3508      	adds	r5, #8
 800a4bc:	2d0c      	cmp	r5, #12
 800a4be:	bf38      	it	cc
 800a4c0:	250c      	movcc	r5, #12
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	db01      	blt.n	800a4cc <_malloc_r+0x1c>
 800a4c8:	42a9      	cmp	r1, r5
 800a4ca:	d904      	bls.n	800a4d6 <_malloc_r+0x26>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	6033      	str	r3, [r6, #0]
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5ac <_malloc_r+0xfc>
 800a4da:	f000 f869 	bl	800a5b0 <__malloc_lock>
 800a4de:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e2:	461c      	mov	r4, r3
 800a4e4:	bb44      	cbnz	r4, 800a538 <_malloc_r+0x88>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff ffbf 	bl	800a46c <sbrk_aligned>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	d158      	bne.n	800a5a6 <_malloc_r+0xf6>
 800a4f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a4f8:	4627      	mov	r7, r4
 800a4fa:	2f00      	cmp	r7, #0
 800a4fc:	d143      	bne.n	800a586 <_malloc_r+0xd6>
 800a4fe:	2c00      	cmp	r4, #0
 800a500:	d04b      	beq.n	800a59a <_malloc_r+0xea>
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	4639      	mov	r1, r7
 800a506:	4630      	mov	r0, r6
 800a508:	eb04 0903 	add.w	r9, r4, r3
 800a50c:	f000 fe78 	bl	800b200 <_sbrk_r>
 800a510:	4581      	cmp	r9, r0
 800a512:	d142      	bne.n	800a59a <_malloc_r+0xea>
 800a514:	6821      	ldr	r1, [r4, #0]
 800a516:	1a6d      	subs	r5, r5, r1
 800a518:	4629      	mov	r1, r5
 800a51a:	4630      	mov	r0, r6
 800a51c:	f7ff ffa6 	bl	800a46c <sbrk_aligned>
 800a520:	3001      	adds	r0, #1
 800a522:	d03a      	beq.n	800a59a <_malloc_r+0xea>
 800a524:	6823      	ldr	r3, [r4, #0]
 800a526:	442b      	add	r3, r5
 800a528:	6023      	str	r3, [r4, #0]
 800a52a:	f8d8 3000 	ldr.w	r3, [r8]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	bb62      	cbnz	r2, 800a58c <_malloc_r+0xdc>
 800a532:	f8c8 7000 	str.w	r7, [r8]
 800a536:	e00f      	b.n	800a558 <_malloc_r+0xa8>
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	1b52      	subs	r2, r2, r5
 800a53c:	d420      	bmi.n	800a580 <_malloc_r+0xd0>
 800a53e:	2a0b      	cmp	r2, #11
 800a540:	d917      	bls.n	800a572 <_malloc_r+0xc2>
 800a542:	1961      	adds	r1, r4, r5
 800a544:	42a3      	cmp	r3, r4
 800a546:	6025      	str	r5, [r4, #0]
 800a548:	bf18      	it	ne
 800a54a:	6059      	strne	r1, [r3, #4]
 800a54c:	6863      	ldr	r3, [r4, #4]
 800a54e:	bf08      	it	eq
 800a550:	f8c8 1000 	streq.w	r1, [r8]
 800a554:	5162      	str	r2, [r4, r5]
 800a556:	604b      	str	r3, [r1, #4]
 800a558:	4630      	mov	r0, r6
 800a55a:	f000 f82f 	bl	800a5bc <__malloc_unlock>
 800a55e:	f104 000b 	add.w	r0, r4, #11
 800a562:	1d23      	adds	r3, r4, #4
 800a564:	f020 0007 	bic.w	r0, r0, #7
 800a568:	1ac2      	subs	r2, r0, r3
 800a56a:	bf1c      	itt	ne
 800a56c:	1a1b      	subne	r3, r3, r0
 800a56e:	50a3      	strne	r3, [r4, r2]
 800a570:	e7af      	b.n	800a4d2 <_malloc_r+0x22>
 800a572:	6862      	ldr	r2, [r4, #4]
 800a574:	42a3      	cmp	r3, r4
 800a576:	bf0c      	ite	eq
 800a578:	f8c8 2000 	streq.w	r2, [r8]
 800a57c:	605a      	strne	r2, [r3, #4]
 800a57e:	e7eb      	b.n	800a558 <_malloc_r+0xa8>
 800a580:	4623      	mov	r3, r4
 800a582:	6864      	ldr	r4, [r4, #4]
 800a584:	e7ae      	b.n	800a4e4 <_malloc_r+0x34>
 800a586:	463c      	mov	r4, r7
 800a588:	687f      	ldr	r7, [r7, #4]
 800a58a:	e7b6      	b.n	800a4fa <_malloc_r+0x4a>
 800a58c:	461a      	mov	r2, r3
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	42a3      	cmp	r3, r4
 800a592:	d1fb      	bne.n	800a58c <_malloc_r+0xdc>
 800a594:	2300      	movs	r3, #0
 800a596:	6053      	str	r3, [r2, #4]
 800a598:	e7de      	b.n	800a558 <_malloc_r+0xa8>
 800a59a:	230c      	movs	r3, #12
 800a59c:	6033      	str	r3, [r6, #0]
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f000 f80c 	bl	800a5bc <__malloc_unlock>
 800a5a4:	e794      	b.n	800a4d0 <_malloc_r+0x20>
 800a5a6:	6005      	str	r5, [r0, #0]
 800a5a8:	e7d6      	b.n	800a558 <_malloc_r+0xa8>
 800a5aa:	bf00      	nop
 800a5ac:	20006374 	.word	0x20006374

0800a5b0 <__malloc_lock>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	@ (800a5b8 <__malloc_lock+0x8>)
 800a5b2:	f7ff b89e 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	2000636c 	.word	0x2000636c

0800a5bc <__malloc_unlock>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	@ (800a5c4 <__malloc_unlock+0x8>)
 800a5be:	f7ff b899 	b.w	80096f4 <__retarget_lock_release_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	2000636c 	.word	0x2000636c

0800a5c8 <_Balloc>:
 800a5c8:	b570      	push	{r4, r5, r6, lr}
 800a5ca:	69c6      	ldr	r6, [r0, #28]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	b976      	cbnz	r6, 800a5f0 <_Balloc+0x28>
 800a5d2:	2010      	movs	r0, #16
 800a5d4:	f7ff ff42 	bl	800a45c <malloc>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	61e0      	str	r0, [r4, #28]
 800a5dc:	b920      	cbnz	r0, 800a5e8 <_Balloc+0x20>
 800a5de:	4b18      	ldr	r3, [pc, #96]	@ (800a640 <_Balloc+0x78>)
 800a5e0:	4818      	ldr	r0, [pc, #96]	@ (800a644 <_Balloc+0x7c>)
 800a5e2:	216b      	movs	r1, #107	@ 0x6b
 800a5e4:	f000 fe1c 	bl	800b220 <__assert_func>
 800a5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5ec:	6006      	str	r6, [r0, #0]
 800a5ee:	60c6      	str	r6, [r0, #12]
 800a5f0:	69e6      	ldr	r6, [r4, #28]
 800a5f2:	68f3      	ldr	r3, [r6, #12]
 800a5f4:	b183      	cbz	r3, 800a618 <_Balloc+0x50>
 800a5f6:	69e3      	ldr	r3, [r4, #28]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5fe:	b9b8      	cbnz	r0, 800a630 <_Balloc+0x68>
 800a600:	2101      	movs	r1, #1
 800a602:	fa01 f605 	lsl.w	r6, r1, r5
 800a606:	1d72      	adds	r2, r6, #5
 800a608:	0092      	lsls	r2, r2, #2
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fe26 	bl	800b25c <_calloc_r>
 800a610:	b160      	cbz	r0, 800a62c <_Balloc+0x64>
 800a612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a616:	e00e      	b.n	800a636 <_Balloc+0x6e>
 800a618:	2221      	movs	r2, #33	@ 0x21
 800a61a:	2104      	movs	r1, #4
 800a61c:	4620      	mov	r0, r4
 800a61e:	f000 fe1d 	bl	800b25c <_calloc_r>
 800a622:	69e3      	ldr	r3, [r4, #28]
 800a624:	60f0      	str	r0, [r6, #12]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e4      	bne.n	800a5f6 <_Balloc+0x2e>
 800a62c:	2000      	movs	r0, #0
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	6802      	ldr	r2, [r0, #0]
 800a632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a636:	2300      	movs	r3, #0
 800a638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a63c:	e7f7      	b.n	800a62e <_Balloc+0x66>
 800a63e:	bf00      	nop
 800a640:	0800bb79 	.word	0x0800bb79
 800a644:	0800bbf9 	.word	0x0800bbf9

0800a648 <_Bfree>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	69c6      	ldr	r6, [r0, #28]
 800a64c:	4605      	mov	r5, r0
 800a64e:	460c      	mov	r4, r1
 800a650:	b976      	cbnz	r6, 800a670 <_Bfree+0x28>
 800a652:	2010      	movs	r0, #16
 800a654:	f7ff ff02 	bl	800a45c <malloc>
 800a658:	4602      	mov	r2, r0
 800a65a:	61e8      	str	r0, [r5, #28]
 800a65c:	b920      	cbnz	r0, 800a668 <_Bfree+0x20>
 800a65e:	4b09      	ldr	r3, [pc, #36]	@ (800a684 <_Bfree+0x3c>)
 800a660:	4809      	ldr	r0, [pc, #36]	@ (800a688 <_Bfree+0x40>)
 800a662:	218f      	movs	r1, #143	@ 0x8f
 800a664:	f000 fddc 	bl	800b220 <__assert_func>
 800a668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a66c:	6006      	str	r6, [r0, #0]
 800a66e:	60c6      	str	r6, [r0, #12]
 800a670:	b13c      	cbz	r4, 800a682 <_Bfree+0x3a>
 800a672:	69eb      	ldr	r3, [r5, #28]
 800a674:	6862      	ldr	r2, [r4, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a67c:	6021      	str	r1, [r4, #0]
 800a67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	0800bb79 	.word	0x0800bb79
 800a688:	0800bbf9 	.word	0x0800bbf9

0800a68c <__multadd>:
 800a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a690:	690d      	ldr	r5, [r1, #16]
 800a692:	4607      	mov	r7, r0
 800a694:	460c      	mov	r4, r1
 800a696:	461e      	mov	r6, r3
 800a698:	f101 0c14 	add.w	ip, r1, #20
 800a69c:	2000      	movs	r0, #0
 800a69e:	f8dc 3000 	ldr.w	r3, [ip]
 800a6a2:	b299      	uxth	r1, r3
 800a6a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a6a8:	0c1e      	lsrs	r6, r3, #16
 800a6aa:	0c0b      	lsrs	r3, r1, #16
 800a6ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a6b0:	b289      	uxth	r1, r1
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6b8:	4285      	cmp	r5, r0
 800a6ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a6be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6c2:	dcec      	bgt.n	800a69e <__multadd+0x12>
 800a6c4:	b30e      	cbz	r6, 800a70a <__multadd+0x7e>
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	42ab      	cmp	r3, r5
 800a6ca:	dc19      	bgt.n	800a700 <__multadd+0x74>
 800a6cc:	6861      	ldr	r1, [r4, #4]
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	3101      	adds	r1, #1
 800a6d2:	f7ff ff79 	bl	800a5c8 <_Balloc>
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	b928      	cbnz	r0, 800a6e6 <__multadd+0x5a>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a710 <__multadd+0x84>)
 800a6de:	480d      	ldr	r0, [pc, #52]	@ (800a714 <__multadd+0x88>)
 800a6e0:	21ba      	movs	r1, #186	@ 0xba
 800a6e2:	f000 fd9d 	bl	800b220 <__assert_func>
 800a6e6:	6922      	ldr	r2, [r4, #16]
 800a6e8:	3202      	adds	r2, #2
 800a6ea:	f104 010c 	add.w	r1, r4, #12
 800a6ee:	0092      	lsls	r2, r2, #2
 800a6f0:	300c      	adds	r0, #12
 800a6f2:	f7ff f800 	bl	80096f6 <memcpy>
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7ff ffa5 	bl	800a648 <_Bfree>
 800a6fe:	4644      	mov	r4, r8
 800a700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a704:	3501      	adds	r5, #1
 800a706:	615e      	str	r6, [r3, #20]
 800a708:	6125      	str	r5, [r4, #16]
 800a70a:	4620      	mov	r0, r4
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	0800bbe8 	.word	0x0800bbe8
 800a714:	0800bbf9 	.word	0x0800bbf9

0800a718 <__hi0bits>:
 800a718:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a71c:	4603      	mov	r3, r0
 800a71e:	bf36      	itet	cc
 800a720:	0403      	lslcc	r3, r0, #16
 800a722:	2000      	movcs	r0, #0
 800a724:	2010      	movcc	r0, #16
 800a726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a72a:	bf3c      	itt	cc
 800a72c:	021b      	lslcc	r3, r3, #8
 800a72e:	3008      	addcc	r0, #8
 800a730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a734:	bf3c      	itt	cc
 800a736:	011b      	lslcc	r3, r3, #4
 800a738:	3004      	addcc	r0, #4
 800a73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a73e:	bf3c      	itt	cc
 800a740:	009b      	lslcc	r3, r3, #2
 800a742:	3002      	addcc	r0, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	db05      	blt.n	800a754 <__hi0bits+0x3c>
 800a748:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a74c:	f100 0001 	add.w	r0, r0, #1
 800a750:	bf08      	it	eq
 800a752:	2020      	moveq	r0, #32
 800a754:	4770      	bx	lr

0800a756 <__lo0bits>:
 800a756:	6803      	ldr	r3, [r0, #0]
 800a758:	4602      	mov	r2, r0
 800a75a:	f013 0007 	ands.w	r0, r3, #7
 800a75e:	d00b      	beq.n	800a778 <__lo0bits+0x22>
 800a760:	07d9      	lsls	r1, r3, #31
 800a762:	d421      	bmi.n	800a7a8 <__lo0bits+0x52>
 800a764:	0798      	lsls	r0, r3, #30
 800a766:	bf49      	itett	mi
 800a768:	085b      	lsrmi	r3, r3, #1
 800a76a:	089b      	lsrpl	r3, r3, #2
 800a76c:	2001      	movmi	r0, #1
 800a76e:	6013      	strmi	r3, [r2, #0]
 800a770:	bf5c      	itt	pl
 800a772:	6013      	strpl	r3, [r2, #0]
 800a774:	2002      	movpl	r0, #2
 800a776:	4770      	bx	lr
 800a778:	b299      	uxth	r1, r3
 800a77a:	b909      	cbnz	r1, 800a780 <__lo0bits+0x2a>
 800a77c:	0c1b      	lsrs	r3, r3, #16
 800a77e:	2010      	movs	r0, #16
 800a780:	b2d9      	uxtb	r1, r3
 800a782:	b909      	cbnz	r1, 800a788 <__lo0bits+0x32>
 800a784:	3008      	adds	r0, #8
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	0719      	lsls	r1, r3, #28
 800a78a:	bf04      	itt	eq
 800a78c:	091b      	lsreq	r3, r3, #4
 800a78e:	3004      	addeq	r0, #4
 800a790:	0799      	lsls	r1, r3, #30
 800a792:	bf04      	itt	eq
 800a794:	089b      	lsreq	r3, r3, #2
 800a796:	3002      	addeq	r0, #2
 800a798:	07d9      	lsls	r1, r3, #31
 800a79a:	d403      	bmi.n	800a7a4 <__lo0bits+0x4e>
 800a79c:	085b      	lsrs	r3, r3, #1
 800a79e:	f100 0001 	add.w	r0, r0, #1
 800a7a2:	d003      	beq.n	800a7ac <__lo0bits+0x56>
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	4770      	bx	lr
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	4770      	bx	lr
 800a7ac:	2020      	movs	r0, #32
 800a7ae:	4770      	bx	lr

0800a7b0 <__i2b>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	f7ff ff07 	bl	800a5c8 <_Balloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	b928      	cbnz	r0, 800a7ca <__i2b+0x1a>
 800a7be:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <__i2b+0x24>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	@ (800a7d8 <__i2b+0x28>)
 800a7c2:	f240 1145 	movw	r1, #325	@ 0x145
 800a7c6:	f000 fd2b 	bl	800b220 <__assert_func>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	6144      	str	r4, [r0, #20]
 800a7ce:	6103      	str	r3, [r0, #16]
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800bbe8 	.word	0x0800bbe8
 800a7d8:	0800bbf9 	.word	0x0800bbf9

0800a7dc <__multiply>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	4617      	mov	r7, r2
 800a7e2:	690a      	ldr	r2, [r1, #16]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	bfa8      	it	ge
 800a7ea:	463b      	movge	r3, r7
 800a7ec:	4689      	mov	r9, r1
 800a7ee:	bfa4      	itt	ge
 800a7f0:	460f      	movge	r7, r1
 800a7f2:	4699      	movge	r9, r3
 800a7f4:	693d      	ldr	r5, [r7, #16]
 800a7f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	eb05 060a 	add.w	r6, r5, sl
 800a802:	42b3      	cmp	r3, r6
 800a804:	b085      	sub	sp, #20
 800a806:	bfb8      	it	lt
 800a808:	3101      	addlt	r1, #1
 800a80a:	f7ff fedd 	bl	800a5c8 <_Balloc>
 800a80e:	b930      	cbnz	r0, 800a81e <__multiply+0x42>
 800a810:	4602      	mov	r2, r0
 800a812:	4b41      	ldr	r3, [pc, #260]	@ (800a918 <__multiply+0x13c>)
 800a814:	4841      	ldr	r0, [pc, #260]	@ (800a91c <__multiply+0x140>)
 800a816:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a81a:	f000 fd01 	bl	800b220 <__assert_func>
 800a81e:	f100 0414 	add.w	r4, r0, #20
 800a822:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a826:	4623      	mov	r3, r4
 800a828:	2200      	movs	r2, #0
 800a82a:	4573      	cmp	r3, lr
 800a82c:	d320      	bcc.n	800a870 <__multiply+0x94>
 800a82e:	f107 0814 	add.w	r8, r7, #20
 800a832:	f109 0114 	add.w	r1, r9, #20
 800a836:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a83a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a83e:	9302      	str	r3, [sp, #8]
 800a840:	1beb      	subs	r3, r5, r7
 800a842:	3b15      	subs	r3, #21
 800a844:	f023 0303 	bic.w	r3, r3, #3
 800a848:	3304      	adds	r3, #4
 800a84a:	3715      	adds	r7, #21
 800a84c:	42bd      	cmp	r5, r7
 800a84e:	bf38      	it	cc
 800a850:	2304      	movcc	r3, #4
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	9b02      	ldr	r3, [sp, #8]
 800a856:	9103      	str	r1, [sp, #12]
 800a858:	428b      	cmp	r3, r1
 800a85a:	d80c      	bhi.n	800a876 <__multiply+0x9a>
 800a85c:	2e00      	cmp	r6, #0
 800a85e:	dd03      	ble.n	800a868 <__multiply+0x8c>
 800a860:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a864:	2b00      	cmp	r3, #0
 800a866:	d055      	beq.n	800a914 <__multiply+0x138>
 800a868:	6106      	str	r6, [r0, #16]
 800a86a:	b005      	add	sp, #20
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a870:	f843 2b04 	str.w	r2, [r3], #4
 800a874:	e7d9      	b.n	800a82a <__multiply+0x4e>
 800a876:	f8b1 a000 	ldrh.w	sl, [r1]
 800a87a:	f1ba 0f00 	cmp.w	sl, #0
 800a87e:	d01f      	beq.n	800a8c0 <__multiply+0xe4>
 800a880:	46c4      	mov	ip, r8
 800a882:	46a1      	mov	r9, r4
 800a884:	2700      	movs	r7, #0
 800a886:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a88a:	f8d9 3000 	ldr.w	r3, [r9]
 800a88e:	fa1f fb82 	uxth.w	fp, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	fb0a 330b 	mla	r3, sl, fp, r3
 800a898:	443b      	add	r3, r7
 800a89a:	f8d9 7000 	ldr.w	r7, [r9]
 800a89e:	0c12      	lsrs	r2, r2, #16
 800a8a0:	0c3f      	lsrs	r7, r7, #16
 800a8a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8b0:	4565      	cmp	r5, ip
 800a8b2:	f849 3b04 	str.w	r3, [r9], #4
 800a8b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a8ba:	d8e4      	bhi.n	800a886 <__multiply+0xaa>
 800a8bc:	9b01      	ldr	r3, [sp, #4]
 800a8be:	50e7      	str	r7, [r4, r3]
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a8c6:	3104      	adds	r1, #4
 800a8c8:	f1b9 0f00 	cmp.w	r9, #0
 800a8cc:	d020      	beq.n	800a910 <__multiply+0x134>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	4647      	mov	r7, r8
 800a8d2:	46a4      	mov	ip, r4
 800a8d4:	f04f 0a00 	mov.w	sl, #0
 800a8d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a8dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a8e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a8e4:	4452      	add	r2, sl
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8ec:	f84c 3b04 	str.w	r3, [ip], #4
 800a8f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a8f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a8fc:	fb09 330a 	mla	r3, r9, sl, r3
 800a900:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a904:	42bd      	cmp	r5, r7
 800a906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a90a:	d8e5      	bhi.n	800a8d8 <__multiply+0xfc>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	50a3      	str	r3, [r4, r2]
 800a910:	3404      	adds	r4, #4
 800a912:	e79f      	b.n	800a854 <__multiply+0x78>
 800a914:	3e01      	subs	r6, #1
 800a916:	e7a1      	b.n	800a85c <__multiply+0x80>
 800a918:	0800bbe8 	.word	0x0800bbe8
 800a91c:	0800bbf9 	.word	0x0800bbf9

0800a920 <__pow5mult>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	4615      	mov	r5, r2
 800a926:	f012 0203 	ands.w	r2, r2, #3
 800a92a:	4607      	mov	r7, r0
 800a92c:	460e      	mov	r6, r1
 800a92e:	d007      	beq.n	800a940 <__pow5mult+0x20>
 800a930:	4c25      	ldr	r4, [pc, #148]	@ (800a9c8 <__pow5mult+0xa8>)
 800a932:	3a01      	subs	r2, #1
 800a934:	2300      	movs	r3, #0
 800a936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a93a:	f7ff fea7 	bl	800a68c <__multadd>
 800a93e:	4606      	mov	r6, r0
 800a940:	10ad      	asrs	r5, r5, #2
 800a942:	d03d      	beq.n	800a9c0 <__pow5mult+0xa0>
 800a944:	69fc      	ldr	r4, [r7, #28]
 800a946:	b97c      	cbnz	r4, 800a968 <__pow5mult+0x48>
 800a948:	2010      	movs	r0, #16
 800a94a:	f7ff fd87 	bl	800a45c <malloc>
 800a94e:	4602      	mov	r2, r0
 800a950:	61f8      	str	r0, [r7, #28]
 800a952:	b928      	cbnz	r0, 800a960 <__pow5mult+0x40>
 800a954:	4b1d      	ldr	r3, [pc, #116]	@ (800a9cc <__pow5mult+0xac>)
 800a956:	481e      	ldr	r0, [pc, #120]	@ (800a9d0 <__pow5mult+0xb0>)
 800a958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a95c:	f000 fc60 	bl	800b220 <__assert_func>
 800a960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a964:	6004      	str	r4, [r0, #0]
 800a966:	60c4      	str	r4, [r0, #12]
 800a968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a970:	b94c      	cbnz	r4, 800a986 <__pow5mult+0x66>
 800a972:	f240 2171 	movw	r1, #625	@ 0x271
 800a976:	4638      	mov	r0, r7
 800a978:	f7ff ff1a 	bl	800a7b0 <__i2b>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a982:	4604      	mov	r4, r0
 800a984:	6003      	str	r3, [r0, #0]
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	07eb      	lsls	r3, r5, #31
 800a98c:	d50a      	bpl.n	800a9a4 <__pow5mult+0x84>
 800a98e:	4631      	mov	r1, r6
 800a990:	4622      	mov	r2, r4
 800a992:	4638      	mov	r0, r7
 800a994:	f7ff ff22 	bl	800a7dc <__multiply>
 800a998:	4631      	mov	r1, r6
 800a99a:	4680      	mov	r8, r0
 800a99c:	4638      	mov	r0, r7
 800a99e:	f7ff fe53 	bl	800a648 <_Bfree>
 800a9a2:	4646      	mov	r6, r8
 800a9a4:	106d      	asrs	r5, r5, #1
 800a9a6:	d00b      	beq.n	800a9c0 <__pow5mult+0xa0>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	b938      	cbnz	r0, 800a9bc <__pow5mult+0x9c>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff ff13 	bl	800a7dc <__multiply>
 800a9b6:	6020      	str	r0, [r4, #0]
 800a9b8:	f8c0 9000 	str.w	r9, [r0]
 800a9bc:	4604      	mov	r4, r0
 800a9be:	e7e4      	b.n	800a98a <__pow5mult+0x6a>
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800bcac 	.word	0x0800bcac
 800a9cc:	0800bb79 	.word	0x0800bb79
 800a9d0:	0800bbf9 	.word	0x0800bbf9

0800a9d4 <__lshift>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	6849      	ldr	r1, [r1, #4]
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9ec:	f108 0601 	add.w	r6, r8, #1
 800a9f0:	42b3      	cmp	r3, r6
 800a9f2:	db0b      	blt.n	800aa0c <__lshift+0x38>
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff fde7 	bl	800a5c8 <_Balloc>
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	b948      	cbnz	r0, 800aa12 <__lshift+0x3e>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b28      	ldr	r3, [pc, #160]	@ (800aaa4 <__lshift+0xd0>)
 800aa02:	4829      	ldr	r0, [pc, #164]	@ (800aaa8 <__lshift+0xd4>)
 800aa04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa08:	f000 fc0a 	bl	800b220 <__assert_func>
 800aa0c:	3101      	adds	r1, #1
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	e7ee      	b.n	800a9f0 <__lshift+0x1c>
 800aa12:	2300      	movs	r3, #0
 800aa14:	f100 0114 	add.w	r1, r0, #20
 800aa18:	f100 0210 	add.w	r2, r0, #16
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4553      	cmp	r3, sl
 800aa20:	db33      	blt.n	800aa8a <__lshift+0xb6>
 800aa22:	6920      	ldr	r0, [r4, #16]
 800aa24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa28:	f104 0314 	add.w	r3, r4, #20
 800aa2c:	f019 091f 	ands.w	r9, r9, #31
 800aa30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa38:	d02b      	beq.n	800aa92 <__lshift+0xbe>
 800aa3a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa3e:	468a      	mov	sl, r1
 800aa40:	2200      	movs	r2, #0
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	fa00 f009 	lsl.w	r0, r0, r9
 800aa48:	4310      	orrs	r0, r2
 800aa4a:	f84a 0b04 	str.w	r0, [sl], #4
 800aa4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa52:	459c      	cmp	ip, r3
 800aa54:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa58:	d8f3      	bhi.n	800aa42 <__lshift+0x6e>
 800aa5a:	ebac 0304 	sub.w	r3, ip, r4
 800aa5e:	3b15      	subs	r3, #21
 800aa60:	f023 0303 	bic.w	r3, r3, #3
 800aa64:	3304      	adds	r3, #4
 800aa66:	f104 0015 	add.w	r0, r4, #21
 800aa6a:	4560      	cmp	r0, ip
 800aa6c:	bf88      	it	hi
 800aa6e:	2304      	movhi	r3, #4
 800aa70:	50ca      	str	r2, [r1, r3]
 800aa72:	b10a      	cbz	r2, 800aa78 <__lshift+0xa4>
 800aa74:	f108 0602 	add.w	r6, r8, #2
 800aa78:	3e01      	subs	r6, #1
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	612e      	str	r6, [r5, #16]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f7ff fde2 	bl	800a648 <_Bfree>
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa8e:	3301      	adds	r3, #1
 800aa90:	e7c5      	b.n	800aa1e <__lshift+0x4a>
 800aa92:	3904      	subs	r1, #4
 800aa94:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa98:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa9c:	459c      	cmp	ip, r3
 800aa9e:	d8f9      	bhi.n	800aa94 <__lshift+0xc0>
 800aaa0:	e7ea      	b.n	800aa78 <__lshift+0xa4>
 800aaa2:	bf00      	nop
 800aaa4:	0800bbe8 	.word	0x0800bbe8
 800aaa8:	0800bbf9 	.word	0x0800bbf9

0800aaac <__mcmp>:
 800aaac:	690a      	ldr	r2, [r1, #16]
 800aaae:	4603      	mov	r3, r0
 800aab0:	6900      	ldr	r0, [r0, #16]
 800aab2:	1a80      	subs	r0, r0, r2
 800aab4:	b530      	push	{r4, r5, lr}
 800aab6:	d10e      	bne.n	800aad6 <__mcmp+0x2a>
 800aab8:	3314      	adds	r3, #20
 800aaba:	3114      	adds	r1, #20
 800aabc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aacc:	4295      	cmp	r5, r2
 800aace:	d003      	beq.n	800aad8 <__mcmp+0x2c>
 800aad0:	d205      	bcs.n	800aade <__mcmp+0x32>
 800aad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aad6:	bd30      	pop	{r4, r5, pc}
 800aad8:	42a3      	cmp	r3, r4
 800aada:	d3f3      	bcc.n	800aac4 <__mcmp+0x18>
 800aadc:	e7fb      	b.n	800aad6 <__mcmp+0x2a>
 800aade:	2001      	movs	r0, #1
 800aae0:	e7f9      	b.n	800aad6 <__mcmp+0x2a>
	...

0800aae4 <__mdiff>:
 800aae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	4689      	mov	r9, r1
 800aaea:	4606      	mov	r6, r0
 800aaec:	4611      	mov	r1, r2
 800aaee:	4648      	mov	r0, r9
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	f7ff ffdb 	bl	800aaac <__mcmp>
 800aaf6:	1e05      	subs	r5, r0, #0
 800aaf8:	d112      	bne.n	800ab20 <__mdiff+0x3c>
 800aafa:	4629      	mov	r1, r5
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fd63 	bl	800a5c8 <_Balloc>
 800ab02:	4602      	mov	r2, r0
 800ab04:	b928      	cbnz	r0, 800ab12 <__mdiff+0x2e>
 800ab06:	4b3f      	ldr	r3, [pc, #252]	@ (800ac04 <__mdiff+0x120>)
 800ab08:	f240 2137 	movw	r1, #567	@ 0x237
 800ab0c:	483e      	ldr	r0, [pc, #248]	@ (800ac08 <__mdiff+0x124>)
 800ab0e:	f000 fb87 	bl	800b220 <__assert_func>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab18:	4610      	mov	r0, r2
 800ab1a:	b003      	add	sp, #12
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	bfbc      	itt	lt
 800ab22:	464b      	movlt	r3, r9
 800ab24:	46a1      	movlt	r9, r4
 800ab26:	4630      	mov	r0, r6
 800ab28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab2c:	bfba      	itte	lt
 800ab2e:	461c      	movlt	r4, r3
 800ab30:	2501      	movlt	r5, #1
 800ab32:	2500      	movge	r5, #0
 800ab34:	f7ff fd48 	bl	800a5c8 <_Balloc>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	b918      	cbnz	r0, 800ab44 <__mdiff+0x60>
 800ab3c:	4b31      	ldr	r3, [pc, #196]	@ (800ac04 <__mdiff+0x120>)
 800ab3e:	f240 2145 	movw	r1, #581	@ 0x245
 800ab42:	e7e3      	b.n	800ab0c <__mdiff+0x28>
 800ab44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab48:	6926      	ldr	r6, [r4, #16]
 800ab4a:	60c5      	str	r5, [r0, #12]
 800ab4c:	f109 0310 	add.w	r3, r9, #16
 800ab50:	f109 0514 	add.w	r5, r9, #20
 800ab54:	f104 0e14 	add.w	lr, r4, #20
 800ab58:	f100 0b14 	add.w	fp, r0, #20
 800ab5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ab60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	46d9      	mov	r9, fp
 800ab68:	f04f 0c00 	mov.w	ip, #0
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	fa1f f38a 	uxth.w	r3, sl
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	b283      	uxth	r3, r0
 800ab80:	1acb      	subs	r3, r1, r3
 800ab82:	0c00      	lsrs	r0, r0, #16
 800ab84:	4463      	add	r3, ip
 800ab86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab94:	4576      	cmp	r6, lr
 800ab96:	f849 3b04 	str.w	r3, [r9], #4
 800ab9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab9e:	d8e5      	bhi.n	800ab6c <__mdiff+0x88>
 800aba0:	1b33      	subs	r3, r6, r4
 800aba2:	3b15      	subs	r3, #21
 800aba4:	f023 0303 	bic.w	r3, r3, #3
 800aba8:	3415      	adds	r4, #21
 800abaa:	3304      	adds	r3, #4
 800abac:	42a6      	cmp	r6, r4
 800abae:	bf38      	it	cc
 800abb0:	2304      	movcc	r3, #4
 800abb2:	441d      	add	r5, r3
 800abb4:	445b      	add	r3, fp
 800abb6:	461e      	mov	r6, r3
 800abb8:	462c      	mov	r4, r5
 800abba:	4544      	cmp	r4, r8
 800abbc:	d30e      	bcc.n	800abdc <__mdiff+0xf8>
 800abbe:	f108 0103 	add.w	r1, r8, #3
 800abc2:	1b49      	subs	r1, r1, r5
 800abc4:	f021 0103 	bic.w	r1, r1, #3
 800abc8:	3d03      	subs	r5, #3
 800abca:	45a8      	cmp	r8, r5
 800abcc:	bf38      	it	cc
 800abce:	2100      	movcc	r1, #0
 800abd0:	440b      	add	r3, r1
 800abd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abd6:	b191      	cbz	r1, 800abfe <__mdiff+0x11a>
 800abd8:	6117      	str	r7, [r2, #16]
 800abda:	e79d      	b.n	800ab18 <__mdiff+0x34>
 800abdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800abe0:	46e6      	mov	lr, ip
 800abe2:	0c08      	lsrs	r0, r1, #16
 800abe4:	fa1c fc81 	uxtah	ip, ip, r1
 800abe8:	4471      	add	r1, lr
 800abea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800abee:	b289      	uxth	r1, r1
 800abf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800abf4:	f846 1b04 	str.w	r1, [r6], #4
 800abf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abfc:	e7dd      	b.n	800abba <__mdiff+0xd6>
 800abfe:	3f01      	subs	r7, #1
 800ac00:	e7e7      	b.n	800abd2 <__mdiff+0xee>
 800ac02:	bf00      	nop
 800ac04:	0800bbe8 	.word	0x0800bbe8
 800ac08:	0800bbf9 	.word	0x0800bbf9

0800ac0c <__d2b>:
 800ac0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	460f      	mov	r7, r1
 800ac12:	2101      	movs	r1, #1
 800ac14:	ec59 8b10 	vmov	r8, r9, d0
 800ac18:	4616      	mov	r6, r2
 800ac1a:	f7ff fcd5 	bl	800a5c8 <_Balloc>
 800ac1e:	4604      	mov	r4, r0
 800ac20:	b930      	cbnz	r0, 800ac30 <__d2b+0x24>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b23      	ldr	r3, [pc, #140]	@ (800acb4 <__d2b+0xa8>)
 800ac26:	4824      	ldr	r0, [pc, #144]	@ (800acb8 <__d2b+0xac>)
 800ac28:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac2c:	f000 faf8 	bl	800b220 <__assert_func>
 800ac30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac38:	b10d      	cbz	r5, 800ac3e <__d2b+0x32>
 800ac3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac3e:	9301      	str	r3, [sp, #4]
 800ac40:	f1b8 0300 	subs.w	r3, r8, #0
 800ac44:	d023      	beq.n	800ac8e <__d2b+0x82>
 800ac46:	4668      	mov	r0, sp
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	f7ff fd84 	bl	800a756 <__lo0bits>
 800ac4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac52:	b1d0      	cbz	r0, 800ac8a <__d2b+0x7e>
 800ac54:	f1c0 0320 	rsb	r3, r0, #32
 800ac58:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5c:	430b      	orrs	r3, r1
 800ac5e:	40c2      	lsrs	r2, r0
 800ac60:	6163      	str	r3, [r4, #20]
 800ac62:	9201      	str	r2, [sp, #4]
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	61a3      	str	r3, [r4, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2201      	moveq	r2, #1
 800ac6e:	2202      	movne	r2, #2
 800ac70:	6122      	str	r2, [r4, #16]
 800ac72:	b1a5      	cbz	r5, 800ac9e <__d2b+0x92>
 800ac74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac78:	4405      	add	r5, r0
 800ac7a:	603d      	str	r5, [r7, #0]
 800ac7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac80:	6030      	str	r0, [r6, #0]
 800ac82:	4620      	mov	r0, r4
 800ac84:	b003      	add	sp, #12
 800ac86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac8a:	6161      	str	r1, [r4, #20]
 800ac8c:	e7ea      	b.n	800ac64 <__d2b+0x58>
 800ac8e:	a801      	add	r0, sp, #4
 800ac90:	f7ff fd61 	bl	800a756 <__lo0bits>
 800ac94:	9b01      	ldr	r3, [sp, #4]
 800ac96:	6163      	str	r3, [r4, #20]
 800ac98:	3020      	adds	r0, #32
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	e7e8      	b.n	800ac70 <__d2b+0x64>
 800ac9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aca6:	6038      	str	r0, [r7, #0]
 800aca8:	6918      	ldr	r0, [r3, #16]
 800acaa:	f7ff fd35 	bl	800a718 <__hi0bits>
 800acae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acb2:	e7e5      	b.n	800ac80 <__d2b+0x74>
 800acb4:	0800bbe8 	.word	0x0800bbe8
 800acb8:	0800bbf9 	.word	0x0800bbf9

0800acbc <__ssputs_r>:
 800acbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc0:	688e      	ldr	r6, [r1, #8]
 800acc2:	461f      	mov	r7, r3
 800acc4:	42be      	cmp	r6, r7
 800acc6:	680b      	ldr	r3, [r1, #0]
 800acc8:	4682      	mov	sl, r0
 800acca:	460c      	mov	r4, r1
 800accc:	4690      	mov	r8, r2
 800acce:	d82d      	bhi.n	800ad2c <__ssputs_r+0x70>
 800acd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acd8:	d026      	beq.n	800ad28 <__ssputs_r+0x6c>
 800acda:	6965      	ldr	r5, [r4, #20]
 800acdc:	6909      	ldr	r1, [r1, #16]
 800acde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace2:	eba3 0901 	sub.w	r9, r3, r1
 800ace6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acea:	1c7b      	adds	r3, r7, #1
 800acec:	444b      	add	r3, r9
 800acee:	106d      	asrs	r5, r5, #1
 800acf0:	429d      	cmp	r5, r3
 800acf2:	bf38      	it	cc
 800acf4:	461d      	movcc	r5, r3
 800acf6:	0553      	lsls	r3, r2, #21
 800acf8:	d527      	bpl.n	800ad4a <__ssputs_r+0x8e>
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7ff fbd8 	bl	800a4b0 <_malloc_r>
 800ad00:	4606      	mov	r6, r0
 800ad02:	b360      	cbz	r0, 800ad5e <__ssputs_r+0xa2>
 800ad04:	6921      	ldr	r1, [r4, #16]
 800ad06:	464a      	mov	r2, r9
 800ad08:	f7fe fcf5 	bl	80096f6 <memcpy>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	81a3      	strh	r3, [r4, #12]
 800ad18:	6126      	str	r6, [r4, #16]
 800ad1a:	6165      	str	r5, [r4, #20]
 800ad1c:	444e      	add	r6, r9
 800ad1e:	eba5 0509 	sub.w	r5, r5, r9
 800ad22:	6026      	str	r6, [r4, #0]
 800ad24:	60a5      	str	r5, [r4, #8]
 800ad26:	463e      	mov	r6, r7
 800ad28:	42be      	cmp	r6, r7
 800ad2a:	d900      	bls.n	800ad2e <__ssputs_r+0x72>
 800ad2c:	463e      	mov	r6, r7
 800ad2e:	6820      	ldr	r0, [r4, #0]
 800ad30:	4632      	mov	r2, r6
 800ad32:	4641      	mov	r1, r8
 800ad34:	f000 fa28 	bl	800b188 <memmove>
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	1b9b      	subs	r3, r3, r6
 800ad3c:	60a3      	str	r3, [r4, #8]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	4433      	add	r3, r6
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	2000      	movs	r0, #0
 800ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4a:	462a      	mov	r2, r5
 800ad4c:	f000 faac 	bl	800b2a8 <_realloc_r>
 800ad50:	4606      	mov	r6, r0
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d1e0      	bne.n	800ad18 <__ssputs_r+0x5c>
 800ad56:	6921      	ldr	r1, [r4, #16]
 800ad58:	4650      	mov	r0, sl
 800ad5a:	f7ff fb35 	bl	800a3c8 <_free_r>
 800ad5e:	230c      	movs	r3, #12
 800ad60:	f8ca 3000 	str.w	r3, [sl]
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad6a:	81a3      	strh	r3, [r4, #12]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad70:	e7e9      	b.n	800ad46 <__ssputs_r+0x8a>
	...

0800ad74 <_svfiprintf_r>:
 800ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	4698      	mov	r8, r3
 800ad7a:	898b      	ldrh	r3, [r1, #12]
 800ad7c:	061b      	lsls	r3, r3, #24
 800ad7e:	b09d      	sub	sp, #116	@ 0x74
 800ad80:	4607      	mov	r7, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	4614      	mov	r4, r2
 800ad86:	d510      	bpl.n	800adaa <_svfiprintf_r+0x36>
 800ad88:	690b      	ldr	r3, [r1, #16]
 800ad8a:	b973      	cbnz	r3, 800adaa <_svfiprintf_r+0x36>
 800ad8c:	2140      	movs	r1, #64	@ 0x40
 800ad8e:	f7ff fb8f 	bl	800a4b0 <_malloc_r>
 800ad92:	6028      	str	r0, [r5, #0]
 800ad94:	6128      	str	r0, [r5, #16]
 800ad96:	b930      	cbnz	r0, 800ada6 <_svfiprintf_r+0x32>
 800ad98:	230c      	movs	r3, #12
 800ad9a:	603b      	str	r3, [r7, #0]
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ada0:	b01d      	add	sp, #116	@ 0x74
 800ada2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada6:	2340      	movs	r3, #64	@ 0x40
 800ada8:	616b      	str	r3, [r5, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	9309      	str	r3, [sp, #36]	@ 0x24
 800adae:	2320      	movs	r3, #32
 800adb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb8:	2330      	movs	r3, #48	@ 0x30
 800adba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af58 <_svfiprintf_r+0x1e4>
 800adbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adc2:	f04f 0901 	mov.w	r9, #1
 800adc6:	4623      	mov	r3, r4
 800adc8:	469a      	mov	sl, r3
 800adca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adce:	b10a      	cbz	r2, 800add4 <_svfiprintf_r+0x60>
 800add0:	2a25      	cmp	r2, #37	@ 0x25
 800add2:	d1f9      	bne.n	800adc8 <_svfiprintf_r+0x54>
 800add4:	ebba 0b04 	subs.w	fp, sl, r4
 800add8:	d00b      	beq.n	800adf2 <_svfiprintf_r+0x7e>
 800adda:	465b      	mov	r3, fp
 800addc:	4622      	mov	r2, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7ff ff6b 	bl	800acbc <__ssputs_r>
 800ade6:	3001      	adds	r0, #1
 800ade8:	f000 80a7 	beq.w	800af3a <_svfiprintf_r+0x1c6>
 800adec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adee:	445a      	add	r2, fp
 800adf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800adf2:	f89a 3000 	ldrb.w	r3, [sl]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 809f 	beq.w	800af3a <_svfiprintf_r+0x1c6>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae06:	f10a 0a01 	add.w	sl, sl, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae12:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae14:	4654      	mov	r4, sl
 800ae16:	2205      	movs	r2, #5
 800ae18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1c:	484e      	ldr	r0, [pc, #312]	@ (800af58 <_svfiprintf_r+0x1e4>)
 800ae1e:	f7f5 fa07 	bl	8000230 <memchr>
 800ae22:	9a04      	ldr	r2, [sp, #16]
 800ae24:	b9d8      	cbnz	r0, 800ae5e <_svfiprintf_r+0xea>
 800ae26:	06d0      	lsls	r0, r2, #27
 800ae28:	bf44      	itt	mi
 800ae2a:	2320      	movmi	r3, #32
 800ae2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae30:	0711      	lsls	r1, r2, #28
 800ae32:	bf44      	itt	mi
 800ae34:	232b      	movmi	r3, #43	@ 0x2b
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae40:	d015      	beq.n	800ae6e <_svfiprintf_r+0xfa>
 800ae42:	9a07      	ldr	r2, [sp, #28]
 800ae44:	4654      	mov	r4, sl
 800ae46:	2000      	movs	r0, #0
 800ae48:	f04f 0c0a 	mov.w	ip, #10
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae52:	3b30      	subs	r3, #48	@ 0x30
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d94b      	bls.n	800aef0 <_svfiprintf_r+0x17c>
 800ae58:	b1b0      	cbz	r0, 800ae88 <_svfiprintf_r+0x114>
 800ae5a:	9207      	str	r2, [sp, #28]
 800ae5c:	e014      	b.n	800ae88 <_svfiprintf_r+0x114>
 800ae5e:	eba0 0308 	sub.w	r3, r0, r8
 800ae62:	fa09 f303 	lsl.w	r3, r9, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	9304      	str	r3, [sp, #16]
 800ae6a:	46a2      	mov	sl, r4
 800ae6c:	e7d2      	b.n	800ae14 <_svfiprintf_r+0xa0>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	9103      	str	r1, [sp, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bfbb      	ittet	lt
 800ae7a:	425b      	neglt	r3, r3
 800ae7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae80:	9307      	strge	r3, [sp, #28]
 800ae82:	9307      	strlt	r3, [sp, #28]
 800ae84:	bfb8      	it	lt
 800ae86:	9204      	strlt	r2, [sp, #16]
 800ae88:	7823      	ldrb	r3, [r4, #0]
 800ae8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae8c:	d10a      	bne.n	800aea4 <_svfiprintf_r+0x130>
 800ae8e:	7863      	ldrb	r3, [r4, #1]
 800ae90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae92:	d132      	bne.n	800aefa <_svfiprintf_r+0x186>
 800ae94:	9b03      	ldr	r3, [sp, #12]
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	9203      	str	r2, [sp, #12]
 800ae9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aea0:	3402      	adds	r4, #2
 800aea2:	9305      	str	r3, [sp, #20]
 800aea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af68 <_svfiprintf_r+0x1f4>
 800aea8:	7821      	ldrb	r1, [r4, #0]
 800aeaa:	2203      	movs	r2, #3
 800aeac:	4650      	mov	r0, sl
 800aeae:	f7f5 f9bf 	bl	8000230 <memchr>
 800aeb2:	b138      	cbz	r0, 800aec4 <_svfiprintf_r+0x150>
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	eba0 000a 	sub.w	r0, r0, sl
 800aeba:	2240      	movs	r2, #64	@ 0x40
 800aebc:	4082      	lsls	r2, r0
 800aebe:	4313      	orrs	r3, r2
 800aec0:	3401      	adds	r4, #1
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec8:	4824      	ldr	r0, [pc, #144]	@ (800af5c <_svfiprintf_r+0x1e8>)
 800aeca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aece:	2206      	movs	r2, #6
 800aed0:	f7f5 f9ae 	bl	8000230 <memchr>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d036      	beq.n	800af46 <_svfiprintf_r+0x1d2>
 800aed8:	4b21      	ldr	r3, [pc, #132]	@ (800af60 <_svfiprintf_r+0x1ec>)
 800aeda:	bb1b      	cbnz	r3, 800af24 <_svfiprintf_r+0x1b0>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	3307      	adds	r3, #7
 800aee0:	f023 0307 	bic.w	r3, r3, #7
 800aee4:	3308      	adds	r3, #8
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeea:	4433      	add	r3, r6
 800aeec:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeee:	e76a      	b.n	800adc6 <_svfiprintf_r+0x52>
 800aef0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef4:	460c      	mov	r4, r1
 800aef6:	2001      	movs	r0, #1
 800aef8:	e7a8      	b.n	800ae4c <_svfiprintf_r+0xd8>
 800aefa:	2300      	movs	r3, #0
 800aefc:	3401      	adds	r4, #1
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	4619      	mov	r1, r3
 800af02:	f04f 0c0a 	mov.w	ip, #10
 800af06:	4620      	mov	r0, r4
 800af08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0c:	3a30      	subs	r2, #48	@ 0x30
 800af0e:	2a09      	cmp	r2, #9
 800af10:	d903      	bls.n	800af1a <_svfiprintf_r+0x1a6>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0c6      	beq.n	800aea4 <_svfiprintf_r+0x130>
 800af16:	9105      	str	r1, [sp, #20]
 800af18:	e7c4      	b.n	800aea4 <_svfiprintf_r+0x130>
 800af1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1e:	4604      	mov	r4, r0
 800af20:	2301      	movs	r3, #1
 800af22:	e7f0      	b.n	800af06 <_svfiprintf_r+0x192>
 800af24:	ab03      	add	r3, sp, #12
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	462a      	mov	r2, r5
 800af2a:	4b0e      	ldr	r3, [pc, #56]	@ (800af64 <_svfiprintf_r+0x1f0>)
 800af2c:	a904      	add	r1, sp, #16
 800af2e:	4638      	mov	r0, r7
 800af30:	f7fd fcea 	bl	8008908 <_printf_float>
 800af34:	1c42      	adds	r2, r0, #1
 800af36:	4606      	mov	r6, r0
 800af38:	d1d6      	bne.n	800aee8 <_svfiprintf_r+0x174>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	065b      	lsls	r3, r3, #25
 800af3e:	f53f af2d 	bmi.w	800ad9c <_svfiprintf_r+0x28>
 800af42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af44:	e72c      	b.n	800ada0 <_svfiprintf_r+0x2c>
 800af46:	ab03      	add	r3, sp, #12
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	462a      	mov	r2, r5
 800af4c:	4b05      	ldr	r3, [pc, #20]	@ (800af64 <_svfiprintf_r+0x1f0>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	4638      	mov	r0, r7
 800af52:	f7fd ff71 	bl	8008e38 <_printf_i>
 800af56:	e7ed      	b.n	800af34 <_svfiprintf_r+0x1c0>
 800af58:	0800bc52 	.word	0x0800bc52
 800af5c:	0800bc5c 	.word	0x0800bc5c
 800af60:	08008909 	.word	0x08008909
 800af64:	0800acbd 	.word	0x0800acbd
 800af68:	0800bc58 	.word	0x0800bc58

0800af6c <__sflush_r>:
 800af6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af74:	0716      	lsls	r6, r2, #28
 800af76:	4605      	mov	r5, r0
 800af78:	460c      	mov	r4, r1
 800af7a:	d454      	bmi.n	800b026 <__sflush_r+0xba>
 800af7c:	684b      	ldr	r3, [r1, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dc02      	bgt.n	800af88 <__sflush_r+0x1c>
 800af82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af84:	2b00      	cmp	r3, #0
 800af86:	dd48      	ble.n	800b01a <__sflush_r+0xae>
 800af88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af8a:	2e00      	cmp	r6, #0
 800af8c:	d045      	beq.n	800b01a <__sflush_r+0xae>
 800af8e:	2300      	movs	r3, #0
 800af90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af94:	682f      	ldr	r7, [r5, #0]
 800af96:	6a21      	ldr	r1, [r4, #32]
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	d030      	beq.n	800affe <__sflush_r+0x92>
 800af9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af9e:	89a3      	ldrh	r3, [r4, #12]
 800afa0:	0759      	lsls	r1, r3, #29
 800afa2:	d505      	bpl.n	800afb0 <__sflush_r+0x44>
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afaa:	b10b      	cbz	r3, 800afb0 <__sflush_r+0x44>
 800afac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	2300      	movs	r3, #0
 800afb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afb4:	6a21      	ldr	r1, [r4, #32]
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b0      	blx	r6
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	d106      	bne.n	800afce <__sflush_r+0x62>
 800afc0:	6829      	ldr	r1, [r5, #0]
 800afc2:	291d      	cmp	r1, #29
 800afc4:	d82b      	bhi.n	800b01e <__sflush_r+0xb2>
 800afc6:	4a2a      	ldr	r2, [pc, #168]	@ (800b070 <__sflush_r+0x104>)
 800afc8:	40ca      	lsrs	r2, r1
 800afca:	07d6      	lsls	r6, r2, #31
 800afcc:	d527      	bpl.n	800b01e <__sflush_r+0xb2>
 800afce:	2200      	movs	r2, #0
 800afd0:	6062      	str	r2, [r4, #4]
 800afd2:	04d9      	lsls	r1, r3, #19
 800afd4:	6922      	ldr	r2, [r4, #16]
 800afd6:	6022      	str	r2, [r4, #0]
 800afd8:	d504      	bpl.n	800afe4 <__sflush_r+0x78>
 800afda:	1c42      	adds	r2, r0, #1
 800afdc:	d101      	bne.n	800afe2 <__sflush_r+0x76>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	b903      	cbnz	r3, 800afe4 <__sflush_r+0x78>
 800afe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800afe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afe6:	602f      	str	r7, [r5, #0]
 800afe8:	b1b9      	cbz	r1, 800b01a <__sflush_r+0xae>
 800afea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afee:	4299      	cmp	r1, r3
 800aff0:	d002      	beq.n	800aff8 <__sflush_r+0x8c>
 800aff2:	4628      	mov	r0, r5
 800aff4:	f7ff f9e8 	bl	800a3c8 <_free_r>
 800aff8:	2300      	movs	r3, #0
 800affa:	6363      	str	r3, [r4, #52]	@ 0x34
 800affc:	e00d      	b.n	800b01a <__sflush_r+0xae>
 800affe:	2301      	movs	r3, #1
 800b000:	4628      	mov	r0, r5
 800b002:	47b0      	blx	r6
 800b004:	4602      	mov	r2, r0
 800b006:	1c50      	adds	r0, r2, #1
 800b008:	d1c9      	bne.n	800af9e <__sflush_r+0x32>
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0c6      	beq.n	800af9e <__sflush_r+0x32>
 800b010:	2b1d      	cmp	r3, #29
 800b012:	d001      	beq.n	800b018 <__sflush_r+0xac>
 800b014:	2b16      	cmp	r3, #22
 800b016:	d11e      	bne.n	800b056 <__sflush_r+0xea>
 800b018:	602f      	str	r7, [r5, #0]
 800b01a:	2000      	movs	r0, #0
 800b01c:	e022      	b.n	800b064 <__sflush_r+0xf8>
 800b01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b022:	b21b      	sxth	r3, r3
 800b024:	e01b      	b.n	800b05e <__sflush_r+0xf2>
 800b026:	690f      	ldr	r7, [r1, #16]
 800b028:	2f00      	cmp	r7, #0
 800b02a:	d0f6      	beq.n	800b01a <__sflush_r+0xae>
 800b02c:	0793      	lsls	r3, r2, #30
 800b02e:	680e      	ldr	r6, [r1, #0]
 800b030:	bf08      	it	eq
 800b032:	694b      	ldreq	r3, [r1, #20]
 800b034:	600f      	str	r7, [r1, #0]
 800b036:	bf18      	it	ne
 800b038:	2300      	movne	r3, #0
 800b03a:	eba6 0807 	sub.w	r8, r6, r7
 800b03e:	608b      	str	r3, [r1, #8]
 800b040:	f1b8 0f00 	cmp.w	r8, #0
 800b044:	dde9      	ble.n	800b01a <__sflush_r+0xae>
 800b046:	6a21      	ldr	r1, [r4, #32]
 800b048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b04a:	4643      	mov	r3, r8
 800b04c:	463a      	mov	r2, r7
 800b04e:	4628      	mov	r0, r5
 800b050:	47b0      	blx	r6
 800b052:	2800      	cmp	r0, #0
 800b054:	dc08      	bgt.n	800b068 <__sflush_r+0xfc>
 800b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b068:	4407      	add	r7, r0
 800b06a:	eba8 0800 	sub.w	r8, r8, r0
 800b06e:	e7e7      	b.n	800b040 <__sflush_r+0xd4>
 800b070:	20400001 	.word	0x20400001

0800b074 <_fflush_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	690b      	ldr	r3, [r1, #16]
 800b078:	4605      	mov	r5, r0
 800b07a:	460c      	mov	r4, r1
 800b07c:	b913      	cbnz	r3, 800b084 <_fflush_r+0x10>
 800b07e:	2500      	movs	r5, #0
 800b080:	4628      	mov	r0, r5
 800b082:	bd38      	pop	{r3, r4, r5, pc}
 800b084:	b118      	cbz	r0, 800b08e <_fflush_r+0x1a>
 800b086:	6a03      	ldr	r3, [r0, #32]
 800b088:	b90b      	cbnz	r3, 800b08e <_fflush_r+0x1a>
 800b08a:	f7fe f87f 	bl	800918c <__sinit>
 800b08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f3      	beq.n	800b07e <_fflush_r+0xa>
 800b096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b098:	07d0      	lsls	r0, r2, #31
 800b09a:	d404      	bmi.n	800b0a6 <_fflush_r+0x32>
 800b09c:	0599      	lsls	r1, r3, #22
 800b09e:	d402      	bmi.n	800b0a6 <_fflush_r+0x32>
 800b0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0a2:	f7fe fb26 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	f7ff ff5f 	bl	800af6c <__sflush_r>
 800b0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0b0:	07da      	lsls	r2, r3, #31
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	d4e4      	bmi.n	800b080 <_fflush_r+0xc>
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	059b      	lsls	r3, r3, #22
 800b0ba:	d4e1      	bmi.n	800b080 <_fflush_r+0xc>
 800b0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0be:	f7fe fb19 	bl	80096f4 <__retarget_lock_release_recursive>
 800b0c2:	e7dd      	b.n	800b080 <_fflush_r+0xc>

0800b0c4 <__swhatbuf_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	b096      	sub	sp, #88	@ 0x58
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	da0d      	bge.n	800b0f2 <__swhatbuf_r+0x2e>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	bf14      	ite	ne
 800b0e2:	2340      	movne	r3, #64	@ 0x40
 800b0e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6031      	str	r1, [r6, #0]
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	b016      	add	sp, #88	@ 0x58
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
 800b0f2:	466a      	mov	r2, sp
 800b0f4:	f000 f862 	bl	800b1bc <_fstat_r>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dbec      	blt.n	800b0d6 <__swhatbuf_r+0x12>
 800b0fc:	9901      	ldr	r1, [sp, #4]
 800b0fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b106:	4259      	negs	r1, r3
 800b108:	4159      	adcs	r1, r3
 800b10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b10e:	e7eb      	b.n	800b0e8 <__swhatbuf_r+0x24>

0800b110 <__smakebuf_r>:
 800b110:	898b      	ldrh	r3, [r1, #12]
 800b112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b114:	079d      	lsls	r5, r3, #30
 800b116:	4606      	mov	r6, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	d507      	bpl.n	800b12c <__smakebuf_r+0x1c>
 800b11c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	6123      	str	r3, [r4, #16]
 800b124:	2301      	movs	r3, #1
 800b126:	6163      	str	r3, [r4, #20]
 800b128:	b003      	add	sp, #12
 800b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b12c:	ab01      	add	r3, sp, #4
 800b12e:	466a      	mov	r2, sp
 800b130:	f7ff ffc8 	bl	800b0c4 <__swhatbuf_r>
 800b134:	9f00      	ldr	r7, [sp, #0]
 800b136:	4605      	mov	r5, r0
 800b138:	4639      	mov	r1, r7
 800b13a:	4630      	mov	r0, r6
 800b13c:	f7ff f9b8 	bl	800a4b0 <_malloc_r>
 800b140:	b948      	cbnz	r0, 800b156 <__smakebuf_r+0x46>
 800b142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b146:	059a      	lsls	r2, r3, #22
 800b148:	d4ee      	bmi.n	800b128 <__smakebuf_r+0x18>
 800b14a:	f023 0303 	bic.w	r3, r3, #3
 800b14e:	f043 0302 	orr.w	r3, r3, #2
 800b152:	81a3      	strh	r3, [r4, #12]
 800b154:	e7e2      	b.n	800b11c <__smakebuf_r+0xc>
 800b156:	89a3      	ldrh	r3, [r4, #12]
 800b158:	6020      	str	r0, [r4, #0]
 800b15a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b15e:	81a3      	strh	r3, [r4, #12]
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x70>
 800b168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f837 	bl	800b1e0 <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x70>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	431d      	orrs	r5, r3
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cf      	b.n	800b128 <__smakebuf_r+0x18>

0800b188 <memmove>:
 800b188:	4288      	cmp	r0, r1
 800b18a:	b510      	push	{r4, lr}
 800b18c:	eb01 0402 	add.w	r4, r1, r2
 800b190:	d902      	bls.n	800b198 <memmove+0x10>
 800b192:	4284      	cmp	r4, r0
 800b194:	4623      	mov	r3, r4
 800b196:	d807      	bhi.n	800b1a8 <memmove+0x20>
 800b198:	1e43      	subs	r3, r0, #1
 800b19a:	42a1      	cmp	r1, r4
 800b19c:	d008      	beq.n	800b1b0 <memmove+0x28>
 800b19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1a6:	e7f8      	b.n	800b19a <memmove+0x12>
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	428a      	cmp	r2, r1
 800b1ae:	d100      	bne.n	800b1b2 <memmove+0x2a>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ba:	e7f7      	b.n	800b1ac <memmove+0x24>

0800b1bc <_fstat_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d07      	ldr	r5, [pc, #28]	@ (800b1dc <_fstat_r+0x20>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	f7f6 ff8f 	bl	80020ec <_fstat>
 800b1ce:	1c43      	adds	r3, r0, #1
 800b1d0:	d102      	bne.n	800b1d8 <_fstat_r+0x1c>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	b103      	cbz	r3, 800b1d8 <_fstat_r+0x1c>
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	bd38      	pop	{r3, r4, r5, pc}
 800b1da:	bf00      	nop
 800b1dc:	20006368 	.word	0x20006368

0800b1e0 <_isatty_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	4d06      	ldr	r5, [pc, #24]	@ (800b1fc <_isatty_r+0x1c>)
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	f7f6 ff8e 	bl	800210c <_isatty>
 800b1f0:	1c43      	adds	r3, r0, #1
 800b1f2:	d102      	bne.n	800b1fa <_isatty_r+0x1a>
 800b1f4:	682b      	ldr	r3, [r5, #0]
 800b1f6:	b103      	cbz	r3, 800b1fa <_isatty_r+0x1a>
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	20006368 	.word	0x20006368

0800b200 <_sbrk_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d06      	ldr	r5, [pc, #24]	@ (800b21c <_sbrk_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f7f6 ff96 	bl	800213c <_sbrk>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_sbrk_r+0x1a>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_sbrk_r+0x1a>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	20006368 	.word	0x20006368

0800b220 <__assert_func>:
 800b220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b222:	4614      	mov	r4, r2
 800b224:	461a      	mov	r2, r3
 800b226:	4b09      	ldr	r3, [pc, #36]	@ (800b24c <__assert_func+0x2c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4605      	mov	r5, r0
 800b22c:	68d8      	ldr	r0, [r3, #12]
 800b22e:	b14c      	cbz	r4, 800b244 <__assert_func+0x24>
 800b230:	4b07      	ldr	r3, [pc, #28]	@ (800b250 <__assert_func+0x30>)
 800b232:	9100      	str	r1, [sp, #0]
 800b234:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b238:	4906      	ldr	r1, [pc, #24]	@ (800b254 <__assert_func+0x34>)
 800b23a:	462b      	mov	r3, r5
 800b23c:	f000 f870 	bl	800b320 <fiprintf>
 800b240:	f000 f880 	bl	800b344 <abort>
 800b244:	4b04      	ldr	r3, [pc, #16]	@ (800b258 <__assert_func+0x38>)
 800b246:	461c      	mov	r4, r3
 800b248:	e7f3      	b.n	800b232 <__assert_func+0x12>
 800b24a:	bf00      	nop
 800b24c:	20000070 	.word	0x20000070
 800b250:	0800bc6d 	.word	0x0800bc6d
 800b254:	0800bc7a 	.word	0x0800bc7a
 800b258:	0800bca8 	.word	0x0800bca8

0800b25c <_calloc_r>:
 800b25c:	b570      	push	{r4, r5, r6, lr}
 800b25e:	fba1 5402 	umull	r5, r4, r1, r2
 800b262:	b934      	cbnz	r4, 800b272 <_calloc_r+0x16>
 800b264:	4629      	mov	r1, r5
 800b266:	f7ff f923 	bl	800a4b0 <_malloc_r>
 800b26a:	4606      	mov	r6, r0
 800b26c:	b928      	cbnz	r0, 800b27a <_calloc_r+0x1e>
 800b26e:	4630      	mov	r0, r6
 800b270:	bd70      	pop	{r4, r5, r6, pc}
 800b272:	220c      	movs	r2, #12
 800b274:	6002      	str	r2, [r0, #0]
 800b276:	2600      	movs	r6, #0
 800b278:	e7f9      	b.n	800b26e <_calloc_r+0x12>
 800b27a:	462a      	mov	r2, r5
 800b27c:	4621      	mov	r1, r4
 800b27e:	f7fe f95d 	bl	800953c <memset>
 800b282:	e7f4      	b.n	800b26e <_calloc_r+0x12>

0800b284 <__ascii_mbtowc>:
 800b284:	b082      	sub	sp, #8
 800b286:	b901      	cbnz	r1, 800b28a <__ascii_mbtowc+0x6>
 800b288:	a901      	add	r1, sp, #4
 800b28a:	b142      	cbz	r2, 800b29e <__ascii_mbtowc+0x1a>
 800b28c:	b14b      	cbz	r3, 800b2a2 <__ascii_mbtowc+0x1e>
 800b28e:	7813      	ldrb	r3, [r2, #0]
 800b290:	600b      	str	r3, [r1, #0]
 800b292:	7812      	ldrb	r2, [r2, #0]
 800b294:	1e10      	subs	r0, r2, #0
 800b296:	bf18      	it	ne
 800b298:	2001      	movne	r0, #1
 800b29a:	b002      	add	sp, #8
 800b29c:	4770      	bx	lr
 800b29e:	4610      	mov	r0, r2
 800b2a0:	e7fb      	b.n	800b29a <__ascii_mbtowc+0x16>
 800b2a2:	f06f 0001 	mvn.w	r0, #1
 800b2a6:	e7f8      	b.n	800b29a <__ascii_mbtowc+0x16>

0800b2a8 <_realloc_r>:
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	4614      	mov	r4, r2
 800b2b0:	460d      	mov	r5, r1
 800b2b2:	b921      	cbnz	r1, 800b2be <_realloc_r+0x16>
 800b2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	f7ff b8f9 	b.w	800a4b0 <_malloc_r>
 800b2be:	b92a      	cbnz	r2, 800b2cc <_realloc_r+0x24>
 800b2c0:	f7ff f882 	bl	800a3c8 <_free_r>
 800b2c4:	4625      	mov	r5, r4
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	f000 f841 	bl	800b352 <_malloc_usable_size_r>
 800b2d0:	4284      	cmp	r4, r0
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	d802      	bhi.n	800b2dc <_realloc_r+0x34>
 800b2d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2da:	d8f4      	bhi.n	800b2c6 <_realloc_r+0x1e>
 800b2dc:	4621      	mov	r1, r4
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7ff f8e6 	bl	800a4b0 <_malloc_r>
 800b2e4:	4680      	mov	r8, r0
 800b2e6:	b908      	cbnz	r0, 800b2ec <_realloc_r+0x44>
 800b2e8:	4645      	mov	r5, r8
 800b2ea:	e7ec      	b.n	800b2c6 <_realloc_r+0x1e>
 800b2ec:	42b4      	cmp	r4, r6
 800b2ee:	4622      	mov	r2, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	bf28      	it	cs
 800b2f4:	4632      	movcs	r2, r6
 800b2f6:	f7fe f9fe 	bl	80096f6 <memcpy>
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f7ff f863 	bl	800a3c8 <_free_r>
 800b302:	e7f1      	b.n	800b2e8 <_realloc_r+0x40>

0800b304 <__ascii_wctomb>:
 800b304:	4603      	mov	r3, r0
 800b306:	4608      	mov	r0, r1
 800b308:	b141      	cbz	r1, 800b31c <__ascii_wctomb+0x18>
 800b30a:	2aff      	cmp	r2, #255	@ 0xff
 800b30c:	d904      	bls.n	800b318 <__ascii_wctomb+0x14>
 800b30e:	228a      	movs	r2, #138	@ 0x8a
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b316:	4770      	bx	lr
 800b318:	700a      	strb	r2, [r1, #0]
 800b31a:	2001      	movs	r0, #1
 800b31c:	4770      	bx	lr
	...

0800b320 <fiprintf>:
 800b320:	b40e      	push	{r1, r2, r3}
 800b322:	b503      	push	{r0, r1, lr}
 800b324:	4601      	mov	r1, r0
 800b326:	ab03      	add	r3, sp, #12
 800b328:	4805      	ldr	r0, [pc, #20]	@ (800b340 <fiprintf+0x20>)
 800b32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32e:	6800      	ldr	r0, [r0, #0]
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	f000 f83f 	bl	800b3b4 <_vfiprintf_r>
 800b336:	b002      	add	sp, #8
 800b338:	f85d eb04 	ldr.w	lr, [sp], #4
 800b33c:	b003      	add	sp, #12
 800b33e:	4770      	bx	lr
 800b340:	20000070 	.word	0x20000070

0800b344 <abort>:
 800b344:	b508      	push	{r3, lr}
 800b346:	2006      	movs	r0, #6
 800b348:	f000 f974 	bl	800b634 <raise>
 800b34c:	2001      	movs	r0, #1
 800b34e:	f7f6 fe99 	bl	8002084 <_exit>

0800b352 <_malloc_usable_size_r>:
 800b352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b356:	1f18      	subs	r0, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bfbc      	itt	lt
 800b35c:	580b      	ldrlt	r3, [r1, r0]
 800b35e:	18c0      	addlt	r0, r0, r3
 800b360:	4770      	bx	lr

0800b362 <__sfputc_r>:
 800b362:	6893      	ldr	r3, [r2, #8]
 800b364:	3b01      	subs	r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	b410      	push	{r4}
 800b36a:	6093      	str	r3, [r2, #8]
 800b36c:	da08      	bge.n	800b380 <__sfputc_r+0x1e>
 800b36e:	6994      	ldr	r4, [r2, #24]
 800b370:	42a3      	cmp	r3, r4
 800b372:	db01      	blt.n	800b378 <__sfputc_r+0x16>
 800b374:	290a      	cmp	r1, #10
 800b376:	d103      	bne.n	800b380 <__sfputc_r+0x1e>
 800b378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b37c:	f7fe b84a 	b.w	8009414 <__swbuf_r>
 800b380:	6813      	ldr	r3, [r2, #0]
 800b382:	1c58      	adds	r0, r3, #1
 800b384:	6010      	str	r0, [r2, #0]
 800b386:	7019      	strb	r1, [r3, #0]
 800b388:	4608      	mov	r0, r1
 800b38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <__sfputs_r>:
 800b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b392:	4606      	mov	r6, r0
 800b394:	460f      	mov	r7, r1
 800b396:	4614      	mov	r4, r2
 800b398:	18d5      	adds	r5, r2, r3
 800b39a:	42ac      	cmp	r4, r5
 800b39c:	d101      	bne.n	800b3a2 <__sfputs_r+0x12>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	e007      	b.n	800b3b2 <__sfputs_r+0x22>
 800b3a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a6:	463a      	mov	r2, r7
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff ffda 	bl	800b362 <__sfputc_r>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d1f3      	bne.n	800b39a <__sfputs_r+0xa>
 800b3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3b4 <_vfiprintf_r>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	b09d      	sub	sp, #116	@ 0x74
 800b3bc:	4614      	mov	r4, r2
 800b3be:	4698      	mov	r8, r3
 800b3c0:	4606      	mov	r6, r0
 800b3c2:	b118      	cbz	r0, 800b3cc <_vfiprintf_r+0x18>
 800b3c4:	6a03      	ldr	r3, [r0, #32]
 800b3c6:	b90b      	cbnz	r3, 800b3cc <_vfiprintf_r+0x18>
 800b3c8:	f7fd fee0 	bl	800918c <__sinit>
 800b3cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3ce:	07d9      	lsls	r1, r3, #31
 800b3d0:	d405      	bmi.n	800b3de <_vfiprintf_r+0x2a>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	059a      	lsls	r2, r3, #22
 800b3d6:	d402      	bmi.n	800b3de <_vfiprintf_r+0x2a>
 800b3d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3da:	f7fe f98a 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800b3de:	89ab      	ldrh	r3, [r5, #12]
 800b3e0:	071b      	lsls	r3, r3, #28
 800b3e2:	d501      	bpl.n	800b3e8 <_vfiprintf_r+0x34>
 800b3e4:	692b      	ldr	r3, [r5, #16]
 800b3e6:	b99b      	cbnz	r3, 800b410 <_vfiprintf_r+0x5c>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7fe f850 	bl	8009490 <__swsetup_r>
 800b3f0:	b170      	cbz	r0, 800b410 <_vfiprintf_r+0x5c>
 800b3f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3f4:	07dc      	lsls	r4, r3, #31
 800b3f6:	d504      	bpl.n	800b402 <_vfiprintf_r+0x4e>
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3fc:	b01d      	add	sp, #116	@ 0x74
 800b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	0598      	lsls	r0, r3, #22
 800b406:	d4f7      	bmi.n	800b3f8 <_vfiprintf_r+0x44>
 800b408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b40a:	f7fe f973 	bl	80096f4 <__retarget_lock_release_recursive>
 800b40e:	e7f3      	b.n	800b3f8 <_vfiprintf_r+0x44>
 800b410:	2300      	movs	r3, #0
 800b412:	9309      	str	r3, [sp, #36]	@ 0x24
 800b414:	2320      	movs	r3, #32
 800b416:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b41a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b41e:	2330      	movs	r3, #48	@ 0x30
 800b420:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5d0 <_vfiprintf_r+0x21c>
 800b424:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b428:	f04f 0901 	mov.w	r9, #1
 800b42c:	4623      	mov	r3, r4
 800b42e:	469a      	mov	sl, r3
 800b430:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b434:	b10a      	cbz	r2, 800b43a <_vfiprintf_r+0x86>
 800b436:	2a25      	cmp	r2, #37	@ 0x25
 800b438:	d1f9      	bne.n	800b42e <_vfiprintf_r+0x7a>
 800b43a:	ebba 0b04 	subs.w	fp, sl, r4
 800b43e:	d00b      	beq.n	800b458 <_vfiprintf_r+0xa4>
 800b440:	465b      	mov	r3, fp
 800b442:	4622      	mov	r2, r4
 800b444:	4629      	mov	r1, r5
 800b446:	4630      	mov	r0, r6
 800b448:	f7ff ffa2 	bl	800b390 <__sfputs_r>
 800b44c:	3001      	adds	r0, #1
 800b44e:	f000 80a7 	beq.w	800b5a0 <_vfiprintf_r+0x1ec>
 800b452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b454:	445a      	add	r2, fp
 800b456:	9209      	str	r2, [sp, #36]	@ 0x24
 800b458:	f89a 3000 	ldrb.w	r3, [sl]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f000 809f 	beq.w	800b5a0 <_vfiprintf_r+0x1ec>
 800b462:	2300      	movs	r3, #0
 800b464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b46c:	f10a 0a01 	add.w	sl, sl, #1
 800b470:	9304      	str	r3, [sp, #16]
 800b472:	9307      	str	r3, [sp, #28]
 800b474:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b478:	931a      	str	r3, [sp, #104]	@ 0x68
 800b47a:	4654      	mov	r4, sl
 800b47c:	2205      	movs	r2, #5
 800b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b482:	4853      	ldr	r0, [pc, #332]	@ (800b5d0 <_vfiprintf_r+0x21c>)
 800b484:	f7f4 fed4 	bl	8000230 <memchr>
 800b488:	9a04      	ldr	r2, [sp, #16]
 800b48a:	b9d8      	cbnz	r0, 800b4c4 <_vfiprintf_r+0x110>
 800b48c:	06d1      	lsls	r1, r2, #27
 800b48e:	bf44      	itt	mi
 800b490:	2320      	movmi	r3, #32
 800b492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b496:	0713      	lsls	r3, r2, #28
 800b498:	bf44      	itt	mi
 800b49a:	232b      	movmi	r3, #43	@ 0x2b
 800b49c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a6:	d015      	beq.n	800b4d4 <_vfiprintf_r+0x120>
 800b4a8:	9a07      	ldr	r2, [sp, #28]
 800b4aa:	4654      	mov	r4, sl
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	f04f 0c0a 	mov.w	ip, #10
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b8:	3b30      	subs	r3, #48	@ 0x30
 800b4ba:	2b09      	cmp	r3, #9
 800b4bc:	d94b      	bls.n	800b556 <_vfiprintf_r+0x1a2>
 800b4be:	b1b0      	cbz	r0, 800b4ee <_vfiprintf_r+0x13a>
 800b4c0:	9207      	str	r2, [sp, #28]
 800b4c2:	e014      	b.n	800b4ee <_vfiprintf_r+0x13a>
 800b4c4:	eba0 0308 	sub.w	r3, r0, r8
 800b4c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	46a2      	mov	sl, r4
 800b4d2:	e7d2      	b.n	800b47a <_vfiprintf_r+0xc6>
 800b4d4:	9b03      	ldr	r3, [sp, #12]
 800b4d6:	1d19      	adds	r1, r3, #4
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	9103      	str	r1, [sp, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	bfbb      	ittet	lt
 800b4e0:	425b      	neglt	r3, r3
 800b4e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4e6:	9307      	strge	r3, [sp, #28]
 800b4e8:	9307      	strlt	r3, [sp, #28]
 800b4ea:	bfb8      	it	lt
 800b4ec:	9204      	strlt	r2, [sp, #16]
 800b4ee:	7823      	ldrb	r3, [r4, #0]
 800b4f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4f2:	d10a      	bne.n	800b50a <_vfiprintf_r+0x156>
 800b4f4:	7863      	ldrb	r3, [r4, #1]
 800b4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4f8:	d132      	bne.n	800b560 <_vfiprintf_r+0x1ac>
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	1d1a      	adds	r2, r3, #4
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	9203      	str	r2, [sp, #12]
 800b502:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b506:	3402      	adds	r4, #2
 800b508:	9305      	str	r3, [sp, #20]
 800b50a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5e0 <_vfiprintf_r+0x22c>
 800b50e:	7821      	ldrb	r1, [r4, #0]
 800b510:	2203      	movs	r2, #3
 800b512:	4650      	mov	r0, sl
 800b514:	f7f4 fe8c 	bl	8000230 <memchr>
 800b518:	b138      	cbz	r0, 800b52a <_vfiprintf_r+0x176>
 800b51a:	9b04      	ldr	r3, [sp, #16]
 800b51c:	eba0 000a 	sub.w	r0, r0, sl
 800b520:	2240      	movs	r2, #64	@ 0x40
 800b522:	4082      	lsls	r2, r0
 800b524:	4313      	orrs	r3, r2
 800b526:	3401      	adds	r4, #1
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b52e:	4829      	ldr	r0, [pc, #164]	@ (800b5d4 <_vfiprintf_r+0x220>)
 800b530:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b534:	2206      	movs	r2, #6
 800b536:	f7f4 fe7b 	bl	8000230 <memchr>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d03f      	beq.n	800b5be <_vfiprintf_r+0x20a>
 800b53e:	4b26      	ldr	r3, [pc, #152]	@ (800b5d8 <_vfiprintf_r+0x224>)
 800b540:	bb1b      	cbnz	r3, 800b58a <_vfiprintf_r+0x1d6>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	3307      	adds	r3, #7
 800b546:	f023 0307 	bic.w	r3, r3, #7
 800b54a:	3308      	adds	r3, #8
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b550:	443b      	add	r3, r7
 800b552:	9309      	str	r3, [sp, #36]	@ 0x24
 800b554:	e76a      	b.n	800b42c <_vfiprintf_r+0x78>
 800b556:	fb0c 3202 	mla	r2, ip, r2, r3
 800b55a:	460c      	mov	r4, r1
 800b55c:	2001      	movs	r0, #1
 800b55e:	e7a8      	b.n	800b4b2 <_vfiprintf_r+0xfe>
 800b560:	2300      	movs	r3, #0
 800b562:	3401      	adds	r4, #1
 800b564:	9305      	str	r3, [sp, #20]
 800b566:	4619      	mov	r1, r3
 800b568:	f04f 0c0a 	mov.w	ip, #10
 800b56c:	4620      	mov	r0, r4
 800b56e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b572:	3a30      	subs	r2, #48	@ 0x30
 800b574:	2a09      	cmp	r2, #9
 800b576:	d903      	bls.n	800b580 <_vfiprintf_r+0x1cc>
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0c6      	beq.n	800b50a <_vfiprintf_r+0x156>
 800b57c:	9105      	str	r1, [sp, #20]
 800b57e:	e7c4      	b.n	800b50a <_vfiprintf_r+0x156>
 800b580:	fb0c 2101 	mla	r1, ip, r1, r2
 800b584:	4604      	mov	r4, r0
 800b586:	2301      	movs	r3, #1
 800b588:	e7f0      	b.n	800b56c <_vfiprintf_r+0x1b8>
 800b58a:	ab03      	add	r3, sp, #12
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	462a      	mov	r2, r5
 800b590:	4b12      	ldr	r3, [pc, #72]	@ (800b5dc <_vfiprintf_r+0x228>)
 800b592:	a904      	add	r1, sp, #16
 800b594:	4630      	mov	r0, r6
 800b596:	f7fd f9b7 	bl	8008908 <_printf_float>
 800b59a:	4607      	mov	r7, r0
 800b59c:	1c78      	adds	r0, r7, #1
 800b59e:	d1d6      	bne.n	800b54e <_vfiprintf_r+0x19a>
 800b5a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5a2:	07d9      	lsls	r1, r3, #31
 800b5a4:	d405      	bmi.n	800b5b2 <_vfiprintf_r+0x1fe>
 800b5a6:	89ab      	ldrh	r3, [r5, #12]
 800b5a8:	059a      	lsls	r2, r3, #22
 800b5aa:	d402      	bmi.n	800b5b2 <_vfiprintf_r+0x1fe>
 800b5ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ae:	f7fe f8a1 	bl	80096f4 <__retarget_lock_release_recursive>
 800b5b2:	89ab      	ldrh	r3, [r5, #12]
 800b5b4:	065b      	lsls	r3, r3, #25
 800b5b6:	f53f af1f 	bmi.w	800b3f8 <_vfiprintf_r+0x44>
 800b5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5bc:	e71e      	b.n	800b3fc <_vfiprintf_r+0x48>
 800b5be:	ab03      	add	r3, sp, #12
 800b5c0:	9300      	str	r3, [sp, #0]
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4b05      	ldr	r3, [pc, #20]	@ (800b5dc <_vfiprintf_r+0x228>)
 800b5c6:	a904      	add	r1, sp, #16
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7fd fc35 	bl	8008e38 <_printf_i>
 800b5ce:	e7e4      	b.n	800b59a <_vfiprintf_r+0x1e6>
 800b5d0:	0800bc52 	.word	0x0800bc52
 800b5d4:	0800bc5c 	.word	0x0800bc5c
 800b5d8:	08008909 	.word	0x08008909
 800b5dc:	0800b391 	.word	0x0800b391
 800b5e0:	0800bc58 	.word	0x0800bc58

0800b5e4 <_raise_r>:
 800b5e4:	291f      	cmp	r1, #31
 800b5e6:	b538      	push	{r3, r4, r5, lr}
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	d904      	bls.n	800b5f8 <_raise_r+0x14>
 800b5ee:	2316      	movs	r3, #22
 800b5f0:	6003      	str	r3, [r0, #0]
 800b5f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5fa:	b112      	cbz	r2, 800b602 <_raise_r+0x1e>
 800b5fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b600:	b94b      	cbnz	r3, 800b616 <_raise_r+0x32>
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f830 	bl	800b668 <_getpid_r>
 800b608:	4622      	mov	r2, r4
 800b60a:	4601      	mov	r1, r0
 800b60c:	4628      	mov	r0, r5
 800b60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b612:	f000 b817 	b.w	800b644 <_kill_r>
 800b616:	2b01      	cmp	r3, #1
 800b618:	d00a      	beq.n	800b630 <_raise_r+0x4c>
 800b61a:	1c59      	adds	r1, r3, #1
 800b61c:	d103      	bne.n	800b626 <_raise_r+0x42>
 800b61e:	2316      	movs	r3, #22
 800b620:	6003      	str	r3, [r0, #0]
 800b622:	2001      	movs	r0, #1
 800b624:	e7e7      	b.n	800b5f6 <_raise_r+0x12>
 800b626:	2100      	movs	r1, #0
 800b628:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b62c:	4620      	mov	r0, r4
 800b62e:	4798      	blx	r3
 800b630:	2000      	movs	r0, #0
 800b632:	e7e0      	b.n	800b5f6 <_raise_r+0x12>

0800b634 <raise>:
 800b634:	4b02      	ldr	r3, [pc, #8]	@ (800b640 <raise+0xc>)
 800b636:	4601      	mov	r1, r0
 800b638:	6818      	ldr	r0, [r3, #0]
 800b63a:	f7ff bfd3 	b.w	800b5e4 <_raise_r>
 800b63e:	bf00      	nop
 800b640:	20000070 	.word	0x20000070

0800b644 <_kill_r>:
 800b644:	b538      	push	{r3, r4, r5, lr}
 800b646:	4d07      	ldr	r5, [pc, #28]	@ (800b664 <_kill_r+0x20>)
 800b648:	2300      	movs	r3, #0
 800b64a:	4604      	mov	r4, r0
 800b64c:	4608      	mov	r0, r1
 800b64e:	4611      	mov	r1, r2
 800b650:	602b      	str	r3, [r5, #0]
 800b652:	f7f6 fd07 	bl	8002064 <_kill>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	d102      	bne.n	800b660 <_kill_r+0x1c>
 800b65a:	682b      	ldr	r3, [r5, #0]
 800b65c:	b103      	cbz	r3, 800b660 <_kill_r+0x1c>
 800b65e:	6023      	str	r3, [r4, #0]
 800b660:	bd38      	pop	{r3, r4, r5, pc}
 800b662:	bf00      	nop
 800b664:	20006368 	.word	0x20006368

0800b668 <_getpid_r>:
 800b668:	f7f6 bcf4 	b.w	8002054 <_getpid>

0800b66c <fmodf>:
 800b66c:	b508      	push	{r3, lr}
 800b66e:	ed2d 8b02 	vpush	{d8}
 800b672:	eef0 8a40 	vmov.f32	s17, s0
 800b676:	eeb0 8a60 	vmov.f32	s16, s1
 800b67a:	f000 f817 	bl	800b6ac <__ieee754_fmodf>
 800b67e:	eef4 8a48 	vcmp.f32	s17, s16
 800b682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b686:	d60c      	bvs.n	800b6a2 <fmodf+0x36>
 800b688:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b6a8 <fmodf+0x3c>
 800b68c:	eeb4 8a68 	vcmp.f32	s16, s17
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	d105      	bne.n	800b6a2 <fmodf+0x36>
 800b696:	f7fe f801 	bl	800969c <__errno>
 800b69a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b69e:	2321      	movs	r3, #33	@ 0x21
 800b6a0:	6003      	str	r3, [r0, #0]
 800b6a2:	ecbd 8b02 	vpop	{d8}
 800b6a6:	bd08      	pop	{r3, pc}
 800b6a8:	00000000 	.word	0x00000000

0800b6ac <__ieee754_fmodf>:
 800b6ac:	b570      	push	{r4, r5, r6, lr}
 800b6ae:	ee10 6a90 	vmov	r6, s1
 800b6b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b6b6:	1e5a      	subs	r2, r3, #1
 800b6b8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b6bc:	d206      	bcs.n	800b6cc <__ieee754_fmodf+0x20>
 800b6be:	ee10 4a10 	vmov	r4, s0
 800b6c2:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800b6c6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b6ca:	d304      	bcc.n	800b6d6 <__ieee754_fmodf+0x2a>
 800b6cc:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b6d0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	dbfc      	blt.n	800b6d4 <__ieee754_fmodf+0x28>
 800b6da:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800b6de:	d105      	bne.n	800b6ec <__ieee754_fmodf+0x40>
 800b6e0:	4b32      	ldr	r3, [pc, #200]	@ (800b7ac <__ieee754_fmodf+0x100>)
 800b6e2:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800b6e6:	ed93 0a00 	vldr	s0, [r3]
 800b6ea:	e7f3      	b.n	800b6d4 <__ieee754_fmodf+0x28>
 800b6ec:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b6f0:	d146      	bne.n	800b780 <__ieee754_fmodf+0xd4>
 800b6f2:	020a      	lsls	r2, r1, #8
 800b6f4:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800b6f8:	2a00      	cmp	r2, #0
 800b6fa:	dc3e      	bgt.n	800b77a <__ieee754_fmodf+0xce>
 800b6fc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b700:	bf01      	itttt	eq
 800b702:	021a      	lsleq	r2, r3, #8
 800b704:	fab2 f282 	clzeq	r2, r2
 800b708:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800b70c:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800b710:	bf16      	itet	ne
 800b712:	15da      	asrne	r2, r3, #23
 800b714:	3282      	addeq	r2, #130	@ 0x82
 800b716:	3a7f      	subne	r2, #127	@ 0x7f
 800b718:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800b71c:	bfbb      	ittet	lt
 800b71e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b722:	1a24      	sublt	r4, r4, r0
 800b724:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800b728:	40a1      	lsllt	r1, r4
 800b72a:	bfa8      	it	ge
 800b72c:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800b730:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b734:	bfb5      	itete	lt
 800b736:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b73a:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800b73e:	1aa4      	sublt	r4, r4, r2
 800b740:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800b744:	bfb8      	it	lt
 800b746:	fa03 f404 	lsllt.w	r4, r3, r4
 800b74a:	1a80      	subs	r0, r0, r2
 800b74c:	1b0b      	subs	r3, r1, r4
 800b74e:	b9d0      	cbnz	r0, 800b786 <__ieee754_fmodf+0xda>
 800b750:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800b754:	bf28      	it	cs
 800b756:	460b      	movcs	r3, r1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0c1      	beq.n	800b6e0 <__ieee754_fmodf+0x34>
 800b75c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b760:	db19      	blt.n	800b796 <__ieee754_fmodf+0xea>
 800b762:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b766:	db19      	blt.n	800b79c <__ieee754_fmodf+0xf0>
 800b768:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800b76c:	327f      	adds	r2, #127	@ 0x7f
 800b76e:	432b      	orrs	r3, r5
 800b770:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b774:	ee00 3a10 	vmov	s0, r3
 800b778:	e7ac      	b.n	800b6d4 <__ieee754_fmodf+0x28>
 800b77a:	3801      	subs	r0, #1
 800b77c:	0052      	lsls	r2, r2, #1
 800b77e:	e7bb      	b.n	800b6f8 <__ieee754_fmodf+0x4c>
 800b780:	15c8      	asrs	r0, r1, #23
 800b782:	387f      	subs	r0, #127	@ 0x7f
 800b784:	e7ba      	b.n	800b6fc <__ieee754_fmodf+0x50>
 800b786:	2b00      	cmp	r3, #0
 800b788:	da02      	bge.n	800b790 <__ieee754_fmodf+0xe4>
 800b78a:	0049      	lsls	r1, r1, #1
 800b78c:	3801      	subs	r0, #1
 800b78e:	e7dd      	b.n	800b74c <__ieee754_fmodf+0xa0>
 800b790:	d0a6      	beq.n	800b6e0 <__ieee754_fmodf+0x34>
 800b792:	0059      	lsls	r1, r3, #1
 800b794:	e7fa      	b.n	800b78c <__ieee754_fmodf+0xe0>
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	3a01      	subs	r2, #1
 800b79a:	e7df      	b.n	800b75c <__ieee754_fmodf+0xb0>
 800b79c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800b7a0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b7a4:	3282      	adds	r2, #130	@ 0x82
 800b7a6:	4113      	asrs	r3, r2
 800b7a8:	432b      	orrs	r3, r5
 800b7aa:	e7e3      	b.n	800b774 <__ieee754_fmodf+0xc8>
 800b7ac:	0800beac 	.word	0x0800beac

0800b7b0 <_init>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	bf00      	nop
 800b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b6:	bc08      	pop	{r3}
 800b7b8:	469e      	mov	lr, r3
 800b7ba:	4770      	bx	lr

0800b7bc <_fini>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	bf00      	nop
 800b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c2:	bc08      	pop	{r3}
 800b7c4:	469e      	mov	lr, r3
 800b7c6:	4770      	bx	lr
